
computer_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f04  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003074  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800915c  0800915c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800915c  0800915c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800915c  0800915c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000074  080091d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080091d8  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014372  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000355e  00000000  00000000  0003440f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00037970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfc7  00000000  00000000  00039b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a64  00000000  00000000  00055b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ec1  00000000  00000000  0006f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  001114d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080060d0 	.word	0x080060d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080060d0 	.word	0x080060d0

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2uiz>:
 80006e0:	0042      	lsls	r2, r0, #1
 80006e2:	d20e      	bcs.n	8000702 <__aeabi_f2uiz+0x22>
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30b      	bcc.n	8000702 <__aeabi_f2uiz+0x22>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d409      	bmi.n	8000708 <__aeabi_f2uiz+0x28>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	4770      	bx	lr
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	4770      	bx	lr
 8000708:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800070c:	d101      	bne.n	8000712 <__aeabi_f2uiz+0x32>
 800070e:	0242      	lsls	r2, r0, #9
 8000710:	d102      	bne.n	8000718 <__aeabi_f2uiz+0x38>
 8000712:	f04f 30ff 	mov.w	r0, #4294967295
 8000716:	4770      	bx	lr
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000732:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <MX_ADC1_Init+0xb8>)
 8000734:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000740:	2201      	movs	r2, #1
 8000742:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_ADC1_Init+0xb4>)
 800074c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_ADC1_Init+0xb4>)
 800075a:	2203      	movs	r2, #3
 800075c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000760:	f001 f802 	bl	8001768 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800076a:	f000 fa14 	bl	8000b96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2301      	movs	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <MX_ADC1_Init+0xb4>)
 8000780:	f001 fa18 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa04 	bl	8000b96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800078e:	2302      	movs	r3, #2
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000792:	2302      	movs	r3, #2
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <MX_ADC1_Init+0xb4>)
 800079c:	f001 fa0a 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007a6:	f000 f9f6 	bl	8000b96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007aa:	2306      	movs	r3, #6
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ae:	2303      	movs	r3, #3
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_ADC1_Init+0xb4>)
 80007bc:	f001 f9fa 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007c6:	f000 f9e6 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000090 	.word	0x20000090
 80007d8:	40012400 	.word	0x40012400

080007dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <HAL_ADC_MspInit+0xbc>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d149      	bne.n	8000890 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <HAL_ADC_MspInit+0xc0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <HAL_ADC_MspInit+0xc0>)
 8000802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <HAL_ADC_MspInit+0xc0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <HAL_ADC_MspInit+0xc0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <HAL_ADC_MspInit+0xc0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_ADC_MspInit+0xc0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vout_Pin|NTC_Pin|T12_Pin;
 800082c:	2346      	movs	r3, #70	; 0x46
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	4819      	ldr	r0, [pc, #100]	; (80008a0 <HAL_ADC_MspInit+0xc4>)
 800083c:	f002 f8ec 	bl	8002a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_ADC_MspInit+0xcc>)
 8000844:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000876:	f001 fd53 	bl	8002320 <HAL_DMA_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000880:	f000 f989 	bl	8000b96 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 8000888:	621a      	str	r2, [r3, #32]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_ADC_MspInit+0xc8>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40012400 	.word	0x40012400
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	40020008 	.word	0x40020008

080008ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_DMA_Init+0x38>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <MX_DMA_Init+0x38>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_DMA_Init+0x38>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	200b      	movs	r0, #11
 80008d0:	f001 fcef 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d4:	200b      	movs	r0, #11
 80008d6:	f001 fd08 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fc:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a6f      	ldr	r2, [pc, #444]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a69      	ldr	r2, [pc, #420]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b64      	ldr	r3, [pc, #400]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a63      	ldr	r2, [pc, #396]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b58      	ldr	r3, [pc, #352]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a57      	ldr	r2, [pc, #348]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b55      	ldr	r3, [pc, #340]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Pin|STATE_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800097a:	4852      	ldr	r0, [pc, #328]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 800097c:	f002 f9f7 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000986:	4850      	ldr	r0, [pc, #320]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000988:	f002 f9f1 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000992:	484e      	ldr	r0, [pc, #312]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000994:	f002 f9eb 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000998:	f643 53ff 	movw	r3, #15871	; 0x3dff
 800099c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099e:	2303      	movs	r3, #3
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4846      	ldr	r0, [pc, #280]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 80009aa:	f002 f835 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10
 80009ae:	f643 4330 	movw	r3, #15408	; 0x3c30
 80009b2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	4619      	mov	r1, r3
 80009be:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009c0:	f002 f82a 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SW_Pin|A_Pin|B_Pin|key_Pin;
 80009c4:	230f      	movs	r3, #15
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	4619      	mov	r1, r3
 80009d6:	483e      	ldr	r0, [pc, #248]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009d8:	f002 f81e 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80009dc:	f649 13b8 	movw	r3, #39352	; 0x99b8
 80009e0:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e2:	2303      	movs	r3, #3
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4619      	mov	r1, r3
 80009ec:	483a      	ldr	r0, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 80009ee:	f002 f813 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80009f2:	f241 13ff 	movw	r3, #4607	; 0x11ff
 80009f6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4832      	ldr	r0, [pc, #200]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a04:	f002 f808 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_Pin|STATE_Pin;
 8000a08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 8000a22:	f001 fff9 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin;
 8000a26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2302      	movs	r3, #2
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a40:	f001 ffea 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000a44:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8000a48:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a56:	f001 ffdf 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 8000a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a74:	f001 ffd0 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f001 fc18 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a82:	2006      	movs	r0, #6
 8000a84:	f001 fc31 	bl	80022ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2007      	movs	r0, #7
 8000a8e:	f001 fc10 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a92:	2007      	movs	r0, #7
 8000a94:	f001 fc29 	bl	80022ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2008      	movs	r0, #8
 8000a9e:	f001 fc08 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aa2:	2008      	movs	r0, #8
 8000aa4:	f001 fc21 	bl	80022ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2009      	movs	r0, #9
 8000aae:	f001 fc00 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ab2:	2009      	movs	r0, #9
 8000ab4:	f001 fc19 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40011800 	.word	0x40011800
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	10210000 	.word	0x10210000
 8000ad8:	40010800 	.word	0x40010800

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b096      	sub	sp, #88	; 0x58
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fe70 	bl	80057d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f962 	bl	8002e00 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f828 	bl	8000b96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fbce 	bl	8003304 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b6e:	f000 f812 	bl	8000b96 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b72:	2302      	movs	r3, #2
 8000b74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fd4e 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b8a:	f000 f804 	bl	8000b96 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3758      	adds	r7, #88	; 0x58
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
}
 8000b9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <Error_Handler+0x8>

08000ba0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <MX_SPI2_Init+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bec:	220a      	movs	r2, #10
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_SPI2_Init+0x64>)
 8000bf2:	f002 fea3 	bl	800393c <HAL_SPI_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bfc:	f7ff ffcb 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000104 	.word	0x20000104
 8000c08:	40003800 	.word	0x40003800

08000c0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_SPI_MspInit+0x8c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d131      	bne.n	8000c90 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c36:	61d3      	str	r3, [r2, #28]
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_SPI_MspInit+0x90>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000c5c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <HAL_SPI_MspInit+0x94>)
 8000c72:	f001 fed1 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x94>)
 8000c8c:	f001 fec4 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40003800 	.word	0x40003800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_MspInit+0x60>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_MspInit+0x60>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 fccb 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f002 f838 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_Pin);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f002 f831 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Pin);
 8000d76:	2004      	movs	r0, #4
 8000d78:	f002 f82a 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key_Pin);
 8000d84:	2008      	movs	r0, #8
 8000d86:	f002 f823 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Channel1_IRQHandler+0x10>)
 8000d96:	f001 fbd5 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000c0 	.word	0x200000c0

08000da4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM4_IRQHandler+0x10>)
 8000daa:	f003 f805 	bl	8003db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001f0 	.word	0x200001f0

08000db8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM6_IRQHandler+0x10>)
 8000dbe:	f002 fffb 	bl	8003db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000238 	.word	0x20000238

08000dcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM7_IRQHandler+0x10>)
 8000dd2:	f002 fff1 	bl	8003db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000280 	.word	0x20000280

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 fcb4 	bl	800577c <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000c000 	.word	0x2000c000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	20000480 	.word	0x20000480

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b092      	sub	sp, #72	; 0x48
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2220      	movs	r2, #32
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 fca4 	bl	80057d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000e8a:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <MX_TIM1_Init+0x100>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000e90:	2247      	movs	r2, #71	; 0x47
 8000e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000e9c:	2263      	movs	r2, #99	; 0x63
 8000e9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb2:	4828      	ldr	r0, [pc, #160]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000eb4:	f002 fe76 	bl	8003ba4 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000ebe:	f7ff fe6a 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4820      	ldr	r0, [pc, #128]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000ed2:	f003 fd07 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000edc:	f7ff fe5b 	bl	8000b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000f06:	f003 f85f 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f10:	f7ff fe41 	bl	8000b96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000f38:	f003 fd40 	bl	80049bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000f42:	f7ff fe28 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM1_Init+0xfc>)
 8000f48:	f000 f9cc 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3748      	adds	r7, #72	; 0x48
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000160 	.word	0x20000160
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <MX_TIM3_Init+0xf0>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f86:	2247      	movs	r2, #71	; 0x47
 8000f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM3_Init+0xec>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa2:	4829      	ldr	r0, [pc, #164]	; (8001048 <MX_TIM3_Init+0xec>)
 8000fa4:	f002 fdfe 	bl	8003ba4 <HAL_TIM_PWM_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000fae:	f7ff fdf2 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4821      	ldr	r0, [pc, #132]	; (8001048 <MX_TIM3_Init+0xec>)
 8000fc2:	f003 fc8f 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000fcc:	f7ff fde3 	bl	8000b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd0:	2360      	movs	r3, #96	; 0x60
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM3_Init+0xec>)
 8000fe8:	f002 ffee 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000ff2:	f7ff fdd0 	bl	8000b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <MX_TIM3_Init+0xec>)
 8000ffe:	f002 ffe3 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001008:	f7ff fdc5 	bl	8000b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2208      	movs	r2, #8
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM3_Init+0xec>)
 8001014:	f002 ffd8 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800101e:	f7ff fdba 	bl	8000b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	220c      	movs	r2, #12
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM3_Init+0xec>)
 800102a:	f002 ffcd 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001034:	f7ff fdaf 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM3_Init+0xec>)
 800103a:	f000 f953 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001a8 	.word	0x200001a8
 800104c:	40000400 	.word	0x40000400

08001050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM4_Init+0x94>)
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <MX_TIM4_Init+0x98>)
 8001070:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM4_Init+0x94>)
 8001074:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001078:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM4_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_TIM4_Init+0x94>)
 8001082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001086:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_TIM4_Init+0x94>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_TIM4_Init+0x94>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <MX_TIM4_Init+0x94>)
 8001096:	f002 fcd5 	bl	8003a44 <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010a0:	f7ff fd79 	bl	8000b96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_TIM4_Init+0x94>)
 80010b2:	f003 f84b 	bl	800414c <HAL_TIM_ConfigClockSource>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010bc:	f7ff fd6b 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_TIM4_Init+0x94>)
 80010ce:	f003 fc09 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f7ff fd5d 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f0 	.word	0x200001f0
 80010e8:	40000800 	.word	0x40000800

080010ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM6_Init+0x64>)
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_TIM6_Init+0x68>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_TIM6_Init+0x64>)
 8001102:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001106:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_TIM6_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_TIM6_Init+0x64>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM6_Init+0x64>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_TIM6_Init+0x64>)
 800111e:	f002 fc91 	bl	8003a44 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001128:	f7ff fd35 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM6_Init+0x64>)
 800113a:	f003 fbd3 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001144:	f7ff fd27 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000238 	.word	0x20000238
 8001154:	40001000 	.word	0x40001000

08001158 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_TIM7_Init+0x64>)
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <MX_TIM7_Init+0x68>)
 800116a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_TIM7_Init+0x64>)
 800116e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001172:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_TIM7_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_TIM7_Init+0x64>)
 800117c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001180:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_TIM7_Init+0x64>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_TIM7_Init+0x64>)
 800118a:	f002 fc5b 	bl	8003a44 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001194:	f7ff fcff 	bl	8000b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM7_Init+0x64>)
 80011a6:	f003 fb9d 	bl	80048e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f7ff fcf1 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000280 	.word	0x20000280
 80011c0:	40001400 	.word	0x40001400

080011c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_TIM_PWM_MspInit+0x58>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10c      	bne.n	80011f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011ee:	e010      	b.n	8001212 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_PWM_MspInit+0x60>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10b      	bne.n	8001212 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_TIM_PWM_MspInit+0x5c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40012c00 	.word	0x40012c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40000400 	.word	0x40000400

08001228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <HAL_TIM_Base_MspInit+0xac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d114      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201e      	movs	r0, #30
 8001258:	f001 f82b 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800125c:	201e      	movs	r0, #30
 800125e:	f001 f844 	bl	80022ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001262:	e032      	b.n	80012ca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_TIM_Base_MspInit+0xb4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d114      	bne.n	8001298 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2036      	movs	r0, #54	; 0x36
 800128c:	f001 f811 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001290:	2036      	movs	r0, #54	; 0x36
 8001292:	f001 f82a 	bl	80022ea <HAL_NVIC_EnableIRQ>
}
 8001296:	e018      	b.n	80012ca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_TIM_Base_MspInit+0xb8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d113      	bne.n	80012ca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_TIM_Base_MspInit+0xb0>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2037      	movs	r0, #55	; 0x37
 80012c0:	f000 fff7 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012c4:	2037      	movs	r0, #55	; 0x37
 80012c6:	f001 f810 	bl	80022ea <HAL_NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40000800 	.word	0x40000800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40001000 	.word	0x40001000
 80012e0:	40001400 	.word	0x40001400

080012e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <HAL_TIM_MspPostInit+0xe0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d12b      	bne.n	800135c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 800130a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = T12_CTRL_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(T12_CTRL_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4826      	ldr	r0, [pc, #152]	; (80013cc <HAL_TIM_MspPostInit+0xe8>)
 8001332:	f001 fb71 	bl	8002a18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_TIM_MspPostInit+0xec>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_TIM_MspPostInit+0xec>)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800135a:	e02f      	b.n	80013bc <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_TIM_MspPostInit+0xf0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12a      	bne.n	80013bc <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_TIM_MspPostInit+0xe4>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = R_Pin|G_Pin|BC8_Pin|Buzzer_Pin;
 800137e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <HAL_TIM_MspPostInit+0xf4>)
 8001394:	f001 fb40 	bl	8002a18 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_TIM_MspPostInit+0xec>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_TIM_MspPostInit+0xec>)
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	6053      	str	r3, [r2, #4]
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40012c00 	.word	0x40012c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40011800 	.word	0x40011800
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40011000 	.word	0x40011000

080013dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART1_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001414:	f003 fb35 	bl	8004a82 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f7ff fbba 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002c8 	.word	0x200002c8
 800142c:	40013800 	.word	0x40013800

08001430 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART3_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001468:	f003 fb0b 	bl	8004a82 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f7ff fb90 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000310 	.word	0x20000310
 8001480:	40004800 	.word	0x40004800

08001484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d132      	bne.n	800150a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a36      	ldr	r2, [pc, #216]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TXD_Pin;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4827      	ldr	r0, [pc, #156]	; (8001588 <HAL_UART_MspInit+0x104>)
 80014ea:	f001 fa95 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RXD_Pin;
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RXD_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4619      	mov	r1, r3
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <HAL_UART_MspInit+0x104>)
 8001504:	f001 fa88 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001508:	e036      	b.n	8001578 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_UART_MspInit+0x108>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d131      	bne.n	8001578 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_UART_MspInit+0x100>)
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x100>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_UART_MspInit+0x100>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4619      	mov	r1, r3
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_UART_MspInit+0x10c>)
 800155a:	f001 fa5d 	bl	8002a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800155e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0318 	add.w	r3, r7, #24
 8001570:	4619      	mov	r1, r3
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <HAL_UART_MspInit+0x10c>)
 8001574:	f001 fa50 	bl	8002a18 <HAL_GPIO_Init>
}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40013800 	.word	0x40013800
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800
 800158c:	40004800 	.word	0x40004800
 8001590:	40010c00 	.word	0x40010c00

08001594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff fc5a 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800159a:	490c      	ldr	r1, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b0:	4c09      	ldr	r4, [pc, #36]	; (80015d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f004 f8e3 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f004 f8d5 	bl	8005770 <main>
  bx lr
 80015c6:	4770      	bx	lr
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015d0:	08009164 	.word	0x08009164
  ldr r2, =_sbss
 80015d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015d8:	2000047c 	.word	0x2000047c

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>

080015de <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7fe fe1c 	bl	8000230 <__addsf3>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7fe fe14 	bl	8000230 <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4619      	mov	r1, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe06 	bl	8000230 <__addsf3>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	4620      	mov	r0, r4
 800162a:	f7fe fdff 	bl	800022c <__aeabi_fsub>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <arm_pid_init_f32+0x74>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	330c      	adds	r3, #12
 8001648:	220c      	movs	r2, #12
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f004 f8bf 	bl	80057d0 <memset>
  }

}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 fe15 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fb14 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fe2d 	bl	8002306 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 fdf5 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000008 	.word	0x20000008
 8001708:	20000358 	.word	0x20000358

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000358 	.word	0x20000358

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008

08001768 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0ce      	b.n	8001928 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff f818 	bl	80007dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fb53 	bl	8001e58 <ADC_ConversionStop_Disable>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80a9 	bne.w	8001916 <HAL_ADC_Init+0x1ae>
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80a5 	bne.w	8001916 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d4:	f023 0302 	bic.w	r3, r3, #2
 80017d8:	f043 0202 	orr.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4951      	ldr	r1, [pc, #324]	; (8001930 <HAL_ADC_Init+0x1c8>)
 80017ea:	428b      	cmp	r3, r1
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_Init+0x9c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_Init+0x96>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	e004      	b.n	8001808 <HAL_ADC_Init+0xa0>
 80017fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001802:	e001      	b.n	8001808 <HAL_ADC_Init+0xa0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001808:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7b1b      	ldrb	r3, [r3, #12]
 800180e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001810:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	4313      	orrs	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001820:	d003      	beq.n	800182a <HAL_ADC_Init+0xc2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <HAL_ADC_Init+0xc8>
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	e000      	b.n	8001832 <HAL_ADC_Init+0xca>
 8001830:	2300      	movs	r3, #0
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7d1b      	ldrb	r3, [r3, #20]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d119      	bne.n	8001874 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7b1b      	ldrb	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	3b01      	subs	r3, #1
 800184e:	035a      	lsls	r2, r3, #13
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e00b      	b.n	8001874 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	f043 0220 	orr.w	r2, r3, #32
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_ADC_Init+0x1cc>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	430b      	orrs	r3, r1
 800189a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_Init+0x146>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d104      	bne.n	80018b8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	051b      	lsls	r3, r3, #20
 80018b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_ADC_Init+0x1d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10b      	bne.n	80018f4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018f2:	e018      	b.n	8001926 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f023 0312 	bic.w	r3, r3, #18
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001914:	e007      	b.n	8001926 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001926:	7dfb      	ldrb	r3, [r7, #23]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013c00 	.word	0x40013c00
 8001934:	ffe1f7fd 	.word	0xffe1f7fd
 8001938:	ff1f0efe 	.word	0xff1f0efe

0800193c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a64      	ldr	r2, [pc, #400]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_ADC_Start_DMA+0x24>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_ADC_Start_DMA+0x1ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d106      	bne.n	800196e <HAL_ADC_Start_DMA+0x32>
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80b3 	bne.w	8001ad4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_ADC_Start_DMA+0x40>
 8001978:	2302      	movs	r3, #2
 800197a:	e0ae      	b.n	8001ada <HAL_ADC_Start_DMA+0x19e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa0d 	bl	8001da4 <ADC_Enable>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 809a 	bne.w	8001aca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a4e      	ldr	r2, [pc, #312]	; (8001ae8 <HAL_ADC_Start_DMA+0x1ac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d105      	bne.n	80019c0 <HAL_ADC_Start_DMA+0x84>
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d115      	bne.n	80019ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d026      	beq.n	8001a28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ea:	e01d      	b.n	8001a28 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_ADC_Start_DMA+0xd0>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <HAL_ADC_Start_DMA+0x1ac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10d      	bne.n	8001a28 <HAL_ADC_Start_DMA+0xec>
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f023 0206 	bic.w	r2, r3, #6
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a25      	ldr	r2, [pc, #148]	; (8001aec <HAL_ADC_Start_DMA+0x1b0>)
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a24      	ldr	r2, [pc, #144]	; (8001af0 <HAL_ADC_Start_DMA+0x1b4>)
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_ADC_Start_DMA+0x1b8>)
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0202 	mvn.w	r2, #2
 8001a70:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a80:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a18      	ldr	r0, [r3, #32]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	334c      	adds	r3, #76	; 0x4c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f000 fcbb 	bl	800240c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aa0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ab4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ac6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ac8:	e006      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012400 	.word	0x40012400
 8001ae8:	40012800 	.word	0x40012800
 8001aec:	08001edb 	.word	0x08001edb
 8001af0:	08001f57 	.word	0x08001f57
 8001af4:	08001f73 	.word	0x08001f73

08001af8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Stop_DMA+0x1a>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e03a      	b.n	8001b88 <HAL_ADC_Stop_DMA+0x90>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f99c 	bl	8001e58 <ADC_ConversionStop_Disable>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d129      	bne.n	8001b7e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b38:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d11a      	bne.n	8001b7e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fcbd 	bl	80024cc <HAL_DMA_Abort>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10a      	bne.n	8001b72 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b70:	e005      	b.n	8001b7e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0dc      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1da>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d81c      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b05      	subs	r3, #5
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b05      	subs	r3, #5
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1c:	e03c      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d81c      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b23      	subs	r3, #35	; 0x23
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	; 0x23
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5e:	e01b      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b41      	subs	r3, #65	; 0x41
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b41      	subs	r3, #65	; 0x41
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d91c      	bls.n	8001cda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	e019      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d132      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d125      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d126      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d11a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9a      	lsrs	r2, r3, #18
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x1b2>
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d040      	beq.n	8001e44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <ADC_Enable+0xac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <ADC_Enable+0xb0>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9b      	lsrs	r3, r3, #18
 8001dde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001de0:	e002      	b.n	8001de8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dee:	f7ff fc8d 	bl	800170c <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001df4:	e01f      	b.n	8001e36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001df6:	f7ff fc89 	bl	800170c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d918      	bls.n	8001e36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d011      	beq.n	8001e36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d1d8      	bne.n	8001df6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000
 8001e54:	431bde83 	.word	0x431bde83

08001e58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d12e      	bne.n	8001ed0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e82:	f7ff fc43 	bl	800170c <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e88:	e01b      	b.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e8a:	f7ff fc3f 	bl	800170c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d914      	bls.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10d      	bne.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e007      	b.n	8001ed2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d0dc      	beq.n	8001e8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d127      	bne.n	8001f44 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f0e:	d115      	bne.n	8001f3c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d111      	bne.n	8001f3c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f002 fe7f 	bl	8004c40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f42:	e004      	b.n	8001f4e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fe13 	bl	8001b90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff fe02 	bl	8001ba2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e097      	b.n	80020f6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff42 	bl	8001e58 <ADC_ConversionStop_Disable>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fee3 	bl	8001da4 <ADC_Enable>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 8081 	bne.w	80020ec <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ff2:	f023 0302 	bic.w	r3, r3, #2
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_ADCEx_Calibration_Start+0x158>)
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	2002      	movs	r0, #2
 8002004:	f001 fbc2 	bl	800378c <HAL_RCCEx_GetPeriphCLKFreq>
 8002008:	4603      	mov	r3, r0
 800200a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800200e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002010:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002012:	e002      	b.n	800201a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3b01      	subs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0208 	orr.w	r2, r2, #8
 800202e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002030:	f7ff fb6c 	bl	800170c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002036:	e01b      	b.n	8002070 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002038:	f7ff fb68 	bl	800170c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b0a      	cmp	r3, #10
 8002044:	d914      	bls.n	8002070 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	f023 0312 	bic.w	r3, r3, #18
 800205c:	f043 0210 	orr.w	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e042      	b.n	80020f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1dc      	bne.n	8002038 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0204 	orr.w	r2, r2, #4
 800208c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800208e:	f7ff fb3d 	bl	800170c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002094:	e01b      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002096:	f7ff fb39 	bl	800170c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b0a      	cmp	r3, #10
 80020a2:	d914      	bls.n	80020ce <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f023 0312 	bic.w	r3, r3, #18
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e013      	b.n	80020f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1dc      	bne.n	8002096 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f023 0303 	bic.w	r3, r3, #3
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <__NVIC_EnableIRQ+0x34>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff90 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff2d 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff42 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff90 	bl	80021f4 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5f 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff35 	bl	8002168 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffa2 	bl	8002258 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e059      	b.n	80023ea <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_DMA_Init+0xd4>)
 800233e:	429a      	cmp	r2, r3
 8002340:	d80f      	bhi.n	8002362 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_DMA_Init+0xd8>)
 800234a:	4413      	add	r3, r2
 800234c:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_DMA_Init+0xdc>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	009a      	lsls	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_DMA_Init+0xe0>)
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002360:	e00e      	b.n	8002380 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_DMA_Init+0xe4>)
 800236a:	4413      	add	r3, r2
 800236c:	4a23      	ldr	r2, [pc, #140]	; (80023fc <HAL_DMA_Init+0xdc>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	009a      	lsls	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_DMA_Init+0xe8>)
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002396:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800239a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40020407 	.word	0x40020407
 80023f8:	bffdfff8 	.word	0xbffdfff8
 80023fc:	cccccccd 	.word	0xcccccccd
 8002400:	40020000 	.word	0x40020000
 8002404:	bffdfbf8 	.word	0xbffdfbf8
 8002408:	40020400 	.word	0x40020400

0800240c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_DMA_Start_IT+0x20>
 8002428:	2302      	movs	r3, #2
 800242a:	e04b      	b.n	80024c4 <HAL_DMA_Start_IT+0xb8>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d13a      	bne.n	80024b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 faa9 	bl	80029bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 020e 	orr.w	r2, r2, #14
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e00f      	b.n	80024a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 020a 	orr.w	r2, r2, #10
 80024a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e005      	b.n	80024c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e020      	b.n	8002538 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020e 	bic.w	r2, r2, #14
 8002504:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2204      	movs	r2, #4
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80f1 	beq.w	8002750 <HAL_DMA_IRQHandler+0x20c>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80eb 	beq.w	8002750 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_DMA_IRQHandler+0x1d8>)
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d958      	bls.n	8002656 <HAL_DMA_IRQHandler+0x112>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_DMA_IRQHandler+0x1dc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d04f      	beq.n	800264e <HAL_DMA_IRQHandler+0x10a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_IRQHandler+0x1e0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d048      	beq.n	800264a <HAL_DMA_IRQHandler+0x106>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5a      	ldr	r2, [pc, #360]	; (8002728 <HAL_DMA_IRQHandler+0x1e4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d040      	beq.n	8002644 <HAL_DMA_IRQHandler+0x100>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_IRQHandler+0x1e8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d038      	beq.n	800263e <HAL_DMA_IRQHandler+0xfa>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_DMA_IRQHandler+0x1ec>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d030      	beq.n	8002638 <HAL_DMA_IRQHandler+0xf4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_IRQHandler+0x1f0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d028      	beq.n	8002632 <HAL_DMA_IRQHandler+0xee>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_DMA_IRQHandler+0x1d8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d020      	beq.n	800262c <HAL_DMA_IRQHandler+0xe8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_DMA_IRQHandler+0x1f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_DMA_IRQHandler+0xe4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_DMA_IRQHandler+0x1f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d012      	beq.n	8002624 <HAL_DMA_IRQHandler+0xe0>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_DMA_IRQHandler+0x1fc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00a      	beq.n	800261e <HAL_DMA_IRQHandler+0xda>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <HAL_DMA_IRQHandler+0x200>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d102      	bne.n	8002618 <HAL_DMA_IRQHandler+0xd4>
 8002612:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002616:	e01b      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800261c:	e018      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	e015      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	e013      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002628:	2304      	movs	r3, #4
 800262a:	e011      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 800262c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002630:	e00e      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002636:	e00b      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800263c:	e008      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 800263e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002642:	e005      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	e002      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 800264a:	2340      	movs	r3, #64	; 0x40
 800264c:	e000      	b.n	8002650 <HAL_DMA_IRQHandler+0x10c>
 800264e:	2304      	movs	r3, #4
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <HAL_DMA_IRQHandler+0x204>)
 8002652:	6053      	str	r3, [r2, #4]
 8002654:	e057      	b.n	8002706 <HAL_DMA_IRQHandler+0x1c2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_DMA_IRQHandler+0x1dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04f      	beq.n	8002700 <HAL_DMA_IRQHandler+0x1bc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_DMA_IRQHandler+0x1e0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d048      	beq.n	80026fc <HAL_DMA_IRQHandler+0x1b8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <HAL_DMA_IRQHandler+0x1e4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d040      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x1b2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2c      	ldr	r2, [pc, #176]	; (800272c <HAL_DMA_IRQHandler+0x1e8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d038      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x1ac>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <HAL_DMA_IRQHandler+0x1ec>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d030      	beq.n	80026ea <HAL_DMA_IRQHandler+0x1a6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_DMA_IRQHandler+0x1f0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d028      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x1a0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_DMA_IRQHandler+0x1d8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d020      	beq.n	80026de <HAL_DMA_IRQHandler+0x19a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_DMA_IRQHandler+0x1f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_DMA_IRQHandler+0x196>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_DMA_IRQHandler+0x1f8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d012      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x192>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_DMA_IRQHandler+0x1fc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00a      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x18c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_DMA_IRQHandler+0x200>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d102      	bne.n	80026ca <HAL_DMA_IRQHandler+0x186>
 80026c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c8:	e01b      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026ce:	e018      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d4:	e015      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026d6:	2340      	movs	r3, #64	; 0x40
 80026d8:	e013      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026da:	2304      	movs	r3, #4
 80026dc:	e011      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026e2:	e00e      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e8:	e00b      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026ee:	e008      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f4:	e005      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fa:	e002      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 80026fc:	2340      	movs	r3, #64	; 0x40
 80026fe:	e000      	b.n	8002702 <HAL_DMA_IRQHandler+0x1be>
 8002700:	2304      	movs	r3, #4
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_DMA_IRQHandler+0x208>)
 8002704:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8136 	beq.w	800297c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002718:	e130      	b.n	800297c <HAL_DMA_IRQHandler+0x438>
 800271a:	bf00      	nop
 800271c:	40020080 	.word	0x40020080
 8002720:	40020008 	.word	0x40020008
 8002724:	4002001c 	.word	0x4002001c
 8002728:	40020030 	.word	0x40020030
 800272c:	40020044 	.word	0x40020044
 8002730:	40020058 	.word	0x40020058
 8002734:	4002006c 	.word	0x4002006c
 8002738:	40020408 	.word	0x40020408
 800273c:	4002041c 	.word	0x4002041c
 8002740:	40020430 	.word	0x40020430
 8002744:	40020444 	.word	0x40020444
 8002748:	40020400 	.word	0x40020400
 800274c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2202      	movs	r2, #2
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80dd 	beq.w	800291c <HAL_DMA_IRQHandler+0x3d8>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80d7 	beq.w	800291c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020a 	bic.w	r2, r2, #10
 800278a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <HAL_DMA_IRQHandler+0x444>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d958      	bls.n	8002852 <HAL_DMA_IRQHandler+0x30e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a79      	ldr	r2, [pc, #484]	; (800298c <HAL_DMA_IRQHandler+0x448>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04f      	beq.n	800284a <HAL_DMA_IRQHandler+0x306>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a78      	ldr	r2, [pc, #480]	; (8002990 <HAL_DMA_IRQHandler+0x44c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d048      	beq.n	8002846 <HAL_DMA_IRQHandler+0x302>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a76      	ldr	r2, [pc, #472]	; (8002994 <HAL_DMA_IRQHandler+0x450>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2fc>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_DMA_IRQHandler+0x454>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d038      	beq.n	800283a <HAL_DMA_IRQHandler+0x2f6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a73      	ldr	r2, [pc, #460]	; (800299c <HAL_DMA_IRQHandler+0x458>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d030      	beq.n	8002834 <HAL_DMA_IRQHandler+0x2f0>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <HAL_DMA_IRQHandler+0x45c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d028      	beq.n	800282e <HAL_DMA_IRQHandler+0x2ea>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a69      	ldr	r2, [pc, #420]	; (8002988 <HAL_DMA_IRQHandler+0x444>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d020      	beq.n	8002828 <HAL_DMA_IRQHandler+0x2e4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_DMA_IRQHandler+0x460>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d019      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2e0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6c      	ldr	r2, [pc, #432]	; (80029a8 <HAL_DMA_IRQHandler+0x464>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d012      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2dc>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <HAL_DMA_IRQHandler+0x468>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00a      	beq.n	800281a <HAL_DMA_IRQHandler+0x2d6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_DMA_IRQHandler+0x46c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d102      	bne.n	8002814 <HAL_DMA_IRQHandler+0x2d0>
 800280e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002812:	e01b      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	e018      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 800281a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281e:	e015      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002820:	2320      	movs	r3, #32
 8002822:	e013      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002824:	2302      	movs	r3, #2
 8002826:	e011      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282c:	e00e      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 800282e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002832:	e00b      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	e008      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	e005      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	e002      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 8002846:	2320      	movs	r3, #32
 8002848:	e000      	b.n	800284c <HAL_DMA_IRQHandler+0x308>
 800284a:	2302      	movs	r3, #2
 800284c:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_DMA_IRQHandler+0x470>)
 800284e:	6053      	str	r3, [r2, #4]
 8002850:	e057      	b.n	8002902 <HAL_DMA_IRQHandler+0x3be>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_DMA_IRQHandler+0x448>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04f      	beq.n	80028fc <HAL_DMA_IRQHandler+0x3b8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a4b      	ldr	r2, [pc, #300]	; (8002990 <HAL_DMA_IRQHandler+0x44c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d048      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x3b4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <HAL_DMA_IRQHandler+0x450>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x3ae>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_DMA_IRQHandler+0x454>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d038      	beq.n	80028ec <HAL_DMA_IRQHandler+0x3a8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a47      	ldr	r2, [pc, #284]	; (800299c <HAL_DMA_IRQHandler+0x458>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d030      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <HAL_DMA_IRQHandler+0x45c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d028      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x39c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <HAL_DMA_IRQHandler+0x444>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d020      	beq.n	80028da <HAL_DMA_IRQHandler+0x396>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DMA_IRQHandler+0x460>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x392>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HAL_DMA_IRQHandler+0x464>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d012      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x38e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_DMA_IRQHandler+0x468>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x388>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <HAL_DMA_IRQHandler+0x46c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d102      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x382>
 80028c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c4:	e01b      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ca:	e018      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d0:	e015      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028d2:	2320      	movs	r3, #32
 80028d4:	e013      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e011      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028de:	e00e      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e4:	e00b      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ea:	e008      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	e005      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f6:	e002      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028f8:	2320      	movs	r3, #32
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x3ba>
 80028fc:	2302      	movs	r3, #2
 80028fe:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <HAL_DMA_IRQHandler+0x474>)
 8002900:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d034      	beq.n	800297c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800291a:	e02f      	b.n	800297c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2208      	movs	r2, #8
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d028      	beq.n	800297e <HAL_DMA_IRQHandler+0x43a>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
    }
  }
  return;
 800297c:	bf00      	nop
 800297e:	bf00      	nop
}
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40020080 	.word	0x40020080
 800298c:	40020008 	.word	0x40020008
 8002990:	4002001c 	.word	0x4002001c
 8002994:	40020030 	.word	0x40020030
 8002998:	40020044 	.word	0x40020044
 800299c:	40020058 	.word	0x40020058
 80029a0:	4002006c 	.word	0x4002006c
 80029a4:	40020408 	.word	0x40020408
 80029a8:	4002041c 	.word	0x4002041c
 80029ac:	40020430 	.word	0x40020430
 80029b0:	40020444 	.word	0x40020444
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020000 	.word	0x40020000

080029bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b08b      	sub	sp, #44	; 0x2c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e179      	b.n	8002d20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8168 	bne.w	8002d1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a96      	ldr	r2, [pc, #600]	; (8002ca8 <HAL_GPIO_Init+0x290>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d05e      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a54:	4a94      	ldr	r2, [pc, #592]	; (8002ca8 <HAL_GPIO_Init+0x290>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d875      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a94      	ldr	r2, [pc, #592]	; (8002cac <HAL_GPIO_Init+0x294>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d058      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a60:	4a92      	ldr	r2, [pc, #584]	; (8002cac <HAL_GPIO_Init+0x294>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d86f      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a66:	4a92      	ldr	r2, [pc, #584]	; (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d052      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a90      	ldr	r2, [pc, #576]	; (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d869      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a72:	4a90      	ldr	r2, [pc, #576]	; (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04c      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a78:	4a8e      	ldr	r2, [pc, #568]	; (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d863      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a8e      	ldr	r2, [pc, #568]	; (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a84:	4a8c      	ldr	r2, [pc, #560]	; (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d85d      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_GPIO_Init+0xcc>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d859      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_GPIO_Init+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002b13 	.word	0x08002b13
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aff 	.word	0x08002aff
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b47 	.word	0x08002b47
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aea:	e02c      	b.n	8002b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e029      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	3304      	adds	r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e024      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3308      	adds	r3, #8
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e01f      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e01a      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e013      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	611a      	str	r2, [r3, #16]
          break;
 8002b32:	e009      	b.n	8002b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	615a      	str	r2, [r3, #20]
          break;
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          break;
 8002b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d801      	bhi.n	8002b52 <HAL_GPIO_Init+0x13a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_Init+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d802      	bhi.n	8002b64 <HAL_GPIO_Init+0x14c>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x152>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	3b08      	subs	r3, #8
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	210f      	movs	r1, #15
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80c1 	beq.w	8002d1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb0:	4a44      	ldr	r2, [pc, #272]	; (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01f      	beq.n	8002c1c <HAL_GPIO_Init+0x204>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_GPIO_Init+0x2b4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d019      	beq.n	8002c18 <HAL_GPIO_Init+0x200>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1fc>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1f4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1f0>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e00a      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c08:	2306      	movs	r3, #6
 8002c0a:	e008      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2e:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4924      	ldr	r1, [pc, #144]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4920      	ldr	r1, [pc, #128]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	491a      	ldr	r1, [pc, #104]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d025      	beq.n	8002ce4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4910      	ldr	r1, [pc, #64]	; (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e025      	b.n	8002cf2 <HAL_GPIO_Init+0x2da>
 8002ca6:	bf00      	nop
 8002ca8:	10320000 	.word	0x10320000
 8002cac:	10310000 	.word	0x10310000
 8002cb0:	10220000 	.word	0x10220000
 8002cb4:	10210000 	.word	0x10210000
 8002cb8:	10120000 	.word	0x10120000
 8002cbc:	10110000 	.word	0x10110000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	40011800 	.word	0x40011800
 8002cdc:	40011c00 	.word	0x40011c00
 8002ce0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	4913      	ldr	r1, [pc, #76]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4909      	ldr	r1, [pc, #36]	; (8002d3c <HAL_GPIO_Init+0x324>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f ae7e 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	372c      	adds	r7, #44	; 0x2c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7e:	787b      	ldrb	r3, [r7, #1]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	041a      	lsls	r2, r3, #16
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 f820 	bl	8004e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40010400 	.word	0x40010400

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e272      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d112      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d10b      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d06c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d168      	bne.n	8002f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e24c      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x76>
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7f      	ldr	r2, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e02e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0xbc>
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fc16 	bl	800170c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fc12 	bl	800170c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e200      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe4>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fc02 	bl	800170c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fbfe 	bl	800170c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1ec      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x10c>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c0      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fbb7 	bl	800170c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fbb3 	bl	800170c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4927      	ldr	r1, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fb96 	bl	800170c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fb92 	bl	800170c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e180      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03a      	beq.n	8003084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fb76 	bl	800170c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fb72 	bl	800170c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e160      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 face 	bl	80035e4 <RCC_Delay>
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fb5c 	bl	800170c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fb58 	bl	800170c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d908      	bls.n	8003078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e146      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	42420000 	.word	0x42420000
 8003074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e9      	bne.n	8003058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a6 	beq.w	80031de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b85      	ldr	r3, [pc, #532]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b7f      	ldr	r3, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7e      	ldr	r2, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fb19 	bl	800170c <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fb15 	bl	800170c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e103      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e02d      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x334>
 800311a:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	e01c      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x356>
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fac9 	bl	800170c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fac5 	bl	800170c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCC_OscConfig+0x37e>
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fab3 	bl	800170c <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe faaf 	bl	800170c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e09b      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d061      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d146      	bne.n	800328a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fa83 	bl	800170c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fa7f 	bl	800170c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e06d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4921      	ldr	r1, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a19      	ldr	r1, [r3, #32]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	430b      	orrs	r3, r1
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fa53 	bl	800170c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fa4f 	bl	800170c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e03d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x46a>
 8003288:	e035      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fa3c 	bl	800170c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fa38 	bl	800170c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e026      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x498>
 80032b6:	e01e      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e019      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x500>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d0      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	4965      	ldr	r1, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800336a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d040      	beq.n	8003424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d115      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e073      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06b      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4936      	ldr	r1, [pc, #216]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f4:	f7fe f98a 	bl	800170c <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fe f986 	bl	800170c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e053      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d210      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4922      	ldr	r1, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1cc>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1d0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f8e8 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08006104 	.word	0x08006104
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_GetSysClockFreq+0x94>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x30>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x36>
 8003506:	e027      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800350a:	613b      	str	r3, [r7, #16]
      break;
 800350c:	e027      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_GetSysClockFreq+0x94>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0c5b      	lsrs	r3, r3, #17
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e004      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <HAL_RCC_GetSysClockFreq+0xa4>)
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800355a:	613b      	str	r3, [r7, #16]
      break;
 800355c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355e:	693b      	ldr	r3, [r7, #16]
}
 8003560:	4618      	mov	r0, r3
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	007a1200 	.word	0x007a1200
 8003574:	0800611c 	.word	0x0800611c
 8003578:	0800612c 	.word	0x0800612c
 800357c:	003d0900 	.word	0x003d0900

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08006114 	.word	0x08006114

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffde 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08006114 	.word	0x08006114

080035e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <RCC_Delay+0x34>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <RCC_Delay+0x38>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003600:	bf00      	nop
  }
  while (Delay --);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <RCC_Delay+0x1c>
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d07d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d118      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003680:	f7fe f844 	bl	800170c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fe f840 	bl	800170c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e06d      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d027      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d4:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f80f 	bl	800170c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe f80b 	bl	800170c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e036      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	490b      	ldr	r1, [pc, #44]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	42420440 	.word	0x42420440

0800378c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	f200 80af 	bhi.w	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	0800388f 	.word	0x0800388f
 80037bc:	080038f5 	.word	0x080038f5
 80037c0:	08003911 	.word	0x08003911
 80037c4:	0800387f 	.word	0x0800387f
 80037c8:	08003911 	.word	0x08003911
 80037cc:	08003911 	.word	0x08003911
 80037d0:	08003911 	.word	0x08003911
 80037d4:	08003887 	.word	0x08003887
 80037d8:	08003911 	.word	0x08003911
 80037dc:	08003911 	.word	0x08003911
 80037e0:	08003911 	.word	0x08003911
 80037e4:	08003911 	.word	0x08003911
 80037e8:	08003911 	.word	0x08003911
 80037ec:	08003911 	.word	0x08003911
 80037f0:	08003911 	.word	0x08003911
 80037f4:	080037f9 	.word	0x080037f9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80037f8:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037fe:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8084 	beq.w	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	4a44      	ldr	r2, [pc, #272]	; (8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003824:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c5b      	lsrs	r3, r3, #17
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	4a3f      	ldr	r2, [pc, #252]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
 8003832:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800383e:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fbb2 f2f3 	udiv	r2, r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e004      	b.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800385a:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003866:	d102      	bne.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800386c:	e052      	b.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4a31      	ldr	r2, [pc, #196]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	61bb      	str	r3, [r7, #24]
      break;
 800387c:	e04a      	b.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff fe2b 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003882:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003884:	e049      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003886:	f7ff fe27 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800388a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800388c:	e045      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d108      	bne.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e01f      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80038be:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80038ca:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e00f      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038dc:	d11c      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80038ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038ee:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80038f0:	e012      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038f4:	f7ff fe62 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	0b9b      	lsrs	r3, r3, #14
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	3301      	adds	r3, #1
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	61bb      	str	r3, [r7, #24]
      break;
 800390e:	e004      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003910:	bf00      	nop
 8003912:	e002      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003918:	bf00      	nop
    }
  }
  return (frequency);
 800391a:	69bb      	ldr	r3, [r7, #24]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08006130 	.word	0x08006130
 800392c:	08006140 	.word	0x08006140
 8003930:	007a1200 	.word	0x007a1200
 8003934:	003d0900 	.word	0x003d0900
 8003938:	aaaaaaab 	.word	0xaaaaaaab

0800393c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e076      	b.n	8003a3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d009      	beq.n	8003974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
 8003966:	e005      	b.n	8003974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd f93c 	bl	8000c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	ea42 0103 	orr.w	r1, r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	0c1a      	lsrs	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 0204 	and.w	r2, r2, #4
 8003a1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e041      	b.n	8003ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fbdc 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 fc4e 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d001      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e044      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_TIM_Base_Start_IT+0xac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIM_Base_Start_IT+0xb8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x6c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40013400 	.word	0x40013400
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00

08003ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e041      	b.n	8003c3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fafa 	bl	80011c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f000 fb9e 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_PWM_Start+0x24>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e022      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d109      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x3e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e015      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d109      	bne.n	8003c9c <HAL_TIM_PWM_Start+0x58>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e008      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e072      	b.n	8003d9c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x82>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc4:	e013      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0x92>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	e00b      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0xa2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce4:	e003      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fdd0 	bl	800489c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <HAL_TIM_PWM_Start+0x160>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_PWM_Start+0xcc>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <HAL_TIM_PWM_Start+0x164>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_PWM_Start+0xd0>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_PWM_Start+0xd2>
 8003d14:	2300      	movs	r3, #0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_TIM_PWM_Start+0x160>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x122>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_TIM_PWM_Start+0x164>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x122>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d00e      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x122>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_TIM_PWM_Start+0x168>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x122>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_TIM_PWM_Start+0x16c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x122>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <HAL_TIM_PWM_Start+0x170>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d010      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	e007      	b.n	8003d9a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00

08003db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0202 	mvn.w	r2, #2
 8003de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa76 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa69 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa78 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0204 	mvn.w	r2, #4
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa4c 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa3f 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa4e 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0208 	mvn.w	r2, #8
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2204      	movs	r2, #4
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa22 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa15 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa24 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d122      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d11b      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0210 	mvn.w	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9f8 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9eb 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9fa 	bl	80042fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0201 	mvn.w	r2, #1
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fe96 	bl	8004c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b80      	cmp	r3, #128	; 0x80
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fd84 	bl	8004a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d10e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9be 	bl	8004310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0220 	mvn.w	r2, #32
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd4f 	bl	8004a5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ae      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	f200 809f 	bhi.w	8004134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004135 	.word	0x08004135
 8004004:	08004135 	.word	0x08004135
 8004008:	08004135 	.word	0x08004135
 800400c:	08004071 	.word	0x08004071
 8004010:	08004135 	.word	0x08004135
 8004014:	08004135 	.word	0x08004135
 8004018:	08004135 	.word	0x08004135
 800401c:	080040b3 	.word	0x080040b3
 8004020:	08004135 	.word	0x08004135
 8004024:	08004135 	.word	0x08004135
 8004028:	08004135 	.word	0x08004135
 800402c:	080040f3 	.word	0x080040f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f9ee 	bl	8004418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	619a      	str	r2, [r3, #24]
      break;
 800406e:	e064      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fa3e 	bl	80044f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e043      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa91 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
      break;
 80040f0:	e023      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fae5 	bl	80046c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	61da      	str	r2, [r3, #28]
      break;
 8004132:	e002      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIM_ConfigClockSource+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e0b4      	b.n	80042d2 <HAL_TIM_ConfigClockSource+0x186>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d03e      	beq.n	8004220 <HAL_TIM_ConfigClockSource+0xd4>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	f200 8087 	bhi.w	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	f000 8086 	beq.w	80042be <HAL_TIM_ConfigClockSource+0x172>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d87f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b70      	cmp	r3, #112	; 0x70
 80041ba:	d01a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xa6>
 80041bc:	2b70      	cmp	r3, #112	; 0x70
 80041be:	d87b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d050      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x11a>
 80041c4:	2b60      	cmp	r3, #96	; 0x60
 80041c6:	d877      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d03c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0xfa>
 80041cc:	2b50      	cmp	r3, #80	; 0x50
 80041ce:	d873      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d058      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x13a>
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d86f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d064      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d86b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d060      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d867      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d05a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	e062      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f000 fb2c 	bl	800485e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
      break;
 800421e:	e04f      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f000 fb15 	bl	800485e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004242:	609a      	str	r2, [r3, #8]
      break;
 8004244:	e03c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fa8c 	bl	8004770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2150      	movs	r1, #80	; 0x50
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fae3 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004264:	e02c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	461a      	mov	r2, r3
 8004274:	f000 faaa 	bl	80047cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2160      	movs	r1, #96	; 0x60
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fad3 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004284:	e01c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fa6c 	bl	8004770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2140      	movs	r1, #64	; 0x40
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fac3 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 80042a4:	e00c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 faba 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 80042b6:	e003      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
	...

08004324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a33      	ldr	r2, [pc, #204]	; (8004404 <TIM_Base_SetConfig+0xe0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <TIM_Base_SetConfig+0xe4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00f      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d00b      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a2f      	ldr	r2, [pc, #188]	; (800440c <TIM_Base_SetConfig+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <TIM_Base_SetConfig+0xec>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <TIM_Base_SetConfig+0xf0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d108      	bne.n	8004376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <TIM_Base_SetConfig+0xe0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0x82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <TIM_Base_SetConfig+0xe4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0x82>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x82>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <TIM_Base_SetConfig+0xe8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <TIM_Base_SetConfig+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x82>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <TIM_Base_SetConfig+0xf0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <TIM_Base_SetConfig+0xe0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0xc8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <TIM_Base_SetConfig+0xe4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	615a      	str	r2, [r3, #20]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00

08004418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0201 	bic.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a20      	ldr	r2, [pc, #128]	; (80044f0 <TIM_OC1_SetConfig+0xd8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC1_SetConfig+0x64>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <TIM_OC1_SetConfig+0xdc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10c      	bne.n	8004496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0308 	bic.w	r3, r3, #8
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 0304 	bic.w	r3, r3, #4
 8004494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <TIM_OC1_SetConfig+0xd8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_OC1_SetConfig+0x8e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <TIM_OC1_SetConfig+0xdc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d111      	bne.n	80044ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40013400 	.word	0x40013400

080044f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 0210 	bic.w	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0320 	bic.w	r3, r3, #32
 8004542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <TIM_OC2_SetConfig+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC2_SetConfig+0x68>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a20      	ldr	r2, [pc, #128]	; (80045dc <TIM_OC2_SetConfig+0xe4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10d      	bne.n	800457c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_OC2_SetConfig+0xe0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_OC2_SetConfig+0x94>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC2_SetConfig+0xe4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d113      	bne.n	80045b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <TIM_OC3_SetConfig+0xe0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC3_SetConfig+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <TIM_OC3_SetConfig+0xe4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10d      	bne.n	8004662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <TIM_OC3_SetConfig+0xe0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_OC3_SetConfig+0x92>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <TIM_OC3_SetConfig+0xe4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d113      	bne.n	800469a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400

080046c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	031b      	lsls	r3, r3, #12
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a11      	ldr	r2, [pc, #68]	; (8004768 <TIM_OC4_SetConfig+0xa0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC4_SetConfig+0x68>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a10      	ldr	r2, [pc, #64]	; (800476c <TIM_OC4_SetConfig+0xa4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d109      	bne.n	8004744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40013400 	.word	0x40013400

08004770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0201 	bic.w	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 030a 	bic.w	r3, r3, #10
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0210 	bic.w	r2, r3, #16
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	031b      	lsls	r3, r3, #12
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	f043 0307 	orr.w	r3, r3, #7
 800484c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800485e:	b480      	push	{r7}
 8004860:	b087      	sub	sp, #28
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004878:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	431a      	orrs	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4313      	orrs	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2201      	movs	r2, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1a      	ldr	r2, [r3, #32]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e050      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00

080049bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e03d      	b.n	8004a54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e042      	b.n	8004b1a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fc fceb 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2224      	movs	r2, #36	; 0x24
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f82c 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ada:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b5e:	f023 030c 	bic.w	r3, r3, #12
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <UART_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fd16 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	e002      	b.n	8004b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fcfe 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <UART_SetConfig+0x118>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	0119      	lsls	r1, r3, #4
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <UART_SetConfig+0x118>)
 8004bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2064      	movs	r0, #100	; 0x64
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <UART_SetConfig+0x118>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	4419      	add	r1, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_SetConfig+0x118>)
 8004c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	fb00 f303 	mul.w	r3, r0, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <UART_SetConfig+0x118>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	51eb851f 	.word	0x51eb851f

08004c40 <HAL_ADC_ConvCpltCallback>:
float duty;

int encoder_count = 0;
float pid_error = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <HAL_ADC_ConvCpltCallback+0x20>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d102      	bne.n	8004c58 <HAL_ADC_ConvCpltCallback+0x18>
        HAL_ADC_Stop_DMA(&hadc1);
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <HAL_ADC_ConvCpltCallback+0x24>)
 8004c54:	f7fc ff50 	bl	8001af8 <HAL_ADC_Stop_DMA>
    }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40012400 	.word	0x40012400
 8004c64:	20000090 	.word	0x20000090

08004c68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b08d      	sub	sp, #52	; 0x34
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a63      	ldr	r2, [pc, #396]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d15c      	bne.n	8004d34 <HAL_TIM_PeriodElapsedCallback+0xcc>
        static int led_count = 0;
        if (led_count >= 10) {
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	dd53      	ble.n	8004d2a <HAL_TIM_PeriodElapsedCallback+0xc2>
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8004c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c86:	4861      	ldr	r0, [pc, #388]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004c88:	f7fe f889 	bl	8002d9e <HAL_GPIO_TogglePin>
            led_count = 0;
 8004c8c:	4b5e      	ldr	r3, [pc, #376]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

            int x = 10, y = 10, size = 16, y_increment = 20;
 8004c92:	230a      	movs	r3, #10
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	230a      	movs	r3, #10
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	2314      	movs	r3, #20
 8004ca0:	61bb      	str	r3, [r7, #24]
            sprintf(display_string, "pid_error: %d", (uint8_t) pid_error);
 8004ca2:	4b5b      	ldr	r3, [pc, #364]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fd1a 	bl	80006e0 <__aeabi_f2uiz>
 8004cac:	4603      	mov	r3, r0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4958      	ldr	r1, [pc, #352]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8004cb4:	4858      	ldr	r0, [pc, #352]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004cb6:	f001 f815 	bl	8005ce4 <siprintf>
            LCD_String(x, y, display_string, size, WHITE, BLACK), y += y_increment;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	b298      	uxth	r0, r3
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	b299      	uxth	r1, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	9201      	str	r2, [sp, #4]
 8004cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	4a51      	ldr	r2, [pc, #324]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004cd2:	f000 fc73 	bl	80055bc <LCD_String>
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	623b      	str	r3, [r7, #32]
            sprintf(display_string, "t:%d, d:%d", (uint8_t)temperature, (uint8_t)duty);
 8004cde:	4b4f      	ldr	r3, [pc, #316]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fcfc 	bl	80006e0 <__aeabi_f2uiz>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461c      	mov	r4, r3
 8004cee:	4b4c      	ldr	r3, [pc, #304]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fcf4 	bl	80006e0 <__aeabi_f2uiz>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4949      	ldr	r1, [pc, #292]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8004d00:	4845      	ldr	r0, [pc, #276]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004d02:	f000 ffef 	bl	8005ce4 <siprintf>
            LCD_String(x, y, display_string, size, WHITE, BLACK), y += y_increment;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	b298      	uxth	r0, r3
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	b299      	uxth	r1, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2200      	movs	r2, #0
 8004d14:	9201      	str	r2, [sp, #4]
 8004d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d1a:	9200      	str	r2, [sp, #0]
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004d1e:	f000 fc4d 	bl	80055bc <LCD_String>
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	4413      	add	r3, r2
 8004d28:	623b      	str	r3, [r7, #32]
//            sprintf(display_string, "",);
//            LCD_String(x, y, display_string, size, WHITE, BLACK), y += y_increment;
        }
        led_count += 1;
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a35      	ldr	r2, [pc, #212]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004d32:	6013      	str	r3, [r2, #0]

    }
    if (htim->Instance == TIM7) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3b      	ldr	r2, [pc, #236]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d15d      	bne.n	8004dfa <HAL_TIM_PeriodElapsedCallback+0x192>
        refresh_adc();
 8004d3e:	f000 f8ad 	bl	8004e9c <refresh_adc>
        pid_error = (float) goal_temperature - temperature;
 8004d42:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fb26 	bl	8000398 <__aeabi_i2f>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fb fa69 	bl	800022c <__aeabi_fsub>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8004d60:	601a      	str	r2, [r3, #0]
        duty = arm_pid_f32(&pid, pid_error);
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a32      	ldr	r2, [pc, #200]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004d68:	617a      	str	r2, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6939      	ldr	r1, [r7, #16]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fb64 	bl	8000440 <__aeabi_fmul>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fb fb5a 	bl	8000440 <__aeabi_fmul>
 8004d8c:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7fb fa4d 	bl	8000230 <__addsf3>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f7fb fb4b 	bl	8000440 <__aeabi_fmul>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4619      	mov	r1, r3
 8004dae:	4620      	mov	r0, r4
 8004db0:	f7fb fa3e 	bl	8000230 <__addsf3>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fb fa36 	bl	8000230 <__addsf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004de0:	6013      	str	r3, [r2, #0]
        // set_heat_level((uint16_t) duty);
        temperature += duty;
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fa1f 	bl	8000230 <__addsf3>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004df8:	601a      	str	r2, [r3, #0]
    }
}
 8004dfa:	bf00      	nop
 8004dfc:	372c      	adds	r7, #44	; 0x2c
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd90      	pop	{r4, r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40001000 	.word	0x40001000
 8004e08:	20000368 	.word	0x20000368
 8004e0c:	40010c00 	.word	0x40010c00
 8004e10:	20000364 	.word	0x20000364
 8004e14:	080060e8 	.word	0x080060e8
 8004e18:	2000036c 	.word	0x2000036c
 8004e1c:	200003f4 	.word	0x200003f4
 8004e20:	2000035c 	.word	0x2000035c
 8004e24:	080060f8 	.word	0x080060f8
 8004e28:	40001400 	.word	0x40001400
 8004e2c:	2000000c 	.word	0x2000000c
 8004e30:	200003d0 	.word	0x200003d0

08004e34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == A_Pin) {
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d110      	bne.n	8004e66 <HAL_GPIO_EXTI_Callback+0x32>
        if (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == RESET && encoder_count < 1000) {
 8004e44:	2104      	movs	r1, #4
 8004e46:	4813      	ldr	r0, [pc, #76]	; (8004e94 <HAL_GPIO_EXTI_Callback+0x60>)
 8004e48:	f7fd ff7a 	bl	8002d40 <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_GPIO_EXTI_Callback+0x32>
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5a:	da04      	bge.n	8004e66 <HAL_GPIO_EXTI_Callback+0x32>
            encoder_count += 1;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e64:	6013      	str	r3, [r2, #0]
        }
    }
    if (GPIO_Pin == B_Pin) {
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d10f      	bne.n	8004e8c <HAL_GPIO_EXTI_Callback+0x58>
        if (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == RESET && encoder_count > 0) {
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4809      	ldr	r0, [pc, #36]	; (8004e94 <HAL_GPIO_EXTI_Callback+0x60>)
 8004e70:	f7fd ff66 	bl	8002d40 <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <HAL_GPIO_EXTI_Callback+0x58>
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dd04      	ble.n	8004e8c <HAL_GPIO_EXTI_Callback+0x58>
            encoder_count -= 1;
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <HAL_GPIO_EXTI_Callback+0x64>)
 8004e8a:	6013      	str	r3, [r2, #0]

    }
    if (GPIO_Pin == key_Pin) {

    }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40011000 	.word	0x40011000
 8004e98:	20000360 	.word	0x20000360

08004e9c <refresh_adc>:
    assert(level <= 1000);
    TIM1->CCR1 = level;
}


void refresh_adc() {
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
    float res[ADC_NUMS] = {0};
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < ADC_ARRAY_SIZE * ADC_NUMS; i++) {
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e024      	b.n	8004efc <refresh_adc+0x60>
        res[i % ADC_NUMS] += (float) adc1_buffer[i];
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <refresh_adc+0xc4>)
 8004eb6:	fb83 3102 	smull	r3, r1, r3, r2
 8004eba:	17d3      	asrs	r3, r2, #31
 8004ebc:	1acc      	subs	r4, r1, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4423      	add	r3, r4
 8004ec4:	1ad4      	subs	r4, r2, r3
 8004ec6:	00a3      	lsls	r3, r4, #2
 8004ec8:	3318      	adds	r3, #24
 8004eca:	443b      	add	r3, r7
 8004ecc:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <refresh_adc+0xc8>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fa59 	bl	8000390 <__aeabi_ui2f>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7fb f9a4 	bl	8000230 <__addsf3>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	00a3      	lsls	r3, r4, #2
 8004eee:	3318      	adds	r3, #24
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < ADC_ARRAY_SIZE * ADC_NUMS; i++) {
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b2f      	cmp	r3, #47	; 0x2f
 8004f00:	ddd7      	ble.n	8004eb2 <refresh_adc+0x16>
    }
    for (int i = 0; i < ADC_NUMS; i++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e015      	b.n	8004f34 <refresh_adc+0x98>
        res[i] = (res[i] / ADC_ARRAY_SIZE);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	443b      	add	r3, r7
 8004f10:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004f14:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fb45 	bl	80005a8 <__aeabi_fdiv>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	3318      	adds	r3, #24
 8004f28:	443b      	add	r3, r7
 8004f2a:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < ADC_NUMS; i++) {
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3301      	adds	r3, #1
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	dde6      	ble.n	8004f08 <refresh_adc+0x6c>
    }
    temperature = res[0];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <refresh_adc+0xcc>)
 8004f3e:	6013      	str	r3, [r2, #0]
    voltage = res[1];
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <refresh_adc+0xd0>)
 8004f44:	6013      	str	r3, [r2, #0]
    NTC = res[2];
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <refresh_adc+0xd4>)
 8004f4a:	6013      	str	r3, [r2, #0]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1_buffer, ADC_ARRAY_SIZE * ADC_NUMS);
 8004f4c:	2230      	movs	r2, #48	; 0x30
 8004f4e:	4905      	ldr	r1, [pc, #20]	; (8004f64 <refresh_adc+0xc8>)
 8004f50:	4808      	ldr	r0, [pc, #32]	; (8004f74 <refresh_adc+0xd8>)
 8004f52:	f7fc fcf3 	bl	800193c <HAL_ADC_Start_DMA>
}
 8004f56:	bf00      	nop
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	55555556 	.word	0x55555556
 8004f64:	20000400 	.word	0x20000400
 8004f68:	200003f4 	.word	0x200003f4
 8004f6c:	200003f8 	.word	0x200003f8
 8004f70:	200003fc 	.word	0x200003fc
 8004f74:	20000090 	.word	0x20000090

08004f78 <spiSendByte>:
void sendByte(u8 Data);                                    // 向液晶屏发送：数据，8位
void sendShort(u16 Data);                                    // 向液晶屏发送：数据，16位
void setCursor(u16 x_start, u16 y_start, u16 x_end, u16 y_end); // 设置显示区域

// SPI发送传送1字节
u8 spiSendByte(u8 data) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
//
//    DMA1_Channel5->CMAR = data;									 //重置存储器地址
//
//    DMA1_Channel5->CCR |= 3 << 0;               //开启DMA通道5，使能发送完成中断;

    while ((SPI2->SR & SPI_FLAG_TXE) == RESET) {}
 8004f82:	bf00      	nop
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <spiSendByte+0x3c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f9      	beq.n	8004f84 <spiSendByte+0xc>
    SPI2->DR = data;
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <spiSendByte+0x3c>)
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	60d3      	str	r3, [r2, #12]
    while ((SPI2->SR & SPI_FLAG_RXNE) == RESET) {}
 8004f96:	bf00      	nop
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <spiSendByte+0x3c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f9      	beq.n	8004f98 <spiSendByte+0x20>
    return SPI2->DR;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <spiSendByte+0x3c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	b2db      	uxtb	r3, r3
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	40003800 	.word	0x40003800

08004fb8 <LCD_Init>:
*功  能：初始化lcd
*参  数：为了简化理解、便于移植，参数(屏幕像素、显示方向)在h文件里进行修改
*返回值：无
*备  注：
*****************************************************************************/
void LCD_Init(void) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af02      	add	r7, sp, #8
    xLCD.InitOK = 0;
 8004fbe:	4b9c      	ldr	r3, [pc, #624]	; (8005230 <LCD_Init+0x278>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
    xLCD.bColor = BLACK;
 8004fc4:	4b9a      	ldr	r3, [pc, #616]	; (8005230 <LCD_Init+0x278>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
    // 显示方向像素匹配
    if ((LCD_DIR == 1) || (LCD_DIR == 3)) {
        xLCD.width = LCD_WIDTH;       // 屏宽度像素，超过此值驱动芯片会自动换行，注意：如果屏幕右边有花屏，就加大这个值
        xLCD.height = LCD_HEIGHT;        // 屏高度像素， 注意：如果屏幕下面有花屏，就加大这个值
    } else {
        xLCD.width = LCD_HEIGHT;
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <LCD_Init+0x278>)
 8004fcc:	22c8      	movs	r2, #200	; 0xc8
 8004fce:	805a      	strh	r2, [r3, #2]
        xLCD.height = LCD_WIDTH;
 8004fd0:	4b97      	ldr	r3, [pc, #604]	; (8005230 <LCD_Init+0x278>)
 8004fd2:	22c8      	movs	r2, #200	; 0xc8
 8004fd4:	809a      	strh	r2, [r3, #4]
    }

    // 初始化GPIO
//    gpioInit();
    MX_GPIO_Init();
 8004fd6:	f7fb fc87 	bl	80008e8 <MX_GPIO_Init>
    // 初始化SPI外设、协议
//    spiInit();
    MX_SPI2_Init();
 8004fda:	f7fb fde1 	bl	8000ba0 <MX_SPI2_Init>
    __HAL_SPI_ENABLE(&hspi2);
 8004fde:	4b95      	ldr	r3, [pc, #596]	; (8005234 <LCD_Init+0x27c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b93      	ldr	r3, [pc, #588]	; (8005234 <LCD_Init+0x27c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fec:	601a      	str	r2, [r3, #0]
    LCD_BL_HIGH;
 8004fee:	4b92      	ldr	r3, [pc, #584]	; (8005238 <LCD_Init+0x280>)
 8004ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff4:	611a      	str	r2, [r3, #16]

    // 屏幕复位
    LCD_RES_LOW;           // LCD_RST=0	  //SPI接口复位
 8004ff6:	4b90      	ldr	r3, [pc, #576]	; (8005238 <LCD_Init+0x280>)
 8004ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ffc:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);          // delay 20 ms
 8004ffe:	2014      	movs	r0, #20
 8005000:	f7fc fb8e 	bl	8001720 <HAL_Delay>
    LCD_RES_HIGH;        // LCD_RST=1
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <LCD_Init+0x280>)
 8005006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800500a:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);
 800500c:	2014      	movs	r0, #20
 800500e:	f7fc fb87 	bl	8001720 <HAL_Delay>

    sendOrder(0x11);       // 退出睡眠模式
 8005012:	2011      	movs	r0, #17
 8005014:	f000 f912 	bl	800523c <sendOrder>
    HAL_Delay(120);         // Delay 120ms
 8005018:	2078      	movs	r0, #120	; 0x78
 800501a:	f7fc fb81 	bl	8001720 <HAL_Delay>
    //------------------------------------ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB1);
 800501e:	20b1      	movs	r0, #177	; 0xb1
 8005020:	f000 f90c 	bl	800523c <sendOrder>
    sendByte(0x05);
 8005024:	2005      	movs	r0, #5
 8005026:	f000 f925 	bl	8005274 <sendByte>
    sendByte(0x3C);
 800502a:	203c      	movs	r0, #60	; 0x3c
 800502c:	f000 f922 	bl	8005274 <sendByte>
    sendByte(0x3C);
 8005030:	203c      	movs	r0, #60	; 0x3c
 8005032:	f000 f91f 	bl	8005274 <sendByte>

    sendOrder(0xB2);
 8005036:	20b2      	movs	r0, #178	; 0xb2
 8005038:	f000 f900 	bl	800523c <sendOrder>
    sendByte(0x05);
 800503c:	2005      	movs	r0, #5
 800503e:	f000 f919 	bl	8005274 <sendByte>
    sendByte(0x3C);
 8005042:	203c      	movs	r0, #60	; 0x3c
 8005044:	f000 f916 	bl	8005274 <sendByte>
    sendByte(0x3C);
 8005048:	203c      	movs	r0, #60	; 0x3c
 800504a:	f000 f913 	bl	8005274 <sendByte>

    sendOrder(0xB3);
 800504e:	20b3      	movs	r0, #179	; 0xb3
 8005050:	f000 f8f4 	bl	800523c <sendOrder>
    sendByte(0x05);
 8005054:	2005      	movs	r0, #5
 8005056:	f000 f90d 	bl	8005274 <sendByte>
    sendByte(0x3C);
 800505a:	203c      	movs	r0, #60	; 0x3c
 800505c:	f000 f90a 	bl	8005274 <sendByte>
    sendByte(0x3C);
 8005060:	203c      	movs	r0, #60	; 0x3c
 8005062:	f000 f907 	bl	8005274 <sendByte>
    sendByte(0x05);
 8005066:	2005      	movs	r0, #5
 8005068:	f000 f904 	bl	8005274 <sendByte>
    sendByte(0x3C);
 800506c:	203c      	movs	r0, #60	; 0x3c
 800506e:	f000 f901 	bl	8005274 <sendByte>
    sendByte(0x3C);
 8005072:	203c      	movs	r0, #60	; 0x3c
 8005074:	f000 f8fe 	bl	8005274 <sendByte>
    //------------------------------------End ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB4); // Dot inversion
 8005078:	20b4      	movs	r0, #180	; 0xb4
 800507a:	f000 f8df 	bl	800523c <sendOrder>
    sendByte(0x03);
 800507e:	2003      	movs	r0, #3
 8005080:	f000 f8f8 	bl	8005274 <sendByte>

    sendOrder(0xC0); // ST7735R Power Sequence
 8005084:	20c0      	movs	r0, #192	; 0xc0
 8005086:	f000 f8d9 	bl	800523c <sendOrder>
    sendByte(0x28);
 800508a:	2028      	movs	r0, #40	; 0x28
 800508c:	f000 f8f2 	bl	8005274 <sendByte>
    sendByte(0x08);
 8005090:	2008      	movs	r0, #8
 8005092:	f000 f8ef 	bl	8005274 <sendByte>
    sendByte(0x04);
 8005096:	2004      	movs	r0, #4
 8005098:	f000 f8ec 	bl	8005274 <sendByte>

    sendOrder(0xC1);
 800509c:	20c1      	movs	r0, #193	; 0xc1
 800509e:	f000 f8cd 	bl	800523c <sendOrder>
    sendByte(0XC0);
 80050a2:	20c0      	movs	r0, #192	; 0xc0
 80050a4:	f000 f8e6 	bl	8005274 <sendByte>

    sendOrder(0xC2);
 80050a8:	20c2      	movs	r0, #194	; 0xc2
 80050aa:	f000 f8c7 	bl	800523c <sendOrder>
    sendByte(0x0D);
 80050ae:	200d      	movs	r0, #13
 80050b0:	f000 f8e0 	bl	8005274 <sendByte>
    sendByte(0x00);
 80050b4:	2000      	movs	r0, #0
 80050b6:	f000 f8dd 	bl	8005274 <sendByte>
    sendOrder(0xC3);
 80050ba:	20c3      	movs	r0, #195	; 0xc3
 80050bc:	f000 f8be 	bl	800523c <sendOrder>

    sendByte(0x8D);
 80050c0:	208d      	movs	r0, #141	; 0x8d
 80050c2:	f000 f8d7 	bl	8005274 <sendByte>
    sendByte(0x2A);
 80050c6:	202a      	movs	r0, #42	; 0x2a
 80050c8:	f000 f8d4 	bl	8005274 <sendByte>

    sendOrder(0xC4);
 80050cc:	20c4      	movs	r0, #196	; 0xc4
 80050ce:	f000 f8b5 	bl	800523c <sendOrder>
    sendByte(0x8D);
 80050d2:	208d      	movs	r0, #141	; 0x8d
 80050d4:	f000 f8ce 	bl	8005274 <sendByte>
    sendByte(0xEE);
 80050d8:	20ee      	movs	r0, #238	; 0xee
 80050da:	f000 f8cb 	bl	8005274 <sendByte>
    //---------------------------------End ST7735S Power Sequence-------------------------------------//
    sendOrder(0xC5); //VCOM
 80050de:	20c5      	movs	r0, #197	; 0xc5
 80050e0:	f000 f8ac 	bl	800523c <sendOrder>
    sendByte(0x1A);
 80050e4:	201a      	movs	r0, #26
 80050e6:	f000 f8c5 	bl	8005274 <sendByte>
    sendOrder(0x36); //MX, MY, RGB mode
 80050ea:	2036      	movs	r0, #54	; 0x36
 80050ec:	f000 f8a6 	bl	800523c <sendOrder>
    if (LCD_DIR == 1) sendByte(0xC0);  // 重要：显示方向控制，C0/00/A0/60,  C8/08/A8/68
    if (LCD_DIR == 2) sendByte(0x00);
    if (LCD_DIR == 3) sendByte(0xA0);
    if (LCD_DIR == 4) sendByte(0x60);
 80050f0:	2060      	movs	r0, #96	; 0x60
 80050f2:	f000 f8bf 	bl	8005274 <sendByte>
    //------------------------------------ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0xE0);
 80050f6:	20e0      	movs	r0, #224	; 0xe0
 80050f8:	f000 f8a0 	bl	800523c <sendOrder>
    sendByte(0x04);
 80050fc:	2004      	movs	r0, #4
 80050fe:	f000 f8b9 	bl	8005274 <sendByte>
    sendByte(0x22);
 8005102:	2022      	movs	r0, #34	; 0x22
 8005104:	f000 f8b6 	bl	8005274 <sendByte>
    sendByte(0x07);
 8005108:	2007      	movs	r0, #7
 800510a:	f000 f8b3 	bl	8005274 <sendByte>
    sendByte(0x0A);
 800510e:	200a      	movs	r0, #10
 8005110:	f000 f8b0 	bl	8005274 <sendByte>
    sendByte(0x2E);
 8005114:	202e      	movs	r0, #46	; 0x2e
 8005116:	f000 f8ad 	bl	8005274 <sendByte>
    sendByte(0x30);
 800511a:	2030      	movs	r0, #48	; 0x30
 800511c:	f000 f8aa 	bl	8005274 <sendByte>
    sendByte(0x25);
 8005120:	2025      	movs	r0, #37	; 0x25
 8005122:	f000 f8a7 	bl	8005274 <sendByte>
    sendByte(0x2A);
 8005126:	202a      	movs	r0, #42	; 0x2a
 8005128:	f000 f8a4 	bl	8005274 <sendByte>
    sendByte(0x28);
 800512c:	2028      	movs	r0, #40	; 0x28
 800512e:	f000 f8a1 	bl	8005274 <sendByte>
    sendByte(0x26);
 8005132:	2026      	movs	r0, #38	; 0x26
 8005134:	f000 f89e 	bl	8005274 <sendByte>
    sendByte(0x2E);
 8005138:	202e      	movs	r0, #46	; 0x2e
 800513a:	f000 f89b 	bl	8005274 <sendByte>
    sendByte(0x3A);
 800513e:	203a      	movs	r0, #58	; 0x3a
 8005140:	f000 f898 	bl	8005274 <sendByte>
    sendByte(0x00);
 8005144:	2000      	movs	r0, #0
 8005146:	f000 f895 	bl	8005274 <sendByte>
    sendByte(0x01);
 800514a:	2001      	movs	r0, #1
 800514c:	f000 f892 	bl	8005274 <sendByte>
    sendByte(0x03);
 8005150:	2003      	movs	r0, #3
 8005152:	f000 f88f 	bl	8005274 <sendByte>
    sendByte(0x13);
 8005156:	2013      	movs	r0, #19
 8005158:	f000 f88c 	bl	8005274 <sendByte>

    sendOrder(0xE1);
 800515c:	20e1      	movs	r0, #225	; 0xe1
 800515e:	f000 f86d 	bl	800523c <sendOrder>
    sendByte(0x04);
 8005162:	2004      	movs	r0, #4
 8005164:	f000 f886 	bl	8005274 <sendByte>
    sendByte(0x16);
 8005168:	2016      	movs	r0, #22
 800516a:	f000 f883 	bl	8005274 <sendByte>
    sendByte(0x06);
 800516e:	2006      	movs	r0, #6
 8005170:	f000 f880 	bl	8005274 <sendByte>
    sendByte(0x0D);
 8005174:	200d      	movs	r0, #13
 8005176:	f000 f87d 	bl	8005274 <sendByte>
    sendByte(0x2D);
 800517a:	202d      	movs	r0, #45	; 0x2d
 800517c:	f000 f87a 	bl	8005274 <sendByte>
    sendByte(0x26);
 8005180:	2026      	movs	r0, #38	; 0x26
 8005182:	f000 f877 	bl	8005274 <sendByte>
    sendByte(0x23);
 8005186:	2023      	movs	r0, #35	; 0x23
 8005188:	f000 f874 	bl	8005274 <sendByte>
    sendByte(0x27);
 800518c:	2027      	movs	r0, #39	; 0x27
 800518e:	f000 f871 	bl	8005274 <sendByte>
    sendByte(0x27);
 8005192:	2027      	movs	r0, #39	; 0x27
 8005194:	f000 f86e 	bl	8005274 <sendByte>
    sendByte(0x25);
 8005198:	2025      	movs	r0, #37	; 0x25
 800519a:	f000 f86b 	bl	8005274 <sendByte>
    sendByte(0x2D);
 800519e:	202d      	movs	r0, #45	; 0x2d
 80051a0:	f000 f868 	bl	8005274 <sendByte>
    sendByte(0x3B);
 80051a4:	203b      	movs	r0, #59	; 0x3b
 80051a6:	f000 f865 	bl	8005274 <sendByte>
    sendByte(0x00);
 80051aa:	2000      	movs	r0, #0
 80051ac:	f000 f862 	bl	8005274 <sendByte>
    sendByte(0x01);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 f85f 	bl	8005274 <sendByte>
    sendByte(0x04);
 80051b6:	2004      	movs	r0, #4
 80051b8:	f000 f85c 	bl	8005274 <sendByte>
    sendByte(0x13);
 80051bc:	2013      	movs	r0, #19
 80051be:	f000 f859 	bl	8005274 <sendByte>

    // 后期复制增加的，不明白
    sendOrder(0x2a);
 80051c2:	202a      	movs	r0, #42	; 0x2a
 80051c4:	f000 f83a 	bl	800523c <sendOrder>
    sendByte(0x00);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f000 f853 	bl	8005274 <sendByte>
    sendByte(0x00);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f000 f850 	bl	8005274 <sendByte>
    sendByte(0x00);
 80051d4:	2000      	movs	r0, #0
 80051d6:	f000 f84d 	bl	8005274 <sendByte>
    sendByte(0x7f);
 80051da:	207f      	movs	r0, #127	; 0x7f
 80051dc:	f000 f84a 	bl	8005274 <sendByte>
    // 后期复制增加的，不明白
    sendOrder(0x2b);
 80051e0:	202b      	movs	r0, #43	; 0x2b
 80051e2:	f000 f82b 	bl	800523c <sendOrder>
    sendByte(0x00);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f000 f844 	bl	8005274 <sendByte>
    sendByte(0x00);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f000 f841 	bl	8005274 <sendByte>
    sendByte(0x00);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f000 f83e 	bl	8005274 <sendByte>
    sendByte(0x9f);
 80051f8:	209f      	movs	r0, #159	; 0x9f
 80051fa:	f000 f83b 	bl	8005274 <sendByte>
    //------------------------------------End ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0x3A); // 65k mode
 80051fe:	203a      	movs	r0, #58	; 0x3a
 8005200:	f000 f81c 	bl	800523c <sendOrder>
    sendByte(0x05);
 8005204:	2005      	movs	r0, #5
 8005206:	f000 f835 	bl	8005274 <sendByte>

    sendOrder(0x29); // Display on
 800520a:	2029      	movs	r0, #41	; 0x29
 800520c:	f000 f816 	bl	800523c <sendOrder>

    LCD_Fill(1, 1, xLCD.width, xLCD.height, BLACK);
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <LCD_Init+0x278>)
 8005212:	885a      	ldrh	r2, [r3, #2]
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <LCD_Init+0x278>)
 8005216:	889b      	ldrh	r3, [r3, #4]
 8005218:	2100      	movs	r1, #0
 800521a:	9100      	str	r1, [sp, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	2001      	movs	r0, #1
 8005220:	f000 f8e3 	bl	80053ea <LCD_Fill>
    xLCD.InitOK = 1;
 8005224:	4b02      	ldr	r3, [pc, #8]	; (8005230 <LCD_Init+0x278>)
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000460 	.word	0x20000460
 8005234:	20000104 	.word	0x20000104
 8005238:	40011400 	.word	0x40011400

0800523c <sendOrder>:

// 向LCD发送寄存器地址(指令)
void sendOrder(u16 order) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <sendOrder+0x34>)
 8005248:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800524c:	611a      	str	r2, [r3, #16]
    LCD_RS_LOW;            // RS高: 数据值， RS低: 寄存器地址值
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <sendOrder+0x34>)
 8005250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005254:	611a      	str	r2, [r3, #16]
    spiSendByte(order);    // 发送 寄存器地址值
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fe8c 	bl	8004f78 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <sendOrder+0x34>)
 8005262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005266:	611a      	str	r2, [r3, #16]
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40011400 	.word	0x40011400

08005274 <sendByte>:

// 向LCD发送数值
void sendByte(u8 data) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <sendByte+0x34>)
 8005280:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005284:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据值， RS低: 寄存器地址值
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <sendByte+0x34>)
 8005288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528c:	611a      	str	r2, [r3, #16]
    spiSendByte(data);     // 发送1字节
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fe71 	bl	8004f78 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8005296:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <sendByte+0x34>)
 8005298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800529c:	611a      	str	r2, [r3, #16]
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40011400 	.word	0x40011400

080052ac <sendShort>:

// 向LCD发送2个字节
void sendShort(u16 data) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <sendShort+0x44>)
 80052b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80052bc:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据， RS低: 指令
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <sendShort+0x44>)
 80052c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c4:	611a      	str	r2, [r3, #16]
    spiSendByte(data >> 8);  // 发送1字节
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fe52 	bl	8004f78 <spiSendByte>
    spiSendByte(data);     // 发送1字节
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fe4d 	bl	8004f78 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <sendShort+0x44>)
 80052e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e4:	611a      	str	r2, [r3, #16]
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40011400 	.word	0x40011400

080052f4 <LCD_Display>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void LCD_Display(u8 sw) {
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
    if (sw == 0)
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <LCD_Display+0x1a>
        LCD_BL_LOW;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <LCD_Display+0x2c>)
 8005306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800530a:	611a      	str	r2, [r3, #16]
    else
        LCD_BL_HIGH;
}
 800530c:	e003      	b.n	8005316 <LCD_Display+0x22>
        LCD_BL_HIGH;
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <LCD_Display+0x2c>)
 8005310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005314:	611a      	str	r2, [r3, #16]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr
 8005320:	40011400 	.word	0x40011400

08005324 <setCursor>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void setCursor(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd) {
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	80fb      	strh	r3, [r7, #6]
 8005336:	4603      	mov	r3, r0
 8005338:	80bb      	strh	r3, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	807b      	strh	r3, [r7, #2]
 800533e:	4613      	mov	r3, r2
 8005340:	803b      	strh	r3, [r7, #0]
    sendOrder(0x2A);
 8005342:	202a      	movs	r0, #42	; 0x2a
 8005344:	f7ff ff7a 	bl	800523c <sendOrder>
    sendByte(xStart >> 8);   // 起始位置x高位，因为1.8寸屏是128*160, 不大于255, 直接写0省事
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	b29b      	uxth	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ff8f 	bl	8005274 <sendByte>
    sendByte(xStart); // 起始位置x低位，值传递时自动舍弃了高8位，也省得运算了
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff ff8a 	bl	8005274 <sendByte>
    sendByte(xEnd >> 8);   // 起始位置y高位
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff83 	bl	8005274 <sendByte>
    sendByte(xEnd);   // 起始位置x位位
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff7e 	bl	8005274 <sendByte>

    sendOrder(0x2B);
 8005378:	202b      	movs	r0, #43	; 0x2b
 800537a:	f7ff ff5f 	bl	800523c <sendOrder>
    sendByte(yStart >> 8);
 800537e:	88bb      	ldrh	r3, [r7, #4]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	b29b      	uxth	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff ff74 	bl	8005274 <sendByte>
    sendByte(yStart);
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ff6f 	bl	8005274 <sendByte>
    sendByte(yEnd >> 8);
 8005396:	883b      	ldrh	r3, [r7, #0]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	b29b      	uxth	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff68 	bl	8005274 <sendByte>
    sendByte(yEnd);
 80053a4:	883b      	ldrh	r3, [r7, #0]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ff63 	bl	8005274 <sendByte>

    sendOrder(0x2c);  // 发送写数据命令
 80053ae:	202c      	movs	r0, #44	; 0x2c
 80053b0:	f7ff ff44 	bl	800523c <sendOrder>
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <drawPoint>:
函数名：在rawPoint
功  能：画一个点
参  数：无
返回值：无
*************************************************/
void drawPoint(u16 x, u16 y, u16 color) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	80fb      	strh	r3, [r7, #6]
 80053c6:	460b      	mov	r3, r1
 80053c8:	80bb      	strh	r3, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	807b      	strh	r3, [r7, #2]
    setCursor(x, y, x, y);      //设置光标位置
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	88b9      	ldrh	r1, [r7, #4]
 80053d4:	88f8      	ldrh	r0, [r7, #6]
 80053d6:	f7ff ffa5 	bl	8005324 <setCursor>
    sendShort(color);
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff65 	bl	80052ac <sendShort>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <LCD_Fill>:
 *          u32 Color           填充的颜色
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
 *****************************************************************/
void LCD_Fill(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd, u16 color) {
 80053ea:	b590      	push	{r4, r7, lr}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	461a      	mov	r2, r3
 80053f8:	4623      	mov	r3, r4
 80053fa:	80fb      	strh	r3, [r7, #6]
 80053fc:	4603      	mov	r3, r0
 80053fe:	80bb      	strh	r3, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	807b      	strh	r3, [r7, #2]
 8005404:	4613      	mov	r3, r2
 8005406:	803b      	strh	r3, [r7, #0]
//    spiInit();                                      // 防止SPI参数被其它设备修改了
    u32 pixel = (xEnd - xStart + 1) * (yEnd - yStart + 1);    // 填充的像素数量
 8005408:	887a      	ldrh	r2, [r7, #2]
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	3301      	adds	r3, #1
 8005410:	8839      	ldrh	r1, [r7, #0]
 8005412:	88ba      	ldrh	r2, [r7, #4]
 8005414:	1a8a      	subs	r2, r1, r2
 8005416:	3201      	adds	r2, #1
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	60fb      	str	r3, [r7, #12]

    setCursor(xStart, yStart, xEnd, yEnd);        // 设定填充范围
 800541e:	883b      	ldrh	r3, [r7, #0]
 8005420:	887a      	ldrh	r2, [r7, #2]
 8005422:	88b9      	ldrh	r1, [r7, #4]
 8005424:	88f8      	ldrh	r0, [r7, #6]
 8005426:	f7ff ff7d 	bl	8005324 <setCursor>
    while (pixel-- > 0)                                // 发送颜色值
 800542a:	e003      	b.n	8005434 <LCD_Fill+0x4a>
        sendShort(color);
 800542c:	8c3b      	ldrh	r3, [r7, #32]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff ff3c 	bl	80052ac <sendShort>
    while (pixel-- > 0)                                // 发送颜色值
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	60fa      	str	r2, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f6      	bne.n	800542c <LCD_Fill+0x42>
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bd90      	pop	{r4, r7, pc}

08005448 <drawAscii>:
 *          u8  size    字体大小 12/16/24/32
 *          u32 fColor  字体颜色
 *          u32 bColor  背景颜色
 * 备  注： 参考原子哥和野火大神的代码后修改  资料存放Q群：262901124
 *****************************************************************/
void drawAscii(u16 x, u16 y, u8 num, u8 size, u32 fColor, u32 bColor) {
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4623      	mov	r3, r4
 8005458:	80fb      	strh	r3, [r7, #6]
 800545a:	4603      	mov	r3, r0
 800545c:	80bb      	strh	r3, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]
 8005462:	4613      	mov	r3, r2
 8005464:	70bb      	strb	r3, [r7, #2]
//    spiInit();                                        // 防止SPI参数被其它设备修改了

    if (xLCD.InitOK == 0) return;
 8005466:	4b50      	ldr	r3, [pc, #320]	; (80055a8 <drawAscii+0x160>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8094 	beq.w	8005598 <drawAscii+0x150>

    u8 temp;
    u16 y0 = y;
 8005470:	88bb      	ldrh	r3, [r7, #4]
 8005472:	817b      	strh	r3, [r7, #10]

    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);           // 得到字体一个字符对应点阵集所占的字节数
 8005474:	78bb      	ldrb	r3, [r7, #2]
 8005476:	08db      	lsrs	r3, r3, #3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	78bb      	ldrb	r3, [r7, #2]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4413      	add	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	78ba      	ldrb	r2, [r7, #2]
 8005494:	0852      	lsrs	r2, r2, #1
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	fb02 f303 	mul.w	r3, r2, r3
 800549c:	727b      	strb	r3, [r7, #9]
    num = num - ' ';                                       // 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	3b20      	subs	r3, #32
 80054a2:	70fb      	strb	r3, [r7, #3]
    for (u8 t = 0; t < csize; t++) {
 80054a4:	2300      	movs	r3, #0
 80054a6:	73bb      	strb	r3, [r7, #14]
 80054a8:	e071      	b.n	800558e <drawAscii+0x146>
        if (size == 12) temp = asc2_1206[num][t];   // 调用1206字体
 80054aa:	78bb      	ldrb	r3, [r7, #2]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d10b      	bne.n	80054c8 <drawAscii+0x80>
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	7bb9      	ldrb	r1, [r7, #14]
 80054b4:	483d      	ldr	r0, [pc, #244]	; (80055ac <drawAscii+0x164>)
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4403      	add	r3, r0
 80054c0:	440b      	add	r3, r1
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	e025      	b.n	8005514 <drawAscii+0xcc>
        else if (size == 16) temp = asc2_1608[num][t];   // 调用1608字体
 80054c8:	78bb      	ldrb	r3, [r7, #2]
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d108      	bne.n	80054e0 <drawAscii+0x98>
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	4937      	ldr	r1, [pc, #220]	; (80055b0 <drawAscii+0x168>)
 80054d4:	0112      	lsls	r2, r2, #4
 80054d6:	440a      	add	r2, r1
 80054d8:	4413      	add	r3, r2
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e019      	b.n	8005514 <drawAscii+0xcc>
        else if (size == 24) temp = asc2_2412[num][t];   // 调用2412字体
 80054e0:	78bb      	ldrb	r3, [r7, #2]
 80054e2:	2b18      	cmp	r3, #24
 80054e4:	d10b      	bne.n	80054fe <drawAscii+0xb6>
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	7bb9      	ldrb	r1, [r7, #14]
 80054ea:	4832      	ldr	r0, [pc, #200]	; (80055b4 <drawAscii+0x16c>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4403      	add	r3, r0
 80054f6:	440b      	add	r3, r1
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e00a      	b.n	8005514 <drawAscii+0xcc>
        else if (size == 32) temp = asc2_3216[num][t];   // 调用3216字体
 80054fe:	78bb      	ldrb	r3, [r7, #2]
 8005500:	2b20      	cmp	r3, #32
 8005502:	d14b      	bne.n	800559c <drawAscii+0x154>
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	7bbb      	ldrb	r3, [r7, #14]
 8005508:	492b      	ldr	r1, [pc, #172]	; (80055b8 <drawAscii+0x170>)
 800550a:	0192      	lsls	r2, r2, #6
 800550c:	440a      	add	r2, r1
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	73fb      	strb	r3, [r7, #15]
        else return;                                   // 没有的字库

        for (u8 t1 = 0; t1 < 8; t1++) {
 8005514:	2300      	movs	r3, #0
 8005516:	737b      	strb	r3, [r7, #13]
 8005518:	e031      	b.n	800557e <drawAscii+0x136>
            if (temp & 0x80) drawPoint(x, y, fColor);  // 字体 画点
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da07      	bge.n	8005532 <drawAscii+0xea>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	b29a      	uxth	r2, r3
 8005526:	88b9      	ldrh	r1, [r7, #4]
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff46 	bl	80053bc <drawPoint>
 8005530:	e006      	b.n	8005540 <drawAscii+0xf8>
            else drawPoint(x, y, bColor);  // 背景 画点
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	b29a      	uxth	r2, r3
 8005536:	88b9      	ldrh	r1, [r7, #4]
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ff3e 	bl	80053bc <drawPoint>
            temp <<= 1;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
            y++;
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	3301      	adds	r3, #1
 800554a:	80bb      	strh	r3, [r7, #4]
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <drawAscii+0x160>)
 800554e:	889b      	ldrh	r3, [r3, #4]
 8005550:	88ba      	ldrh	r2, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d224      	bcs.n	80055a0 <drawAscii+0x158>
            if ((y - y0) == size) {
 8005556:	88ba      	ldrh	r2, [r7, #4]
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	78bb      	ldrb	r3, [r7, #2]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10a      	bne.n	8005578 <drawAscii+0x130>
                y = y0;
 8005562:	897b      	ldrh	r3, [r7, #10]
 8005564:	80bb      	strh	r3, [r7, #4]
                x++;
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	3301      	adds	r3, #1
 800556a:	80fb      	strh	r3, [r7, #6]
                if (x >= xLCD.width) return;              // 超出屏幕宽度(宽)
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <drawAscii+0x160>)
 800556e:	885b      	ldrh	r3, [r3, #2]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	429a      	cmp	r2, r3
 8005574:	d307      	bcc.n	8005586 <drawAscii+0x13e>
 8005576:	e014      	b.n	80055a2 <drawAscii+0x15a>
        for (u8 t1 = 0; t1 < 8; t1++) {
 8005578:	7b7b      	ldrb	r3, [r7, #13]
 800557a:	3301      	adds	r3, #1
 800557c:	737b      	strb	r3, [r7, #13]
 800557e:	7b7b      	ldrb	r3, [r7, #13]
 8005580:	2b07      	cmp	r3, #7
 8005582:	d9ca      	bls.n	800551a <drawAscii+0xd2>
 8005584:	e000      	b.n	8005588 <drawAscii+0x140>
                break;
 8005586:	bf00      	nop
    for (u8 t = 0; t < csize; t++) {
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	3301      	adds	r3, #1
 800558c:	73bb      	strb	r3, [r7, #14]
 800558e:	7bba      	ldrb	r2, [r7, #14]
 8005590:	7a7b      	ldrb	r3, [r7, #9]
 8005592:	429a      	cmp	r2, r3
 8005594:	d389      	bcc.n	80054aa <drawAscii+0x62>
 8005596:	e004      	b.n	80055a2 <drawAscii+0x15a>
    if (xLCD.InitOK == 0) return;
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <drawAscii+0x15a>
        else return;                                   // 没有的字库
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <drawAscii+0x15a>
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 80055a0:	bf00      	nop
            }
        }
    }
}
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd90      	pop	{r4, r7, pc}
 80055a8:	20000460 	.word	0x20000460
 80055ac:	08006144 	.word	0x08006144
 80055b0:	080065b8 	.word	0x080065b8
 80055b4:	08006ba8 	.word	0x08006ba8
 80055b8:	08007904 	.word	0x08007904

080055bc <LCD_String>:
 *
 * 参  数：
 * 返回值：　
 * 备  注： 魔女开发板团队  资料存放Q群：262901124        最后修改_2020年05月1８日
 ******************************************************************************/
void LCD_String(u16 x, u16 y, char *pFont, u8 size, u32 fColor, u32 bColor) {
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60ba      	str	r2, [r7, #8]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	81fb      	strh	r3, [r7, #14]
 80055ca:	460b      	mov	r3, r1
 80055cc:	81bb      	strh	r3, [r7, #12]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
    if (xLCD.InitOK == 0) return;
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <LCD_String+0xcc>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04f      	beq.n	800567a <LCD_String+0xbe>

    u16 xStart = x;
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	82fb      	strh	r3, [r7, #22]

    // 字体大小控制
    if (size != 12 && size != 16 && size != 24 && size != 32)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	d045      	beq.n	8005670 <LCD_String+0xb4>
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d042      	beq.n	8005670 <LCD_String+0xb4>
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	2b18      	cmp	r3, #24
 80055ee:	d03f      	beq.n	8005670 <LCD_String+0xb4>
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d03c      	beq.n	8005670 <LCD_String+0xb4>
        size = 24;
 80055f6:	2318      	movs	r3, #24
 80055f8:	71fb      	strb	r3, [r7, #7]

    while (*pFont != 0) {
 80055fa:	e039      	b.n	8005670 <LCD_String+0xb4>
        // 位置控制
        if (x > (xLCD.width - size))       // 如果这一行不够位置，就下一行
 80055fc:	89fa      	ldrh	r2, [r7, #14]
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <LCD_String+0xcc>)
 8005600:	885b      	ldrh	r3, [r3, #2]
 8005602:	4619      	mov	r1, r3
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	1acb      	subs	r3, r1, r3
 8005608:	429a      	cmp	r2, r3
 800560a:	dd06      	ble.n	800561a <LCD_String+0x5e>
        {
            x = xStart;
 800560c:	8afb      	ldrh	r3, [r7, #22]
 800560e:	81fb      	strh	r3, [r7, #14]
            y = y + size;
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	b29a      	uxth	r2, r3
 8005614:	89bb      	ldrh	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	81bb      	strh	r3, [r7, #12]
        }
        if (y > (xLCD.height - size))    // 如果到了屏幕底部，就返回，不再输出
 800561a:	89ba      	ldrh	r2, [r7, #12]
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <LCD_String+0xcc>)
 800561e:	889b      	ldrh	r3, [r3, #4]
 8005620:	4619      	mov	r1, r3
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	1acb      	subs	r3, r1, r3
 8005626:	429a      	cmp	r2, r3
 8005628:	dc29      	bgt.n	800567e <LCD_String+0xc2>
            return;

        // 判断文字是ASCII还是汉字
        if (*pFont < 127)              // ASCII字符
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b7e      	cmp	r3, #126	; 0x7e
 8005630:	d816      	bhi.n	8005660 <LCD_String+0xa4>
        {
            drawAscii(x, y, *pFont, size, fColor, bColor);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	79fc      	ldrb	r4, [r7, #7]
 8005638:	89b9      	ldrh	r1, [r7, #12]
 800563a:	89f8      	ldrh	r0, [r7, #14]
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4623      	mov	r3, r4
 8005646:	f7ff feff 	bl	8005448 <drawAscii>
            pFont++;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3301      	adds	r3, #1
 800564e:	60bb      	str	r3, [r7, #8]
            x += size / 2;
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	b29a      	uxth	r2, r3
 8005658:	89fb      	ldrh	r3, [r7, #14]
 800565a:	4413      	add	r3, r2
 800565c:	81fb      	strh	r3, [r7, #14]
 800565e:	e007      	b.n	8005670 <LCD_String+0xb4>
        } else                          // 汉字显示
        {
            // 重要: 如果用的不是魔女开发板的字库, 就要修改或注释下面这一行, 这样就不影响ASCII英文字符的输出
            // drawGBK(x, y, (u8 *) pFont, size, fColor, bColor);
            pFont = pFont + 2;          // 下一个要显示的数据在内存中的位置
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3302      	adds	r3, #2
 8005664:	60bb      	str	r3, [r7, #8]
            x = x + size;                 // 下一个要显示的数据在屏幕上的X位置
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	b29a      	uxth	r2, r3
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	4413      	add	r3, r2
 800566e:	81fb      	strh	r3, [r7, #14]
    while (*pFont != 0) {
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1c1      	bne.n	80055fc <LCD_String+0x40>
 8005678:	e002      	b.n	8005680 <LCD_String+0xc4>
    if (xLCD.InitOK == 0) return;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <LCD_String+0xc4>
            return;
 800567e:	bf00      	nop
        }
    }
}
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	bf00      	nop
 8005688:	20000460 	.word	0x20000460

0800568c <init>:
const float32_t PID_PARAM_KI = 0;
const float32_t PID_PARAM_KD = 0;



void init() {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af02      	add	r7, sp, #8
    pid.Kp = PID_PARAM_KP;
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <init+0xc4>)
 8005698:	619a      	str	r2, [r3, #24]
    pid.Ki = PID_PARAM_KI;
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <init+0xc4>)
 80056a0:	61da      	str	r2, [r3, #28]
    pid.Kd = PID_PARAM_KD;
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <init+0xc4>)
 80056a8:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&pid, 1);
 80056aa:	2101      	movs	r1, #1
 80056ac:	4828      	ldr	r0, [pc, #160]	; (8005750 <init+0xc4>)
 80056ae:	f7fb ff96 	bl	80015de <arm_pid_init_f32>

    HAL_Init();
 80056b2:	f7fb ffd3 	bl	800165c <HAL_Init>
    SystemClock_Config();
 80056b6:	f7fb fa11 	bl	8000adc <SystemClock_Config>
    MX_GPIO_Init();
 80056ba:	f7fb f915 	bl	80008e8 <MX_GPIO_Init>

    MX_USART1_UART_Init();
 80056be:	f7fb fe8d 	bl	80013dc <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 80056c2:	f7fb feb5 	bl	8001430 <MX_USART3_UART_Init>

    MX_SPI2_Init();
 80056c6:	f7fb fa6b 	bl	8000ba0 <MX_SPI2_Init>
    HAL_SPI_MspInit(&hspi2);
 80056ca:	4822      	ldr	r0, [pc, #136]	; (8005754 <init+0xc8>)
 80056cc:	f7fb fa9e 	bl	8000c0c <HAL_SPI_MspInit>
    __HAL_SPI_ENABLE(&hspi2);
 80056d0:	4b20      	ldr	r3, [pc, #128]	; (8005754 <init+0xc8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b1f      	ldr	r3, [pc, #124]	; (8005754 <init+0xc8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]

    LCD_Init();
 80056e0:	f7ff fc6a 	bl	8004fb8 <LCD_Init>
    LCD_Display(true);
 80056e4:	2001      	movs	r0, #1
 80056e6:	f7ff fe05 	bl	80052f4 <LCD_Display>
    LCD_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, GRAYBLUE);
 80056ea:	f245 4358 	movw	r3, #21592	; 0x5458
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	23c8      	movs	r3, #200	; 0xc8
 80056f2:	22c8      	movs	r2, #200	; 0xc8
 80056f4:	2100      	movs	r1, #0
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff fe77 	bl	80053ea <LCD_Fill>

    MX_DMA_Init();
 80056fc:	f7fb f8d6 	bl	80008ac <MX_DMA_Init>
    MX_ADC1_Init();
 8005700:	f7fb f80e 	bl	8000720 <MX_ADC1_Init>
    HAL_ADC_MspInit(&hadc1);
 8005704:	4814      	ldr	r0, [pc, #80]	; (8005758 <init+0xcc>)
 8005706:	f7fb f869 	bl	80007dc <HAL_ADC_MspInit>
    HAL_ADCEx_Calibration_Start(&hadc1);
 800570a:	4813      	ldr	r0, [pc, #76]	; (8005758 <init+0xcc>)
 800570c:	f7fc fc4c 	bl	8001fa8 <HAL_ADCEx_Calibration_Start>

    MX_TIM1_Init();
 8005710:	f7fb fba2 	bl	8000e58 <MX_TIM1_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005714:	2100      	movs	r1, #0
 8005716:	4811      	ldr	r0, [pc, #68]	; (800575c <init+0xd0>)
 8005718:	f7fe fa94 	bl	8003c44 <HAL_TIM_PWM_Start>

    MX_TIM3_Init();
 800571c:	f7fb fc1e 	bl	8000f5c <MX_TIM3_Init>
    MX_TIM4_Init();
 8005720:	f7fb fc96 	bl	8001050 <MX_TIM4_Init>
    MX_TIM6_Init();
 8005724:	f7fb fce2 	bl	80010ec <MX_TIM6_Init>
    MX_TIM7_Init();
 8005728:	f7fb fd16 	bl	8001158 <MX_TIM7_Init>

    HAL_TIM_Base_Start_IT(&htim1);
 800572c:	480b      	ldr	r0, [pc, #44]	; (800575c <init+0xd0>)
 800572e:	f7fe f9d9 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8005732:	480b      	ldr	r0, [pc, #44]	; (8005760 <init+0xd4>)
 8005734:	f7fe f9d6 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8005738:	480a      	ldr	r0, [pc, #40]	; (8005764 <init+0xd8>)
 800573a:	f7fe f9d3 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 800573e:	480a      	ldr	r0, [pc, #40]	; (8005768 <init+0xdc>)
 8005740:	f7fe f9d0 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8005744:	4809      	ldr	r0, [pc, #36]	; (800576c <init+0xe0>)
 8005746:	f7fe f9cd 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200003d0 	.word	0x200003d0
 8005754:	20000104 	.word	0x20000104
 8005758:	20000090 	.word	0x20000090
 800575c:	20000160 	.word	0x20000160
 8005760:	200001a8 	.word	0x200001a8
 8005764:	200001f0 	.word	0x200001f0
 8005768:	20000238 	.word	0x20000238
 800576c:	20000280 	.word	0x20000280

08005770 <main>:

int main() {
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
    init();
 8005774:	f7ff ff8a 	bl	800568c <init>
    while (true) {
 8005778:	e7fe      	b.n	8005778 <main+0x8>
	...

0800577c <__errno>:
 800577c:	4b01      	ldr	r3, [pc, #4]	; (8005784 <__errno+0x8>)
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000010 	.word	0x20000010

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	2600      	movs	r6, #0
 800578c:	4d0c      	ldr	r5, [pc, #48]	; (80057c0 <__libc_init_array+0x38>)
 800578e:	4c0d      	ldr	r4, [pc, #52]	; (80057c4 <__libc_init_array+0x3c>)
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	42a6      	cmp	r6, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	f000 fc9a 	bl	80060d0 <_init>
 800579c:	2600      	movs	r6, #0
 800579e:	4d0a      	ldr	r5, [pc, #40]	; (80057c8 <__libc_init_array+0x40>)
 80057a0:	4c0a      	ldr	r4, [pc, #40]	; (80057cc <__libc_init_array+0x44>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	42a6      	cmp	r6, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b0:	4798      	blx	r3
 80057b2:	3601      	adds	r6, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ba:	4798      	blx	r3
 80057bc:	3601      	adds	r6, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	0800915c 	.word	0x0800915c
 80057c4:	0800915c 	.word	0x0800915c
 80057c8:	0800915c 	.word	0x0800915c
 80057cc:	08009160 	.word	0x08009160

080057d0 <memset>:
 80057d0:	4603      	mov	r3, r0
 80057d2:	4402      	add	r2, r0
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d100      	bne.n	80057da <memset+0xa>
 80057d8:	4770      	bx	lr
 80057da:	f803 1b01 	strb.w	r1, [r3], #1
 80057de:	e7f9      	b.n	80057d4 <memset+0x4>

080057e0 <_free_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4605      	mov	r5, r0
 80057e4:	2900      	cmp	r1, #0
 80057e6:	d040      	beq.n	800586a <_free_r+0x8a>
 80057e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ec:	1f0c      	subs	r4, r1, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfb8      	it	lt
 80057f2:	18e4      	addlt	r4, r4, r3
 80057f4:	f000 face 	bl	8005d94 <__malloc_lock>
 80057f8:	4a1c      	ldr	r2, [pc, #112]	; (800586c <_free_r+0x8c>)
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	b933      	cbnz	r3, 800580c <_free_r+0x2c>
 80057fe:	6063      	str	r3, [r4, #4]
 8005800:	6014      	str	r4, [r2, #0]
 8005802:	4628      	mov	r0, r5
 8005804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005808:	f000 baca 	b.w	8005da0 <__malloc_unlock>
 800580c:	42a3      	cmp	r3, r4
 800580e:	d908      	bls.n	8005822 <_free_r+0x42>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	1821      	adds	r1, r4, r0
 8005814:	428b      	cmp	r3, r1
 8005816:	bf01      	itttt	eq
 8005818:	6819      	ldreq	r1, [r3, #0]
 800581a:	685b      	ldreq	r3, [r3, #4]
 800581c:	1809      	addeq	r1, r1, r0
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	e7ed      	b.n	80057fe <_free_r+0x1e>
 8005822:	461a      	mov	r2, r3
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b10b      	cbz	r3, 800582c <_free_r+0x4c>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d9fa      	bls.n	8005822 <_free_r+0x42>
 800582c:	6811      	ldr	r1, [r2, #0]
 800582e:	1850      	adds	r0, r2, r1
 8005830:	42a0      	cmp	r0, r4
 8005832:	d10b      	bne.n	800584c <_free_r+0x6c>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	4401      	add	r1, r0
 8005838:	1850      	adds	r0, r2, r1
 800583a:	4283      	cmp	r3, r0
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	d1e0      	bne.n	8005802 <_free_r+0x22>
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4401      	add	r1, r0
 8005846:	6011      	str	r1, [r2, #0]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	e7da      	b.n	8005802 <_free_r+0x22>
 800584c:	d902      	bls.n	8005854 <_free_r+0x74>
 800584e:	230c      	movs	r3, #12
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	e7d6      	b.n	8005802 <_free_r+0x22>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	1821      	adds	r1, r4, r0
 8005858:	428b      	cmp	r3, r1
 800585a:	bf01      	itttt	eq
 800585c:	6819      	ldreq	r1, [r3, #0]
 800585e:	685b      	ldreq	r3, [r3, #4]
 8005860:	1809      	addeq	r1, r1, r0
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6054      	str	r4, [r2, #4]
 8005868:	e7cb      	b.n	8005802 <_free_r+0x22>
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	2000046c 	.word	0x2000046c

08005870 <sbrk_aligned>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4e0e      	ldr	r6, [pc, #56]	; (80058ac <sbrk_aligned+0x3c>)
 8005874:	460c      	mov	r4, r1
 8005876:	6831      	ldr	r1, [r6, #0]
 8005878:	4605      	mov	r5, r0
 800587a:	b911      	cbnz	r1, 8005882 <sbrk_aligned+0x12>
 800587c:	f000 fa22 	bl	8005cc4 <_sbrk_r>
 8005880:	6030      	str	r0, [r6, #0]
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	f000 fa1d 	bl	8005cc4 <_sbrk_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d00a      	beq.n	80058a4 <sbrk_aligned+0x34>
 800588e:	1cc4      	adds	r4, r0, #3
 8005890:	f024 0403 	bic.w	r4, r4, #3
 8005894:	42a0      	cmp	r0, r4
 8005896:	d007      	beq.n	80058a8 <sbrk_aligned+0x38>
 8005898:	1a21      	subs	r1, r4, r0
 800589a:	4628      	mov	r0, r5
 800589c:	f000 fa12 	bl	8005cc4 <_sbrk_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d101      	bne.n	80058a8 <sbrk_aligned+0x38>
 80058a4:	f04f 34ff 	mov.w	r4, #4294967295
 80058a8:	4620      	mov	r0, r4
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	20000470 	.word	0x20000470

080058b0 <_malloc_r>:
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	1ccd      	adds	r5, r1, #3
 80058b6:	f025 0503 	bic.w	r5, r5, #3
 80058ba:	3508      	adds	r5, #8
 80058bc:	2d0c      	cmp	r5, #12
 80058be:	bf38      	it	cc
 80058c0:	250c      	movcc	r5, #12
 80058c2:	2d00      	cmp	r5, #0
 80058c4:	4607      	mov	r7, r0
 80058c6:	db01      	blt.n	80058cc <_malloc_r+0x1c>
 80058c8:	42a9      	cmp	r1, r5
 80058ca:	d905      	bls.n	80058d8 <_malloc_r+0x28>
 80058cc:	230c      	movs	r3, #12
 80058ce:	2600      	movs	r6, #0
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4630      	mov	r0, r6
 80058d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d8:	4e2e      	ldr	r6, [pc, #184]	; (8005994 <_malloc_r+0xe4>)
 80058da:	f000 fa5b 	bl	8005d94 <__malloc_lock>
 80058de:	6833      	ldr	r3, [r6, #0]
 80058e0:	461c      	mov	r4, r3
 80058e2:	bb34      	cbnz	r4, 8005932 <_malloc_r+0x82>
 80058e4:	4629      	mov	r1, r5
 80058e6:	4638      	mov	r0, r7
 80058e8:	f7ff ffc2 	bl	8005870 <sbrk_aligned>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	4604      	mov	r4, r0
 80058f0:	d14d      	bne.n	800598e <_malloc_r+0xde>
 80058f2:	6834      	ldr	r4, [r6, #0]
 80058f4:	4626      	mov	r6, r4
 80058f6:	2e00      	cmp	r6, #0
 80058f8:	d140      	bne.n	800597c <_malloc_r+0xcc>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	4631      	mov	r1, r6
 80058fe:	4638      	mov	r0, r7
 8005900:	eb04 0803 	add.w	r8, r4, r3
 8005904:	f000 f9de 	bl	8005cc4 <_sbrk_r>
 8005908:	4580      	cmp	r8, r0
 800590a:	d13a      	bne.n	8005982 <_malloc_r+0xd2>
 800590c:	6821      	ldr	r1, [r4, #0]
 800590e:	3503      	adds	r5, #3
 8005910:	1a6d      	subs	r5, r5, r1
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	3508      	adds	r5, #8
 8005918:	2d0c      	cmp	r5, #12
 800591a:	bf38      	it	cc
 800591c:	250c      	movcc	r5, #12
 800591e:	4638      	mov	r0, r7
 8005920:	4629      	mov	r1, r5
 8005922:	f7ff ffa5 	bl	8005870 <sbrk_aligned>
 8005926:	3001      	adds	r0, #1
 8005928:	d02b      	beq.n	8005982 <_malloc_r+0xd2>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	442b      	add	r3, r5
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	e00e      	b.n	8005950 <_malloc_r+0xa0>
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	1b52      	subs	r2, r2, r5
 8005936:	d41e      	bmi.n	8005976 <_malloc_r+0xc6>
 8005938:	2a0b      	cmp	r2, #11
 800593a:	d916      	bls.n	800596a <_malloc_r+0xba>
 800593c:	1961      	adds	r1, r4, r5
 800593e:	42a3      	cmp	r3, r4
 8005940:	6025      	str	r5, [r4, #0]
 8005942:	bf18      	it	ne
 8005944:	6059      	strne	r1, [r3, #4]
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	bf08      	it	eq
 800594a:	6031      	streq	r1, [r6, #0]
 800594c:	5162      	str	r2, [r4, r5]
 800594e:	604b      	str	r3, [r1, #4]
 8005950:	4638      	mov	r0, r7
 8005952:	f104 060b 	add.w	r6, r4, #11
 8005956:	f000 fa23 	bl	8005da0 <__malloc_unlock>
 800595a:	f026 0607 	bic.w	r6, r6, #7
 800595e:	1d23      	adds	r3, r4, #4
 8005960:	1af2      	subs	r2, r6, r3
 8005962:	d0b6      	beq.n	80058d2 <_malloc_r+0x22>
 8005964:	1b9b      	subs	r3, r3, r6
 8005966:	50a3      	str	r3, [r4, r2]
 8005968:	e7b3      	b.n	80058d2 <_malloc_r+0x22>
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	42a3      	cmp	r3, r4
 800596e:	bf0c      	ite	eq
 8005970:	6032      	streq	r2, [r6, #0]
 8005972:	605a      	strne	r2, [r3, #4]
 8005974:	e7ec      	b.n	8005950 <_malloc_r+0xa0>
 8005976:	4623      	mov	r3, r4
 8005978:	6864      	ldr	r4, [r4, #4]
 800597a:	e7b2      	b.n	80058e2 <_malloc_r+0x32>
 800597c:	4634      	mov	r4, r6
 800597e:	6876      	ldr	r6, [r6, #4]
 8005980:	e7b9      	b.n	80058f6 <_malloc_r+0x46>
 8005982:	230c      	movs	r3, #12
 8005984:	4638      	mov	r0, r7
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	f000 fa0a 	bl	8005da0 <__malloc_unlock>
 800598c:	e7a1      	b.n	80058d2 <_malloc_r+0x22>
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	e7de      	b.n	8005950 <_malloc_r+0xa0>
 8005992:	bf00      	nop
 8005994:	2000046c 	.word	0x2000046c

08005998 <_printf_common>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	4699      	mov	r9, r3
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	4607      	mov	r7, r0
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bfb8      	it	lt
 80059aa:	4613      	movlt	r3, r2
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059b2:	460c      	mov	r4, r1
 80059b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059b8:	b10a      	cbz	r2, 80059be <_printf_common+0x26>
 80059ba:	3301      	adds	r3, #1
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	0699      	lsls	r1, r3, #26
 80059c2:	bf42      	ittt	mi
 80059c4:	6833      	ldrmi	r3, [r6, #0]
 80059c6:	3302      	addmi	r3, #2
 80059c8:	6033      	strmi	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	f015 0506 	ands.w	r5, r5, #6
 80059d0:	d106      	bne.n	80059e0 <_printf_common+0x48>
 80059d2:	f104 0a19 	add.w	sl, r4, #25
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dc28      	bgt.n	8005a32 <_printf_common+0x9a>
 80059e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e4:	1e13      	subs	r3, r2, #0
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d42d      	bmi.n	8005a4c <_printf_common+0xb4>
 80059f0:	4649      	mov	r1, r9
 80059f2:	4638      	mov	r0, r7
 80059f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d020      	beq.n	8005a40 <_printf_common+0xa8>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	68e5      	ldr	r5, [r4, #12]
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	bf18      	it	ne
 8005a0a:	2500      	movne	r5, #0
 8005a0c:	6832      	ldr	r2, [r6, #0]
 8005a0e:	f04f 0600 	mov.w	r6, #0
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	bf08      	it	eq
 8005a16:	1aad      	subeq	r5, r5, r2
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	bf08      	it	eq
 8005a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bfc4      	itt	gt
 8005a24:	1a9b      	subgt	r3, r3, r2
 8005a26:	18ed      	addgt	r5, r5, r3
 8005a28:	341a      	adds	r4, #26
 8005a2a:	42b5      	cmp	r5, r6
 8005a2c:	d11a      	bne.n	8005a64 <_printf_common+0xcc>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e008      	b.n	8005a44 <_printf_common+0xac>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4652      	mov	r2, sl
 8005a36:	4649      	mov	r1, r9
 8005a38:	4638      	mov	r0, r7
 8005a3a:	47c0      	blx	r8
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_printf_common+0xb0>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7c4      	b.n	80059d6 <_printf_common+0x3e>
 8005a4c:	2030      	movs	r0, #48	; 0x30
 8005a4e:	18e1      	adds	r1, r4, r3
 8005a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a5a:	4422      	add	r2, r4
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a62:	e7c5      	b.n	80059f0 <_printf_common+0x58>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	4649      	mov	r1, r9
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c0      	blx	r8
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d0e6      	beq.n	8005a40 <_printf_common+0xa8>
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7d9      	b.n	8005a2a <_printf_common+0x92>
	...

08005a78 <_printf_i>:
 8005a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	7e0f      	ldrb	r7, [r1, #24]
 8005a7e:	4691      	mov	r9, r2
 8005a80:	2f78      	cmp	r7, #120	; 0x78
 8005a82:	4680      	mov	r8, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	469a      	mov	sl, r3
 8005a88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a8e:	d807      	bhi.n	8005aa0 <_printf_i+0x28>
 8005a90:	2f62      	cmp	r7, #98	; 0x62
 8005a92:	d80a      	bhi.n	8005aaa <_printf_i+0x32>
 8005a94:	2f00      	cmp	r7, #0
 8005a96:	f000 80d9 	beq.w	8005c4c <_printf_i+0x1d4>
 8005a9a:	2f58      	cmp	r7, #88	; 0x58
 8005a9c:	f000 80a4 	beq.w	8005be8 <_printf_i+0x170>
 8005aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa8:	e03a      	b.n	8005b20 <_printf_i+0xa8>
 8005aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aae:	2b15      	cmp	r3, #21
 8005ab0:	d8f6      	bhi.n	8005aa0 <_printf_i+0x28>
 8005ab2:	a101      	add	r1, pc, #4	; (adr r1, 8005ab8 <_printf_i+0x40>)
 8005ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005aa1 	.word	0x08005aa1
 8005ac4:	08005aa1 	.word	0x08005aa1
 8005ac8:	08005aa1 	.word	0x08005aa1
 8005acc:	08005aa1 	.word	0x08005aa1
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005aa1 	.word	0x08005aa1
 8005ad8:	08005aa1 	.word	0x08005aa1
 8005adc:	08005aa1 	.word	0x08005aa1
 8005ae0:	08005aa1 	.word	0x08005aa1
 8005ae4:	08005c33 	.word	0x08005c33
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005c15 	.word	0x08005c15
 8005af0:	08005aa1 	.word	0x08005aa1
 8005af4:	08005aa1 	.word	0x08005aa1
 8005af8:	08005c55 	.word	0x08005c55
 8005afc:	08005aa1 	.word	0x08005aa1
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005aa1 	.word	0x08005aa1
 8005b08:	08005aa1 	.word	0x08005aa1
 8005b0c:	08005c1d 	.word	0x08005c1d
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0a4      	b.n	8005c6e <_printf_i+0x1f6>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	6829      	ldr	r1, [r5, #0]
 8005b28:	0606      	lsls	r6, r0, #24
 8005b2a:	f101 0304 	add.w	r3, r1, #4
 8005b2e:	d50a      	bpl.n	8005b46 <_printf_i+0xce>
 8005b30:	680e      	ldr	r6, [r1, #0]
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	da03      	bge.n	8005b40 <_printf_i+0xc8>
 8005b38:	232d      	movs	r3, #45	; 0x2d
 8005b3a:	4276      	negs	r6, r6
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	230a      	movs	r3, #10
 8005b42:	485e      	ldr	r0, [pc, #376]	; (8005cbc <_printf_i+0x244>)
 8005b44:	e019      	b.n	8005b7a <_printf_i+0x102>
 8005b46:	680e      	ldr	r6, [r1, #0]
 8005b48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	bf18      	it	ne
 8005b50:	b236      	sxthne	r6, r6
 8005b52:	e7ef      	b.n	8005b34 <_printf_i+0xbc>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	1d19      	adds	r1, r3, #4
 8005b5a:	6029      	str	r1, [r5, #0]
 8005b5c:	0601      	lsls	r1, r0, #24
 8005b5e:	d501      	bpl.n	8005b64 <_printf_i+0xec>
 8005b60:	681e      	ldr	r6, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <_printf_i+0xf2>
 8005b64:	0646      	lsls	r6, r0, #25
 8005b66:	d5fb      	bpl.n	8005b60 <_printf_i+0xe8>
 8005b68:	881e      	ldrh	r6, [r3, #0]
 8005b6a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2308      	moveq	r3, #8
 8005b70:	230a      	movne	r3, #10
 8005b72:	4852      	ldr	r0, [pc, #328]	; (8005cbc <_printf_i+0x244>)
 8005b74:	2100      	movs	r1, #0
 8005b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b7a:	6865      	ldr	r5, [r4, #4]
 8005b7c:	2d00      	cmp	r5, #0
 8005b7e:	bfa8      	it	ge
 8005b80:	6821      	ldrge	r1, [r4, #0]
 8005b82:	60a5      	str	r5, [r4, #8]
 8005b84:	bfa4      	itt	ge
 8005b86:	f021 0104 	bicge.w	r1, r1, #4
 8005b8a:	6021      	strge	r1, [r4, #0]
 8005b8c:	b90e      	cbnz	r6, 8005b92 <_printf_i+0x11a>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	d04d      	beq.n	8005c2e <_printf_i+0x1b6>
 8005b92:	4615      	mov	r5, r2
 8005b94:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b98:	fb03 6711 	mls	r7, r3, r1, r6
 8005b9c:	5dc7      	ldrb	r7, [r0, r7]
 8005b9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ba2:	4637      	mov	r7, r6
 8005ba4:	42bb      	cmp	r3, r7
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	d9f4      	bls.n	8005b94 <_printf_i+0x11c>
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d10b      	bne.n	8005bc6 <_printf_i+0x14e>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	07de      	lsls	r6, r3, #31
 8005bb2:	d508      	bpl.n	8005bc6 <_printf_i+0x14e>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	6861      	ldr	r1, [r4, #4]
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	bfde      	ittt	le
 8005bbc:	2330      	movle	r3, #48	; 0x30
 8005bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bc6:	1b52      	subs	r2, r2, r5
 8005bc8:	6122      	str	r2, [r4, #16]
 8005bca:	464b      	mov	r3, r9
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f8cd a000 	str.w	sl, [sp]
 8005bd4:	aa03      	add	r2, sp, #12
 8005bd6:	f7ff fedf 	bl	8005998 <_printf_common>
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d14c      	bne.n	8005c78 <_printf_i+0x200>
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	b004      	add	sp, #16
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	4834      	ldr	r0, [pc, #208]	; (8005cbc <_printf_i+0x244>)
 8005bea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bee:	6829      	ldr	r1, [r5, #0]
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	061d      	lsls	r5, r3, #24
 8005bfa:	d514      	bpl.n	8005c26 <_printf_i+0x1ae>
 8005bfc:	07df      	lsls	r7, r3, #31
 8005bfe:	bf44      	itt	mi
 8005c00:	f043 0320 	orrmi.w	r3, r3, #32
 8005c04:	6023      	strmi	r3, [r4, #0]
 8005c06:	b91e      	cbnz	r6, 8005c10 <_printf_i+0x198>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f023 0320 	bic.w	r3, r3, #32
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2310      	movs	r3, #16
 8005c12:	e7af      	b.n	8005b74 <_printf_i+0xfc>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	2378      	movs	r3, #120	; 0x78
 8005c1e:	4828      	ldr	r0, [pc, #160]	; (8005cc0 <_printf_i+0x248>)
 8005c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c24:	e7e3      	b.n	8005bee <_printf_i+0x176>
 8005c26:	0659      	lsls	r1, r3, #25
 8005c28:	bf48      	it	mi
 8005c2a:	b2b6      	uxthmi	r6, r6
 8005c2c:	e7e6      	b.n	8005bfc <_printf_i+0x184>
 8005c2e:	4615      	mov	r5, r2
 8005c30:	e7bb      	b.n	8005baa <_printf_i+0x132>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	6826      	ldr	r6, [r4, #0]
 8005c36:	1d18      	adds	r0, r3, #4
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	6028      	str	r0, [r5, #0]
 8005c3c:	0635      	lsls	r5, r6, #24
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	d501      	bpl.n	8005c46 <_printf_i+0x1ce>
 8005c42:	6019      	str	r1, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <_printf_i+0x1d4>
 8005c46:	0670      	lsls	r0, r6, #25
 8005c48:	d5fb      	bpl.n	8005c42 <_printf_i+0x1ca>
 8005c4a:	8019      	strh	r1, [r3, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4615      	mov	r5, r2
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	e7ba      	b.n	8005bca <_printf_i+0x152>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	2100      	movs	r1, #0
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	602a      	str	r2, [r5, #0]
 8005c5c:	681d      	ldr	r5, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 f861 	bl	8005d28 <memchr>
 8005c66:	b108      	cbz	r0, 8005c6c <_printf_i+0x1f4>
 8005c68:	1b40      	subs	r0, r0, r5
 8005c6a:	6060      	str	r0, [r4, #4]
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c76:	e7a8      	b.n	8005bca <_printf_i+0x152>
 8005c78:	462a      	mov	r2, r5
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	47d0      	blx	sl
 8005c82:	3001      	adds	r0, #1
 8005c84:	d0ab      	beq.n	8005bde <_printf_i+0x166>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	079b      	lsls	r3, r3, #30
 8005c8a:	d413      	bmi.n	8005cb4 <_printf_i+0x23c>
 8005c8c:	68e0      	ldr	r0, [r4, #12]
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	4298      	cmp	r0, r3
 8005c92:	bfb8      	it	lt
 8005c94:	4618      	movlt	r0, r3
 8005c96:	e7a4      	b.n	8005be2 <_printf_i+0x16a>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4632      	mov	r2, r6
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	47d0      	blx	sl
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d09b      	beq.n	8005bde <_printf_i+0x166>
 8005ca6:	3501      	adds	r5, #1
 8005ca8:	68e3      	ldr	r3, [r4, #12]
 8005caa:	9903      	ldr	r1, [sp, #12]
 8005cac:	1a5b      	subs	r3, r3, r1
 8005cae:	42ab      	cmp	r3, r5
 8005cb0:	dcf2      	bgt.n	8005c98 <_printf_i+0x220>
 8005cb2:	e7eb      	b.n	8005c8c <_printf_i+0x214>
 8005cb4:	2500      	movs	r5, #0
 8005cb6:	f104 0619 	add.w	r6, r4, #25
 8005cba:	e7f5      	b.n	8005ca8 <_printf_i+0x230>
 8005cbc:	080090c4 	.word	0x080090c4
 8005cc0:	080090d5 	.word	0x080090d5

08005cc4 <_sbrk_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4d05      	ldr	r5, [pc, #20]	; (8005ce0 <_sbrk_r+0x1c>)
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	f7fb f886 	bl	8000de0 <_sbrk>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_sbrk_r+0x1a>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_sbrk_r+0x1a>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	20000478 	.word	0x20000478

08005ce4 <siprintf>:
 8005ce4:	b40e      	push	{r1, r2, r3}
 8005ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cea:	b500      	push	{lr}
 8005cec:	b09c      	sub	sp, #112	; 0x70
 8005cee:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	9006      	str	r0, [sp, #24]
 8005cf4:	9107      	str	r1, [sp, #28]
 8005cf6:	9104      	str	r1, [sp, #16]
 8005cf8:	4808      	ldr	r0, [pc, #32]	; (8005d1c <siprintf+0x38>)
 8005cfa:	4909      	ldr	r1, [pc, #36]	; (8005d20 <siprintf+0x3c>)
 8005cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d00:	9105      	str	r1, [sp, #20]
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	a902      	add	r1, sp, #8
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	f000 f8da 	bl	8005ec0 <_svfiprintf_r>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	9b02      	ldr	r3, [sp, #8]
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	b01c      	add	sp, #112	; 0x70
 8005d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d18:	b003      	add	sp, #12
 8005d1a:	4770      	bx	lr
 8005d1c:	20000010 	.word	0x20000010
 8005d20:	ffff0208 	.word	0xffff0208

08005d24 <__retarget_lock_acquire_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_release_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <memchr>:
 8005d28:	4603      	mov	r3, r0
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	b2c9      	uxtb	r1, r1
 8005d2e:	4402      	add	r2, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	d101      	bne.n	8005d3a <memchr+0x12>
 8005d36:	2000      	movs	r0, #0
 8005d38:	e003      	b.n	8005d42 <memchr+0x1a>
 8005d3a:	7804      	ldrb	r4, [r0, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	428c      	cmp	r4, r1
 8005d40:	d1f6      	bne.n	8005d30 <memchr+0x8>
 8005d42:	bd10      	pop	{r4, pc}

08005d44 <memcpy>:
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	4770      	bx	lr
 8005d50:	b510      	push	{r4, lr}
 8005d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d56:	4291      	cmp	r1, r2
 8005d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5c:	d1f9      	bne.n	8005d52 <memcpy+0xe>
 8005d5e:	bd10      	pop	{r4, pc}

08005d60 <memmove>:
 8005d60:	4288      	cmp	r0, r1
 8005d62:	b510      	push	{r4, lr}
 8005d64:	eb01 0402 	add.w	r4, r1, r2
 8005d68:	d902      	bls.n	8005d70 <memmove+0x10>
 8005d6a:	4284      	cmp	r4, r0
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	d807      	bhi.n	8005d80 <memmove+0x20>
 8005d70:	1e43      	subs	r3, r0, #1
 8005d72:	42a1      	cmp	r1, r4
 8005d74:	d008      	beq.n	8005d88 <memmove+0x28>
 8005d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d7e:	e7f8      	b.n	8005d72 <memmove+0x12>
 8005d80:	4601      	mov	r1, r0
 8005d82:	4402      	add	r2, r0
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d100      	bne.n	8005d8a <memmove+0x2a>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d92:	e7f7      	b.n	8005d84 <memmove+0x24>

08005d94 <__malloc_lock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__malloc_lock+0x8>)
 8005d96:	f7ff bfc5 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	20000474 	.word	0x20000474

08005da0 <__malloc_unlock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__malloc_unlock+0x8>)
 8005da2:	f7ff bfc0 	b.w	8005d26 <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	20000474 	.word	0x20000474

08005dac <_realloc_r>:
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	4680      	mov	r8, r0
 8005db2:	4614      	mov	r4, r2
 8005db4:	460e      	mov	r6, r1
 8005db6:	b921      	cbnz	r1, 8005dc2 <_realloc_r+0x16>
 8005db8:	4611      	mov	r1, r2
 8005dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	f7ff bd77 	b.w	80058b0 <_malloc_r>
 8005dc2:	b92a      	cbnz	r2, 8005dd0 <_realloc_r+0x24>
 8005dc4:	f7ff fd0c 	bl	80057e0 <_free_r>
 8005dc8:	4625      	mov	r5, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd0:	f000 f976 	bl	80060c0 <_malloc_usable_size_r>
 8005dd4:	4284      	cmp	r4, r0
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	d802      	bhi.n	8005de0 <_realloc_r+0x34>
 8005dda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dde:	d812      	bhi.n	8005e06 <_realloc_r+0x5a>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fd64 	bl	80058b0 <_malloc_r>
 8005de8:	4605      	mov	r5, r0
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d0ed      	beq.n	8005dca <_realloc_r+0x1e>
 8005dee:	42bc      	cmp	r4, r7
 8005df0:	4622      	mov	r2, r4
 8005df2:	4631      	mov	r1, r6
 8005df4:	bf28      	it	cs
 8005df6:	463a      	movcs	r2, r7
 8005df8:	f7ff ffa4 	bl	8005d44 <memcpy>
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4640      	mov	r0, r8
 8005e00:	f7ff fcee 	bl	80057e0 <_free_r>
 8005e04:	e7e1      	b.n	8005dca <_realloc_r+0x1e>
 8005e06:	4635      	mov	r5, r6
 8005e08:	e7df      	b.n	8005dca <_realloc_r+0x1e>

08005e0a <__ssputs_r>:
 8005e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0e:	688e      	ldr	r6, [r1, #8]
 8005e10:	4682      	mov	sl, r0
 8005e12:	429e      	cmp	r6, r3
 8005e14:	460c      	mov	r4, r1
 8005e16:	4690      	mov	r8, r2
 8005e18:	461f      	mov	r7, r3
 8005e1a:	d838      	bhi.n	8005e8e <__ssputs_r+0x84>
 8005e1c:	898a      	ldrh	r2, [r1, #12]
 8005e1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e22:	d032      	beq.n	8005e8a <__ssputs_r+0x80>
 8005e24:	6825      	ldr	r5, [r4, #0]
 8005e26:	6909      	ldr	r1, [r1, #16]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	eba5 0901 	sub.w	r9, r5, r1
 8005e2e:	6965      	ldr	r5, [r4, #20]
 8005e30:	444b      	add	r3, r9
 8005e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e3a:	106d      	asrs	r5, r5, #1
 8005e3c:	429d      	cmp	r5, r3
 8005e3e:	bf38      	it	cc
 8005e40:	461d      	movcc	r5, r3
 8005e42:	0553      	lsls	r3, r2, #21
 8005e44:	d531      	bpl.n	8005eaa <__ssputs_r+0xa0>
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7ff fd32 	bl	80058b0 <_malloc_r>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	b950      	cbnz	r0, 8005e66 <__ssputs_r+0x5c>
 8005e50:	230c      	movs	r3, #12
 8005e52:	f04f 30ff 	mov.w	r0, #4294967295
 8005e56:	f8ca 3000 	str.w	r3, [sl]
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e66:	464a      	mov	r2, r9
 8005e68:	6921      	ldr	r1, [r4, #16]
 8005e6a:	f7ff ff6b 	bl	8005d44 <memcpy>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	6126      	str	r6, [r4, #16]
 8005e7c:	444e      	add	r6, r9
 8005e7e:	6026      	str	r6, [r4, #0]
 8005e80:	463e      	mov	r6, r7
 8005e82:	6165      	str	r5, [r4, #20]
 8005e84:	eba5 0509 	sub.w	r5, r5, r9
 8005e88:	60a5      	str	r5, [r4, #8]
 8005e8a:	42be      	cmp	r6, r7
 8005e8c:	d900      	bls.n	8005e90 <__ssputs_r+0x86>
 8005e8e:	463e      	mov	r6, r7
 8005e90:	4632      	mov	r2, r6
 8005e92:	4641      	mov	r1, r8
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	f7ff ff63 	bl	8005d60 <memmove>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	1b9b      	subs	r3, r3, r6
 8005ea0:	60a3      	str	r3, [r4, #8]
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	4433      	add	r3, r6
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e7db      	b.n	8005e62 <__ssputs_r+0x58>
 8005eaa:	462a      	mov	r2, r5
 8005eac:	f7ff ff7e 	bl	8005dac <_realloc_r>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d1e1      	bne.n	8005e7a <__ssputs_r+0x70>
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	6921      	ldr	r1, [r4, #16]
 8005eba:	f7ff fc91 	bl	80057e0 <_free_r>
 8005ebe:	e7c7      	b.n	8005e50 <__ssputs_r+0x46>

08005ec0 <_svfiprintf_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4698      	mov	r8, r3
 8005ec6:	898b      	ldrh	r3, [r1, #12]
 8005ec8:	4607      	mov	r7, r0
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	460d      	mov	r5, r1
 8005ece:	4614      	mov	r4, r2
 8005ed0:	b09d      	sub	sp, #116	; 0x74
 8005ed2:	d50e      	bpl.n	8005ef2 <_svfiprintf_r+0x32>
 8005ed4:	690b      	ldr	r3, [r1, #16]
 8005ed6:	b963      	cbnz	r3, 8005ef2 <_svfiprintf_r+0x32>
 8005ed8:	2140      	movs	r1, #64	; 0x40
 8005eda:	f7ff fce9 	bl	80058b0 <_malloc_r>
 8005ede:	6028      	str	r0, [r5, #0]
 8005ee0:	6128      	str	r0, [r5, #16]
 8005ee2:	b920      	cbnz	r0, 8005eee <_svfiprintf_r+0x2e>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e0d1      	b.n	8006092 <_svfiprintf_r+0x1d2>
 8005eee:	2340      	movs	r3, #64	; 0x40
 8005ef0:	616b      	str	r3, [r5, #20]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef6:	2320      	movs	r3, #32
 8005ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005efc:	2330      	movs	r3, #48	; 0x30
 8005efe:	f04f 0901 	mov.w	r9, #1
 8005f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060ac <_svfiprintf_r+0x1ec>
 8005f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f0e:	4623      	mov	r3, r4
 8005f10:	469a      	mov	sl, r3
 8005f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f16:	b10a      	cbz	r2, 8005f1c <_svfiprintf_r+0x5c>
 8005f18:	2a25      	cmp	r2, #37	; 0x25
 8005f1a:	d1f9      	bne.n	8005f10 <_svfiprintf_r+0x50>
 8005f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f20:	d00b      	beq.n	8005f3a <_svfiprintf_r+0x7a>
 8005f22:	465b      	mov	r3, fp
 8005f24:	4622      	mov	r2, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff ff6e 	bl	8005e0a <__ssputs_r>
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f000 80aa 	beq.w	8006088 <_svfiprintf_r+0x1c8>
 8005f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f36:	445a      	add	r2, fp
 8005f38:	9209      	str	r2, [sp, #36]	; 0x24
 8005f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80a2 	beq.w	8006088 <_svfiprintf_r+0x1c8>
 8005f44:	2300      	movs	r3, #0
 8005f46:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f4e:	f10a 0a01 	add.w	sl, sl, #1
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	9307      	str	r3, [sp, #28]
 8005f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f5c:	4654      	mov	r4, sl
 8005f5e:	2205      	movs	r2, #5
 8005f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f64:	4851      	ldr	r0, [pc, #324]	; (80060ac <_svfiprintf_r+0x1ec>)
 8005f66:	f7ff fedf 	bl	8005d28 <memchr>
 8005f6a:	9a04      	ldr	r2, [sp, #16]
 8005f6c:	b9d8      	cbnz	r0, 8005fa6 <_svfiprintf_r+0xe6>
 8005f6e:	06d0      	lsls	r0, r2, #27
 8005f70:	bf44      	itt	mi
 8005f72:	2320      	movmi	r3, #32
 8005f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f78:	0711      	lsls	r1, r2, #28
 8005f7a:	bf44      	itt	mi
 8005f7c:	232b      	movmi	r3, #43	; 0x2b
 8005f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f82:	f89a 3000 	ldrb.w	r3, [sl]
 8005f86:	2b2a      	cmp	r3, #42	; 0x2a
 8005f88:	d015      	beq.n	8005fb6 <_svfiprintf_r+0xf6>
 8005f8a:	4654      	mov	r4, sl
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f04f 0c0a 	mov.w	ip, #10
 8005f92:	9a07      	ldr	r2, [sp, #28]
 8005f94:	4621      	mov	r1, r4
 8005f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f9a:	3b30      	subs	r3, #48	; 0x30
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d94e      	bls.n	800603e <_svfiprintf_r+0x17e>
 8005fa0:	b1b0      	cbz	r0, 8005fd0 <_svfiprintf_r+0x110>
 8005fa2:	9207      	str	r2, [sp, #28]
 8005fa4:	e014      	b.n	8005fd0 <_svfiprintf_r+0x110>
 8005fa6:	eba0 0308 	sub.w	r3, r0, r8
 8005faa:	fa09 f303 	lsl.w	r3, r9, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	46a2      	mov	sl, r4
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	e7d2      	b.n	8005f5c <_svfiprintf_r+0x9c>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	1d19      	adds	r1, r3, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	9103      	str	r1, [sp, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfbb      	ittet	lt
 8005fc2:	425b      	neglt	r3, r3
 8005fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fc8:	9307      	strge	r3, [sp, #28]
 8005fca:	9307      	strlt	r3, [sp, #28]
 8005fcc:	bfb8      	it	lt
 8005fce:	9204      	strlt	r2, [sp, #16]
 8005fd0:	7823      	ldrb	r3, [r4, #0]
 8005fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fd4:	d10c      	bne.n	8005ff0 <_svfiprintf_r+0x130>
 8005fd6:	7863      	ldrb	r3, [r4, #1]
 8005fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fda:	d135      	bne.n	8006048 <_svfiprintf_r+0x188>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	3402      	adds	r4, #2
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	9203      	str	r2, [sp, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfb8      	it	lt
 8005fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fee:	9305      	str	r3, [sp, #20]
 8005ff0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060b0 <_svfiprintf_r+0x1f0>
 8005ff4:	2203      	movs	r2, #3
 8005ff6:	4650      	mov	r0, sl
 8005ff8:	7821      	ldrb	r1, [r4, #0]
 8005ffa:	f7ff fe95 	bl	8005d28 <memchr>
 8005ffe:	b140      	cbz	r0, 8006012 <_svfiprintf_r+0x152>
 8006000:	2340      	movs	r3, #64	; 0x40
 8006002:	eba0 000a 	sub.w	r0, r0, sl
 8006006:	fa03 f000 	lsl.w	r0, r3, r0
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	3401      	adds	r4, #1
 800600e:	4303      	orrs	r3, r0
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006016:	2206      	movs	r2, #6
 8006018:	4826      	ldr	r0, [pc, #152]	; (80060b4 <_svfiprintf_r+0x1f4>)
 800601a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800601e:	f7ff fe83 	bl	8005d28 <memchr>
 8006022:	2800      	cmp	r0, #0
 8006024:	d038      	beq.n	8006098 <_svfiprintf_r+0x1d8>
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <_svfiprintf_r+0x1f8>)
 8006028:	bb1b      	cbnz	r3, 8006072 <_svfiprintf_r+0x1b2>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	3307      	adds	r3, #7
 800602e:	f023 0307 	bic.w	r3, r3, #7
 8006032:	3308      	adds	r3, #8
 8006034:	9303      	str	r3, [sp, #12]
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	4433      	add	r3, r6
 800603a:	9309      	str	r3, [sp, #36]	; 0x24
 800603c:	e767      	b.n	8005f0e <_svfiprintf_r+0x4e>
 800603e:	460c      	mov	r4, r1
 8006040:	2001      	movs	r0, #1
 8006042:	fb0c 3202 	mla	r2, ip, r2, r3
 8006046:	e7a5      	b.n	8005f94 <_svfiprintf_r+0xd4>
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 0c0a 	mov.w	ip, #10
 800604e:	4619      	mov	r1, r3
 8006050:	3401      	adds	r4, #1
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	4620      	mov	r0, r4
 8006056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800605a:	3a30      	subs	r2, #48	; 0x30
 800605c:	2a09      	cmp	r2, #9
 800605e:	d903      	bls.n	8006068 <_svfiprintf_r+0x1a8>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0c5      	beq.n	8005ff0 <_svfiprintf_r+0x130>
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	e7c3      	b.n	8005ff0 <_svfiprintf_r+0x130>
 8006068:	4604      	mov	r4, r0
 800606a:	2301      	movs	r3, #1
 800606c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006070:	e7f0      	b.n	8006054 <_svfiprintf_r+0x194>
 8006072:	ab03      	add	r3, sp, #12
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	462a      	mov	r2, r5
 8006078:	4638      	mov	r0, r7
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <_svfiprintf_r+0x1fc>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	f3af 8000 	nop.w
 8006082:	1c42      	adds	r2, r0, #1
 8006084:	4606      	mov	r6, r0
 8006086:	d1d6      	bne.n	8006036 <_svfiprintf_r+0x176>
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	065b      	lsls	r3, r3, #25
 800608c:	f53f af2c 	bmi.w	8005ee8 <_svfiprintf_r+0x28>
 8006090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006092:	b01d      	add	sp, #116	; 0x74
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	ab03      	add	r3, sp, #12
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	462a      	mov	r2, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <_svfiprintf_r+0x1fc>)
 80060a2:	a904      	add	r1, sp, #16
 80060a4:	f7ff fce8 	bl	8005a78 <_printf_i>
 80060a8:	e7eb      	b.n	8006082 <_svfiprintf_r+0x1c2>
 80060aa:	bf00      	nop
 80060ac:	08009148 	.word	0x08009148
 80060b0:	0800914e 	.word	0x0800914e
 80060b4:	08009152 	.word	0x08009152
 80060b8:	00000000 	.word	0x00000000
 80060bc:	08005e0b 	.word	0x08005e0b

080060c0 <_malloc_usable_size_r>:
 80060c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c4:	1f18      	subs	r0, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfbc      	itt	lt
 80060ca:	580b      	ldrlt	r3, [r1, r0]
 80060cc:	18c0      	addlt	r0, r0, r3
 80060ce:	4770      	bx	lr

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr

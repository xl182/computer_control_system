
computer_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030a8  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a39c  0800a39c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a39c  0800a39c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a39c  0800a39c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000074  0800a418  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800a418  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015208  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c7  00000000  00000000  000352a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1ae  00000000  00000000  0003aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e43  00000000  00000000  00056ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1feb  00000000  00000000  00070ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112ad4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f30  00000000  00000000  00112b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	080072dc 	.word	0x080072dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	080072dc 	.word	0x080072dc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fmul>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d06f      	beq.n	8000d28 <__aeabi_fmul+0xf8>
 8000c48:	441a      	add	r2, r3
 8000c4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c4e:	0240      	lsls	r0, r0, #9
 8000c50:	bf18      	it	ne
 8000c52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c56:	d01e      	beq.n	8000c96 <__aeabi_fmul+0x66>
 8000c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c64:	fba0 3101 	umull	r3, r1, r0, r1
 8000c68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c70:	bf3e      	ittt	cc
 8000c72:	0049      	lslcc	r1, r1, #1
 8000c74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c78:	005b      	lslcc	r3, r3, #1
 8000c7a:	ea40 0001 	orr.w	r0, r0, r1
 8000c7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c82:	2afd      	cmp	r2, #253	; 0xfd
 8000c84:	d81d      	bhi.n	8000cc2 <__aeabi_fmul+0x92>
 8000c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c9e:	bf08      	it	eq
 8000ca0:	0249      	lsleq	r1, r1, #9
 8000ca2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000caa:	3a7f      	subs	r2, #127	; 0x7f
 8000cac:	bfc2      	ittt	gt
 8000cae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cb2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb6:	4770      	bxgt	lr
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	dc5d      	bgt.n	8000d80 <__aeabi_fmul+0x150>
 8000cc4:	f112 0f19 	cmn.w	r2, #25
 8000cc8:	bfdc      	itt	le
 8000cca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cce:	4770      	bxle	lr
 8000cd0:	f1c2 0200 	rsb	r2, r2, #0
 8000cd4:	0041      	lsls	r1, r0, #1
 8000cd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cda:	f1c2 0220 	rsb	r2, r2, #32
 8000cde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ce6:	f140 0000 	adc.w	r0, r0, #0
 8000cea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cee:	bf08      	it	eq
 8000cf0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf4:	4770      	bx	lr
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0040      	lsleq	r0, r0, #1
 8000d02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d06:	3a01      	subeq	r2, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xce>
 8000d0a:	ea40 000c 	orr.w	r0, r0, ip
 8000d0e:	f093 0f00 	teq	r3, #0
 8000d12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0049      	lsleq	r1, r1, #1
 8000d1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d1e:	3b01      	subeq	r3, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xe6>
 8000d22:	ea41 010c 	orr.w	r1, r1, ip
 8000d26:	e78f      	b.n	8000c48 <__aeabi_fmul+0x18>
 8000d28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	bf18      	it	ne
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d00a      	beq.n	8000d4e <__aeabi_fmul+0x11e>
 8000d38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d3c:	bf18      	it	ne
 8000d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d42:	d1d8      	bne.n	8000cf6 <__aeabi_fmul+0xc6>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f090 0f00 	teq	r0, #0
 8000d52:	bf17      	itett	ne
 8000d54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d58:	4608      	moveq	r0, r1
 8000d5a:	f091 0f00 	teqne	r1, #0
 8000d5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d62:	d014      	beq.n	8000d8e <__aeabi_fmul+0x15e>
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	d101      	bne.n	8000d6e <__aeabi_fmul+0x13e>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d10f      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d6e:	ea93 0f0c 	teq	r3, ip
 8000d72:	d103      	bne.n	8000d7c <__aeabi_fmul+0x14c>
 8000d74:	024b      	lsls	r3, r1, #9
 8000d76:	bf18      	it	ne
 8000d78:	4608      	movne	r0, r1
 8000d7a:	d108      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8c:	4770      	bx	lr
 8000d8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fdiv>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d069      	beq.n	8000e84 <__aeabi_fdiv+0xec>
 8000db0:	eba2 0203 	sub.w	r2, r2, r3
 8000db4:	ea80 0c01 	eor.w	ip, r0, r1
 8000db8:	0249      	lsls	r1, r1, #9
 8000dba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dbe:	d037      	beq.n	8000e30 <__aeabi_fdiv+0x98>
 8000dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf38      	it	cc
 8000dd4:	005b      	lslcc	r3, r3, #1
 8000dd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dde:	428b      	cmp	r3, r1
 8000de0:	bf24      	itt	cs
 8000de2:	1a5b      	subcs	r3, r3, r1
 8000de4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000de8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dec:	bf24      	itt	cs
 8000dee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000df2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000df6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dfa:	bf24      	itt	cs
 8000dfc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e08:	bf24      	itt	cs
 8000e0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	bf18      	it	ne
 8000e16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e1a:	d1e0      	bne.n	8000dde <__aeabi_fdiv+0x46>
 8000e1c:	2afd      	cmp	r2, #253	; 0xfd
 8000e1e:	f63f af50 	bhi.w	8000cc2 <__aeabi_fmul+0x92>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e28:	bf08      	it	eq
 8000e2a:	f020 0001 	biceq.w	r0, r0, #1
 8000e2e:	4770      	bx	lr
 8000e30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e38:	327f      	adds	r2, #127	; 0x7f
 8000e3a:	bfc2      	ittt	gt
 8000e3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e44:	4770      	bxgt	lr
 8000e46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	e737      	b.n	8000cc2 <__aeabi_fmul+0x92>
 8000e52:	f092 0f00 	teq	r2, #0
 8000e56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0040      	lsleq	r0, r0, #1
 8000e5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e62:	3a01      	subeq	r2, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xc2>
 8000e66:	ea40 000c 	orr.w	r0, r0, ip
 8000e6a:	f093 0f00 	teq	r3, #0
 8000e6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0049      	lsleq	r1, r1, #1
 8000e76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7a:	3b01      	subeq	r3, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xda>
 8000e7e:	ea41 010c 	orr.w	r1, r1, ip
 8000e82:	e795      	b.n	8000db0 <__aeabi_fdiv+0x18>
 8000e84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d108      	bne.n	8000ea0 <__aeabi_fdiv+0x108>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	f47f af7d 	bne.w	8000d8e <__aeabi_fmul+0x15e>
 8000e94:	ea93 0f0c 	teq	r3, ip
 8000e98:	f47f af70 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e776      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ea0:	ea93 0f0c 	teq	r3, ip
 8000ea4:	d104      	bne.n	8000eb0 <__aeabi_fdiv+0x118>
 8000ea6:	024b      	lsls	r3, r1, #9
 8000ea8:	f43f af4c 	beq.w	8000d44 <__aeabi_fmul+0x114>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e76e      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000eb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb4:	bf18      	it	ne
 8000eb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	d1ca      	bne.n	8000e52 <__aeabi_fdiv+0xba>
 8000ebc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec0:	f47f af5c 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000ec4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ec8:	f47f af3c 	bne.w	8000d44 <__aeabi_fmul+0x114>
 8000ecc:	e75f      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ece:	bf00      	nop

08000ed0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <MX_ADC1_Init+0xb8>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000efc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0e:	481d      	ldr	r0, [pc, #116]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f10:	f001 f826 	bl	8001f60 <HAL_ADC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f1a:	f000 fa14 	bl	8001346 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f30:	f001 f900 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fa04 	bl	8001346 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f4c:	f001 f8f2 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 f9f6 	bl	8001346 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_ADC1_Init+0xb4>)
 8000f6c:	f001 f8e2 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f76:	f000 f9e6 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000090 	.word	0x20000090
 8000f88:	40012400 	.word	0x40012400

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a28      	ldr	r2, [pc, #160]	; (8001048 <HAL_ADC_MspInit+0xbc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d149      	bne.n	8001040 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_ADC_MspInit+0xc0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vout_Pin|NTC_Pin|T12_Pin;
 8000fdc:	2346      	movs	r3, #70	; 0x46
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4819      	ldr	r0, [pc, #100]	; (8001050 <HAL_ADC_MspInit+0xc4>)
 8000fec:	f001 ffe8 	bl	8002fc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_ADC_MspInit+0xcc>)
 8000ff4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8001026:	f001 fbd5 	bl	80027d4 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001030:	f000 f989 	bl	8001346 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 8001038:	621a      	str	r2, [r3, #32]
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_ADC_MspInit+0xc8>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012400 	.word	0x40012400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800
 8001054:	200000c0 	.word	0x200000c0
 8001058:	40020008 	.word	0x40020008

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_DMA_Init+0x38>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <MX_DMA_Init+0x38>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_DMA_Init+0x38>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	200b      	movs	r0, #11
 8001080:	f001 fb71 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001084:	200b      	movs	r0, #11
 8001086:	f001 fb8a 	bl	800279e <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ac:	4b70      	ldr	r3, [pc, #448]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a6f      	ldr	r2, [pc, #444]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a69      	ldr	r2, [pc, #420]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b64      	ldr	r3, [pc, #400]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a63      	ldr	r2, [pc, #396]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b61      	ldr	r3, [pc, #388]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a5d      	ldr	r2, [pc, #372]	; (8001270 <MX_GPIO_Init+0x1d8>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <MX_GPIO_Init+0x1d8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b58      	ldr	r3, [pc, #352]	; (8001270 <MX_GPIO_Init+0x1d8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a57      	ldr	r2, [pc, #348]	; (8001270 <MX_GPIO_Init+0x1d8>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b55      	ldr	r3, [pc, #340]	; (8001270 <MX_GPIO_Init+0x1d8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Pin|STATE_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800112a:	4852      	ldr	r0, [pc, #328]	; (8001274 <MX_GPIO_Init+0x1dc>)
 800112c:	f002 f8f3 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001136:	4850      	ldr	r0, [pc, #320]	; (8001278 <MX_GPIO_Init+0x1e0>)
 8001138:	f002 f8ed 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	484e      	ldr	r0, [pc, #312]	; (800127c <MX_GPIO_Init+0x1e4>)
 8001144:	f002 f8e7 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001148:	f643 53ff 	movw	r3, #15871	; 0x3dff
 800114c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4619      	mov	r1, r3
 8001158:	4846      	ldr	r0, [pc, #280]	; (8001274 <MX_GPIO_Init+0x1dc>)
 800115a:	f001 ff31 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10
 800115e:	f643 4330 	movw	r3, #15408	; 0x3c30
 8001162:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4619      	mov	r1, r3
 800116e:	4844      	ldr	r0, [pc, #272]	; (8001280 <MX_GPIO_Init+0x1e8>)
 8001170:	f001 ff26 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SW_Pin|A_Pin|B_Pin|key_Pin;
 8001174:	230f      	movs	r3, #15
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_GPIO_Init+0x1ec>)
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4619      	mov	r1, r3
 8001186:	483e      	ldr	r0, [pc, #248]	; (8001280 <MX_GPIO_Init+0x1e8>)
 8001188:	f001 ff1a 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 800118c:	f649 13b8 	movw	r3, #39352	; 0x99b8
 8001190:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4619      	mov	r1, r3
 800119c:	483a      	ldr	r0, [pc, #232]	; (8001288 <MX_GPIO_Init+0x1f0>)
 800119e:	f001 ff0f 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80011a2:	f241 13ff 	movw	r3, #4607	; 0x11ff
 80011a6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4832      	ldr	r0, [pc, #200]	; (800127c <MX_GPIO_Init+0x1e4>)
 80011b4:	f001 ff04 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_Pin|STATE_Pin;
 80011b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2302      	movs	r3, #2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4828      	ldr	r0, [pc, #160]	; (8001274 <MX_GPIO_Init+0x1dc>)
 80011d2:	f001 fef5 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin;
 80011d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4822      	ldr	r0, [pc, #136]	; (8001278 <MX_GPIO_Init+0x1e0>)
 80011f0:	f001 fee6 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011f4:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80011f8:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	4619      	mov	r1, r3
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <MX_GPIO_Init+0x1e0>)
 8001206:	f001 fedb 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800120a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4619      	mov	r1, r3
 8001222:	4816      	ldr	r0, [pc, #88]	; (800127c <MX_GPIO_Init+0x1e4>)
 8001224:	f001 fecc 	bl	8002fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2006      	movs	r0, #6
 800122e:	f001 fa9a 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001232:	2006      	movs	r0, #6
 8001234:	f001 fab3 	bl	800279e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2007      	movs	r0, #7
 800123e:	f001 fa92 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001242:	2007      	movs	r0, #7
 8001244:	f001 faab 	bl	800279e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2008      	movs	r0, #8
 800124e:	f001 fa8a 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001252:	2008      	movs	r0, #8
 8001254:	f001 faa3 	bl	800279e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2009      	movs	r0, #9
 800125e:	f001 fa82 	bl	8002766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001262:	2009      	movs	r0, #9
 8001264:	f001 fa9b 	bl	800279e <HAL_NVIC_EnableIRQ>

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40011800 	.word	0x40011800
 8001278:	40011400 	.word	0x40011400
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	10210000 	.word	0x10210000
 8001288:	40010800 	.word	0x40010800

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b096      	sub	sp, #88	; 0x58
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001296:	2228      	movs	r2, #40	; 0x28
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fb9e 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ce:	2301      	movs	r3, #1
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d2:	2302      	movs	r3, #2
 80012d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 f85e 	bl	80033a8 <HAL_RCC_OscConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012f2:	f000 f828 	bl	8001346 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	230f      	movs	r3, #15
 80012f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	2102      	movs	r1, #2
 8001312:	4618      	mov	r0, r3
 8001314:	f002 faca 	bl	80038ac <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800131e:	f000 f812 	bl	8001346 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001322:	2302      	movs	r3, #2
 8001324:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fc4a 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800133a:	f000 f804 	bl	8001346 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3758      	adds	r7, #88	; 0x58
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134a:	b672      	cpsid	i
}
 800134c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134e:	e7fe      	b.n	800134e <Error_Handler+0x8>

08001350 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <MX_SPI2_Init+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_SPI2_Init+0x64>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_SPI2_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_SPI2_Init+0x64>)
 800137c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001380:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_SPI2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_SPI2_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_SPI2_Init+0x64>)
 800139c:	220a      	movs	r2, #10
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_SPI2_Init+0x64>)
 80013a2:	f002 fd9f 	bl	8003ee4 <HAL_SPI_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013ac:	f7ff ffcb 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000104 	.word	0x20000104
 80013b8:	40003800 	.word	0x40003800

080013bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <HAL_SPI_MspInit+0x8c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d131      	bne.n	8001440 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_SPI_MspInit+0x90>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_SPI_MspInit+0x90>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	61d3      	str	r3, [r2, #28]
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_SPI_MspInit+0x90>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_SPI_MspInit+0x90>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_SPI_MspInit+0x90>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_SPI_MspInit+0x90>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800140c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <HAL_SPI_MspInit+0x94>)
 8001422:	f001 fdcd 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_SPI_MspInit+0x94>)
 800143c:	f001 fdc0 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40003800 	.word	0x40003800
 800144c:	40021000 	.word	0x40021000
 8001450:	40010c00 	.word	0x40010c00

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_MspInit+0x5c>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6193      	str	r3, [r2, #24]
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_MspInit+0x5c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x5c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_MspInit+0x60>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_MspInit+0x60>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000

080014b8 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void) {
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void) {
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void) {
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void) {
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80014fe:	f000 fcef 	bl	8001ee0 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}

08001506 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void) {
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI0_IRQn 0 */

    /* USER CODE END EXTI0_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 800150a:	2001      	movs	r0, #1
 800150c:	f001 ff34 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI0_IRQn 1 */

    /* USER CODE END EXTI0_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI1_IRQn 0 */

    /* USER CODE END EXTI1_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(A_Pin);
 8001518:	2002      	movs	r0, #2
 800151a:	f001 ff2d 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI1_IRQn 1 */

    /* USER CODE END EXTI1_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void) {
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_IRQn 0 */

    /* USER CODE END EXTI2_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(B_Pin);
 8001526:	2004      	movs	r0, #4
 8001528:	f001 ff26 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI2_IRQn 1 */

    /* USER CODE END EXTI2_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(key_Pin);
 8001534:	2008      	movs	r0, #8
 8001536:	f001 ff1f 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI3_IRQn 1 */

    /* USER CODE END EXTI3_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

    /* USER CODE END DMA1_Channel1_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Channel1_IRQHandler+0x10>)
 8001546:	f001 faff 	bl	8002b48 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

    /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000c0 	.word	0x200000c0

08001554 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_IRQn 0 */

    /* USER CODE END TIM4_IRQn 0 */
    HAL_TIM_IRQHandler(&htim4);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM4_IRQHandler+0x10>)
 800155a:	f002 ff01 	bl	8004360 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM4_IRQn 1 */

    /* USER CODE END TIM4_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001f0 	.word	0x200001f0

08001568 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART1_IRQHandler+0x10>)
 800156e:	f003 fe55 	bl	800521c <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002c8 	.word	0x200002c8

0800157c <USART3_IRQHandler>:


void USART3_IRQHandler(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART3_IRQn 0 */
    /* USER CODE END USART3_IRQn 0 */
    HAL_UART_IRQHandler(&huart3);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART3_IRQHandler+0x10>)
 8001582:	f003 fe4b 	bl	800521c <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART3_IRQn 1 */

    /* USER CODE END USART3_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000310 	.word	0x20000310

08001590 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM6_IRQn 0 */

    /* USER CODE END TIM6_IRQn 0 */
    HAL_TIM_IRQHandler(&htim6);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM6_IRQHandler+0x10>)
 8001596:	f002 fee3 	bl	8004360 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM6_IRQn 1 */

    /* USER CODE END TIM6_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000238 	.word	0x20000238

080015a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM7_IRQHandler+0x10>)
 80015aa:	f002 fed9 	bl	8004360 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000280 	.word	0x20000280

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f005 f9ce 	bl	8006988 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000c000 	.word	0x2000c000
 8001618:	00000400 	.word	0x00000400
 800161c:	2000015c 	.word	0x2000015c
 8001620:	200004e8 	.word	0x200004e8

08001624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b092      	sub	sp, #72	; 0x48
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 f9be 	bl	80069dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <MX_TIM1_Init+0xfc>)
 8001662:	4a33      	ldr	r2, [pc, #204]	; (8001730 <MX_TIM1_Init+0x100>)
 8001664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <MX_TIM1_Init+0xfc>)
 8001668:	2247      	movs	r2, #71	; 0x47
 800166a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MX_TIM1_Init+0xfc>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <MX_TIM1_Init+0xfc>)
 8001674:	2263      	movs	r2, #99	; 0x63
 8001676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <MX_TIM1_Init+0xfc>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <MX_TIM1_Init+0xfc>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <MX_TIM1_Init+0xfc>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800168a:	4828      	ldr	r0, [pc, #160]	; (800172c <MX_TIM1_Init+0xfc>)
 800168c:	f002 fd5e 	bl	800414c <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001696:	f7ff fe56 	bl	8001346 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a6:	4619      	mov	r1, r3
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <MX_TIM1_Init+0xfc>)
 80016aa:	f003 fbef 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80016b4:	f7ff fe47 	bl	8001346 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	; (800172c <MX_TIM1_Init+0xfc>)
 80016de:	f002 ff47 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80016e8:	f7ff fe2d 	bl	8001346 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001704:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM1_Init+0xfc>)
 8001710:	f003 fc28 	bl	8004f64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800171a:	f7ff fe14 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM1_Init+0xfc>)
 8001720:	f000 f9cc 	bl	8001abc <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3748      	adds	r7, #72	; 0x48
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000160 	.word	0x20000160
 8001730:	40012c00 	.word	0x40012c00

08001734 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_TIM3_Init+0xec>)
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <MX_TIM3_Init+0xf0>)
 800175a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <MX_TIM3_Init+0xec>)
 800175e:	2247      	movs	r2, #71	; 0x47
 8001760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <MX_TIM3_Init+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <MX_TIM3_Init+0xec>)
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_TIM3_Init+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <MX_TIM3_Init+0xec>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177a:	4829      	ldr	r0, [pc, #164]	; (8001820 <MX_TIM3_Init+0xec>)
 800177c:	f002 fce6 	bl	800414c <HAL_TIM_PWM_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001786:	f7ff fdde 	bl	8001346 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4619      	mov	r1, r3
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <MX_TIM3_Init+0xec>)
 800179a:	f003 fb77 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017a4:	f7ff fdcf 	bl	8001346 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a8:	2360      	movs	r3, #96	; 0x60
 80017aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_TIM3_Init+0xec>)
 80017c0:	f002 fed6 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017ca:	f7ff fdbc 	bl	8001346 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2204      	movs	r2, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4812      	ldr	r0, [pc, #72]	; (8001820 <MX_TIM3_Init+0xec>)
 80017d6:	f002 fecb 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017e0:	f7ff fdb1 	bl	8001346 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2208      	movs	r2, #8
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_TIM3_Init+0xec>)
 80017ec:	f002 fec0 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80017f6:	f7ff fda6 	bl	8001346 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	220c      	movs	r2, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM3_Init+0xec>)
 8001802:	f002 feb5 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800180c:	f7ff fd9b 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM3_Init+0xec>)
 8001812:	f000 f953 	bl	8001abc <HAL_TIM_MspPostInit>

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001a8 	.word	0x200001a8
 8001824:	40000400 	.word	0x40000400

08001828 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM4_Init+0x94>)
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <MX_TIM4_Init+0x98>)
 8001848:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_TIM4_Init+0x94>)
 800184c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_TIM4_Init+0x94>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_TIM4_Init+0x94>)
 800185a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM4_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_TIM4_Init+0x94>)
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_TIM4_Init+0x94>)
 800186e:	f002 fbbd 	bl	8003fec <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001878:	f7ff fd65 	bl	8001346 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_TIM4_Init+0x94>)
 800188a:	f002 ff33 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001894:	f7ff fd57 	bl	8001346 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_TIM4_Init+0x94>)
 80018a6:	f003 faf1 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f7ff fd49 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200001f0 	.word	0x200001f0
 80018c0:	40000800 	.word	0x40000800

080018c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_TIM6_Init+0x64>)
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <MX_TIM6_Init+0x68>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_TIM6_Init+0x64>)
 80018da:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_TIM6_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_TIM6_Init+0x64>)
 80018e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_TIM6_Init+0x64>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_TIM6_Init+0x64>)
 80018f6:	f002 fb79 	bl	8003fec <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001900:	f7ff fd21 	bl	8001346 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_TIM6_Init+0x64>)
 8001912:	f003 fabb 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800191c:	f7ff fd13 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000238 	.word	0x20000238
 800192c:	40001000 	.word	0x40001000

08001930 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM7_Init+0x64>)
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <MX_TIM7_Init+0x68>)
 8001942:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_TIM7_Init+0x64>)
 8001946:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800194a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_TIM7_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_TIM7_Init+0x64>)
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_TIM7_Init+0x64>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM7_Init+0x64>)
 8001962:	f002 fb43 	bl	8003fec <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800196c:	f7ff fceb 	bl	8001346 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM7_Init+0x64>)
 800197e:	f003 fa85 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001988:	f7ff fcdd 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000280 	.word	0x20000280
 8001998:	40001400 	.word	0x40001400

0800199c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_TIM_PWM_MspInit+0x58>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10c      	bne.n	80019c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019c6:	e010      	b.n	80019ea <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_TIM_PWM_MspInit+0x60>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10b      	bne.n	80019ea <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_TIM_PWM_MspInit+0x5c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40000400 	.word	0x40000400

08001a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_TIM_Base_MspInit+0xac>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d114      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	201e      	movs	r0, #30
 8001a30:	f000 fe99 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a34:	201e      	movs	r0, #30
 8001a36:	f000 feb2 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a3a:	e032      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_TIM_Base_MspInit+0xb4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d114      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2036      	movs	r0, #54	; 0x36
 8001a64:	f000 fe7f 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001a68:	2036      	movs	r0, #54	; 0x36
 8001a6a:	f000 fe98 	bl	800279e <HAL_NVIC_EnableIRQ>
}
 8001a6e:	e018      	b.n	8001aa2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a80:	f043 0320 	orr.w	r3, r3, #32
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2037      	movs	r0, #55	; 0x37
 8001a98:	f000 fe65 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a9c:	2037      	movs	r0, #55	; 0x37
 8001a9e:	f000 fe7e 	bl	800279e <HAL_NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40001000 	.word	0x40001000
 8001ab8:	40001400 	.word	0x40001400

08001abc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <HAL_TIM_MspPostInit+0xe0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d12b      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = T12_CTRL_Pin;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(T12_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <HAL_TIM_MspPostInit+0xe8>)
 8001b0a:	f001 fa59 	bl	8002fc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_TIM_MspPostInit+0xec>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_TIM_MspPostInit+0xec>)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b32:	e02f      	b.n	8001b94 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_TIM_MspPostInit+0xf0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12a      	bne.n	8001b94 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_MspPostInit+0xe4>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = R_Pin|G_Pin|BC8_Pin|Buzzer_Pin;
 8001b56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <HAL_TIM_MspPostInit+0xf4>)
 8001b6c:	f001 fa28 	bl	8002fc0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_TIM_MspPostInit+0xec>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_TIM_MspPostInit+0xec>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	6053      	str	r3, [r2, #4]
}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40011800 	.word	0x40011800
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40011000 	.word	0x40011000

08001bb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART1_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bec:	f003 fa1d 	bl	800502a <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001bf6:	f7ff fba6 	bl	8001346 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002c8 	.word	0x200002c8
 8001c04:	40013800 	.word	0x40013800

08001c08 <MX_USART3_UART_Init>:

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART3_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c40:	f003 f9f3 	bl	800502a <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8001c4a:	f7ff fb7c 	bl	8001346 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000310 	.word	0x20000310
 8001c58:	40004800 	.word	0x40004800

08001c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
    if (uartHandle->Instance == USART1) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <HAL_UART_MspInit+0x11c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d13a      	bne.n	8001cf2 <HAL_UART_MspInit+0x96>
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = TXD_Pin;
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482f      	ldr	r0, [pc, #188]	; (8001d80 <HAL_UART_MspInit+0x124>)
 8001cc2:	f001 f97d 	bl	8002fc0 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = RXD_Pin;
 8001cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(RXD_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4829      	ldr	r0, [pc, #164]	; (8001d80 <HAL_UART_MspInit+0x124>)
 8001cdc:	f001 f970 	bl	8002fc0 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2025      	movs	r0, #37	; 0x25
 8001ce6:	f000 fd3e 	bl	8002766 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cea:	2025      	movs	r0, #37	; 0x25
 8001cec:	f000 fd57 	bl	800279e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
        /* USER CODE BEGIN USART3_MspInit 1 */

        /* USER CODE END USART3_MspInit 1 */
    }
}
 8001cf0:	e03e      	b.n	8001d70 <HAL_UART_MspInit+0x114>
    } else if (uartHandle->Instance == USART3) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_UART_MspInit+0x128>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d139      	bne.n	8001d70 <HAL_UART_MspInit+0x114>
        __HAL_RCC_USART3_CLK_ENABLE();
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_MspInit+0x120>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = Bluetooth_TX_Pin;
 8001d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(Bluetooth_TX_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0318 	add.w	r3, r7, #24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4811      	ldr	r0, [pc, #68]	; (8001d88 <HAL_UART_MspInit+0x12c>)
 8001d42:	f001 f93d 	bl	8002fc0 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Bluetooth_RX_Pin;
 8001d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(Bluetooth_RX_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_UART_MspInit+0x12c>)
 8001d5c:	f001 f930 	bl	8002fc0 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2027      	movs	r0, #39	; 0x27
 8001d66:	f000 fcfe 	bl	8002766 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d6a:	2027      	movs	r0, #39	; 0x27
 8001d6c:	f000 fd17 	bl	800279e <HAL_NVIC_EnableIRQ>
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40004800 	.word	0x40004800
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff fc4a 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d92:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001da8:	4c09      	ldr	r4, [pc, #36]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f004 fded 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dba:	f004 fddf 	bl	800697c <main>
  bx lr
 8001dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dc8:	0800a3a4 	.word	0x0800a3a4
  ldr r2, =_sbss
 8001dcc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dd0:	200004e8 	.word	0x200004e8

08001dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_2_IRQHandler>

08001dd6 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8001dd6:	b590      	push	{r4, r7, lr}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7fe fe18 	bl	8000a20 <__addsf3>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f7fe fe10 	bl	8000a20 <__addsf3>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe02 	bl	8000a20 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7fe fdfb 	bl	8000a1c <__aeabi_fsub>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1a      	ldr	r2, [r3, #32]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <arm_pid_init_f32+0x74>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	220c      	movs	r2, #12
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fdc9 	bl	80069dc <memset>
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x28>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x28>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 fc73 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff faf0 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fc8b 	bl	80027ba <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 fc53 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x1c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x20>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_IncTick+0x20>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000358 	.word	0x20000358

08001f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_GetTick+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000358 	.word	0x20000358

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffe0 	bl	8001f04 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0ce      	b.n	8002120 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fff4 	bl	8000f8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fa17 	bl	80023d8 <ADC_ConversionStop_Disable>
 8001faa:	4603      	mov	r3, r0
 8001fac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 80a9 	bne.w	800210e <HAL_ADC_Init+0x1ae>
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80a5 	bne.w	800210e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fcc:	f023 0302 	bic.w	r3, r3, #2
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4951      	ldr	r1, [pc, #324]	; (8002128 <HAL_ADC_Init+0x1c8>)
 8001fe2:	428b      	cmp	r3, r1
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_Init+0x9c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_Init+0x96>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_Init+0xa0>
 8001ff6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ffa:	e001      	b.n	8002000 <HAL_ADC_Init+0xa0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002000:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7b1b      	ldrb	r3, [r3, #12]
 8002006:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002008:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4313      	orrs	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002018:	d003      	beq.n	8002022 <HAL_ADC_Init+0xc2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_ADC_Init+0xc8>
 8002022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002026:	e000      	b.n	800202a <HAL_ADC_Init+0xca>
 8002028:	2300      	movs	r3, #0
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7d1b      	ldrb	r3, [r3, #20]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d119      	bne.n	800206c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7b1b      	ldrb	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	3b01      	subs	r3, #1
 8002046:	035a      	lsls	r2, r3, #13
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e00b      	b.n	800206c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_ADC_Init+0x1cc>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	430b      	orrs	r3, r1
 8002092:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209c:	d003      	beq.n	80020a6 <HAL_ADC_Init+0x146>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d104      	bne.n	80020b0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	051b      	lsls	r3, r3, #20
 80020ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_ADC_Init+0x1d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10b      	bne.n	80020ec <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ea:	e018      	b.n	800211e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f023 0312 	bic.w	r3, r3, #18
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800210c:	e007      	b.n	800211e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40013c00 	.word	0x40013c00
 800212c:	ffe1f7fd 	.word	0xffe1f7fd
 8002130:	ff1f0efe 	.word	0xff1f0efe

08002134 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x20>
 8002150:	2302      	movs	r3, #2
 8002152:	e0dc      	b.n	800230e <HAL_ADC_ConfigChannel+0x1da>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d81c      	bhi.n	800219e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b05      	subs	r3, #5
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b05      	subs	r3, #5
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	635a      	str	r2, [r3, #52]	; 0x34
 800219c:	e03c      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d81c      	bhi.n	80021e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	3b23      	subs	r3, #35	; 0x23
 80021b8:	221f      	movs	r2, #31
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	4019      	ands	r1, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b23      	subs	r3, #35	; 0x23
 80021d2:	fa00 f203 	lsl.w	r2, r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
 80021de:	e01b      	b.n	8002218 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	; 0x41
 80021f2:	221f      	movs	r2, #31
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4019      	ands	r1, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	; 0x41
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d91c      	bls.n	800225a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	3b1e      	subs	r3, #30
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6898      	ldr	r0, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	3b1e      	subs	r3, #30
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	e019      	b.n	800228e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6919      	ldr	r1, [r3, #16]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b10      	cmp	r3, #16
 8002294:	d003      	beq.n	800229e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800229a:	2b11      	cmp	r3, #17
 800229c:	d132      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_ADC_ConfigChannel+0x1e4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d125      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d126      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d11a      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_ADC_ConfigChannel+0x1e8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_ADC_ConfigChannel+0x1ec>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9a      	lsrs	r2, r3, #18
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e4:	e002      	b.n	80022ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x1b2>
 80022f2:	e007      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40012400 	.word	0x40012400
 800231c:	20000000 	.word	0x20000000
 8002320:	431bde83 	.word	0x431bde83

08002324 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d040      	beq.n	80023c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <ADC_Enable+0xac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <ADC_Enable+0xb0>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002360:	e002      	b.n	8002368 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800236e:	f7ff fdc9 	bl	8001f04 <HAL_GetTick>
 8002372:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002374:	e01f      	b.n	80023b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002376:	f7ff fdc5 	bl	8001f04 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d918      	bls.n	80023b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d011      	beq.n	80023b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e007      	b.n	80023c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d1d8      	bne.n	8002376 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d12e      	bne.n	8002450 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002402:	f7ff fd7f 	bl	8001f04 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002408:	e01b      	b.n	8002442 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800240a:	f7ff fd7b 	bl	8001f04 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d914      	bls.n	8002442 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10d      	bne.n	8002442 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e007      	b.n	8002452 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d0dc      	beq.n	800240a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADCEx_Calibration_Start+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e097      	b.n	80025aa <HAL_ADCEx_Calibration_Start+0x14e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa8 	bl	80023d8 <ADC_ConversionStop_Disable>
 8002488:	4603      	mov	r3, r0
 800248a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff49 	bl	8002324 <ADC_Enable>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 8081 	bne.w	80025a0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024a6:	f023 0302 	bic.w	r3, r3, #2
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_ADCEx_Calibration_Start+0x158>)
 80024b4:	681c      	ldr	r4, [r3, #0]
 80024b6:	2002      	movs	r0, #2
 80024b8:	f001 fc3c 	bl	8003d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80024bc:	4603      	mov	r3, r0
 80024be:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80024c2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80024c4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80024c6:	e002      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0208 	orr.w	r2, r2, #8
 80024e2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80024e4:	f7ff fd0e 	bl	8001f04 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024ea:	e01b      	b.n	8002524 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024ec:	f7ff fd0a 	bl	8001f04 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d914      	bls.n	8002524 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f023 0312 	bic.w	r3, r3, #18
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e042      	b.n	80025aa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1dc      	bne.n	80024ec <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0204 	orr.w	r2, r2, #4
 8002540:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002542:	f7ff fcdf 	bl	8001f04 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002548:	e01b      	b.n	8002582 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800254a:	f7ff fcdb 	bl	8001f04 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b0a      	cmp	r3, #10
 8002556:	d914      	bls.n	8002582 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f023 0312 	bic.w	r3, r3, #18
 800256e:	f043 0210 	orr.w	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e013      	b.n	80025aa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1dc      	bne.n	800254a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f023 0303 	bic.w	r3, r3, #3
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <__NVIC_EnableIRQ+0x34>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff90 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff2d 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff42 	bl	8002600 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff90 	bl	80026a8 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5f 	bl	8002654 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff35 	bl	800261c <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e059      	b.n	800289e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_DMA_Init+0xd4>)
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d80f      	bhi.n	8002816 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_DMA_Init+0xd8>)
 80027fe:	4413      	add	r3, r2
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_DMA_Init+0xdc>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_DMA_Init+0xe0>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
 8002814:	e00e      	b.n	8002834 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_DMA_Init+0xe4>)
 800281e:	4413      	add	r3, r2
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_DMA_Init+0xdc>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_DMA_Init+0xe8>)
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800284a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800284e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40020407 	.word	0x40020407
 80028ac:	bffdfff8 	.word	0xbffdfff8
 80028b0:	cccccccd 	.word	0xcccccccd
 80028b4:	40020000 	.word	0x40020000
 80028b8:	bffdfbf8 	.word	0xbffdfbf8
 80028bc:	40020400 	.word	0x40020400

080028c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d008      	beq.n	80028ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2204      	movs	r2, #4
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e020      	b.n	800292c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020e 	bic.w	r2, r2, #14
 80028f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d005      	beq.n	800295c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e0d6      	b.n	8002b0a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b64      	ldr	r3, [pc, #400]	; (8002b14 <HAL_DMA_Abort_IT+0x1dc>)
 8002984:	429a      	cmp	r2, r3
 8002986:	d958      	bls.n	8002a3a <HAL_DMA_Abort_IT+0x102>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a62      	ldr	r2, [pc, #392]	; (8002b18 <HAL_DMA_Abort_IT+0x1e0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04f      	beq.n	8002a32 <HAL_DMA_Abort_IT+0xfa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a61      	ldr	r2, [pc, #388]	; (8002b1c <HAL_DMA_Abort_IT+0x1e4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d048      	beq.n	8002a2e <HAL_DMA_Abort_IT+0xf6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5f      	ldr	r2, [pc, #380]	; (8002b20 <HAL_DMA_Abort_IT+0x1e8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d040      	beq.n	8002a28 <HAL_DMA_Abort_IT+0xf0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5e      	ldr	r2, [pc, #376]	; (8002b24 <HAL_DMA_Abort_IT+0x1ec>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d038      	beq.n	8002a22 <HAL_DMA_Abort_IT+0xea>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5c      	ldr	r2, [pc, #368]	; (8002b28 <HAL_DMA_Abort_IT+0x1f0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d030      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xe4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_DMA_Abort_IT+0x1f4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d028      	beq.n	8002a16 <HAL_DMA_Abort_IT+0xde>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_DMA_Abort_IT+0x1dc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d020      	beq.n	8002a10 <HAL_DMA_Abort_IT+0xd8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_DMA_Abort_IT+0x1f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d019      	beq.n	8002a0c <HAL_DMA_Abort_IT+0xd4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_DMA_Abort_IT+0x1fc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d012      	beq.n	8002a08 <HAL_DMA_Abort_IT+0xd0>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_DMA_Abort_IT+0x200>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00a      	beq.n	8002a02 <HAL_DMA_Abort_IT+0xca>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_DMA_Abort_IT+0x204>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d102      	bne.n	80029fc <HAL_DMA_Abort_IT+0xc4>
 80029f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fa:	e01b      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 80029fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a00:	e018      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a06:	e015      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	e013      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e011      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a14:	e00e      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a1a:	e00b      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a20:	e008      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a26:	e005      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2c:	e002      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a2e:	2310      	movs	r3, #16
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Abort_IT+0xfc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <HAL_DMA_Abort_IT+0x208>)
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	e057      	b.n	8002aea <HAL_DMA_Abort_IT+0x1b2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <HAL_DMA_Abort_IT+0x1e0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d04f      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0x1ac>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <HAL_DMA_Abort_IT+0x1e4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d048      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0x1a8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <HAL_DMA_Abort_IT+0x1e8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d040      	beq.n	8002ada <HAL_DMA_Abort_IT+0x1a2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_DMA_Abort_IT+0x1ec>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d038      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x19c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a30      	ldr	r2, [pc, #192]	; (8002b28 <HAL_DMA_Abort_IT+0x1f0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d030      	beq.n	8002ace <HAL_DMA_Abort_IT+0x196>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <HAL_DMA_Abort_IT+0x1f4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d028      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x190>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <HAL_DMA_Abort_IT+0x1dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d020      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x18a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <HAL_DMA_Abort_IT+0x1f8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_DMA_Abort_IT+0x186>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_DMA_Abort_IT+0x1fc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d012      	beq.n	8002aba <HAL_DMA_Abort_IT+0x182>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <HAL_DMA_Abort_IT+0x200>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x17c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_DMA_Abort_IT+0x204>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d102      	bne.n	8002aae <HAL_DMA_Abort_IT+0x176>
 8002aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aac:	e01b      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab2:	e018      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab8:	e015      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002aba:	2310      	movs	r3, #16
 8002abc:	e013      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e011      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac6:	e00e      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002acc:	e00b      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad2:	e008      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	e005      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ade:	e002      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_Abort_IT+0x1ae>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_DMA_Abort_IT+0x20c>)
 8002ae8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
    } 
  }
  return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020080 	.word	0x40020080
 8002b18:	40020008 	.word	0x40020008
 8002b1c:	4002001c 	.word	0x4002001c
 8002b20:	40020030 	.word	0x40020030
 8002b24:	40020044 	.word	0x40020044
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	4002006c 	.word	0x4002006c
 8002b30:	40020408 	.word	0x40020408
 8002b34:	4002041c 	.word	0x4002041c
 8002b38:	40020430 	.word	0x40020430
 8002b3c:	40020444 	.word	0x40020444
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020000 	.word	0x40020000

08002b48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2204      	movs	r2, #4
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80f1 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x20c>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80eb 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0204 	bic.w	r2, r2, #4
 8002b9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_DMA_IRQHandler+0x1d8>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d958      	bls.n	8002c5a <HAL_DMA_IRQHandler+0x112>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_DMA_IRQHandler+0x1dc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04f      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x10a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_DMA_IRQHandler+0x1e0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d048      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x106>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <HAL_DMA_IRQHandler+0x1e4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d040      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x100>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <HAL_DMA_IRQHandler+0x1e8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d038      	beq.n	8002c42 <HAL_DMA_IRQHandler+0xfa>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_DMA_IRQHandler+0x1ec>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d030      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xf4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_DMA_IRQHandler+0x1f0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d028      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xee>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <HAL_DMA_IRQHandler+0x1d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d020      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xe8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_DMA_IRQHandler+0x1f4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d019      	beq.n	8002c2c <HAL_DMA_IRQHandler+0xe4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_DMA_IRQHandler+0x1f8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d012      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xe0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_DMA_IRQHandler+0x1fc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00a      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xda>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_DMA_IRQHandler+0x200>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_IRQHandler+0xd4>
 8002c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c1a:	e01b      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c20:	e018      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c26:	e015      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c28:	2340      	movs	r3, #64	; 0x40
 8002c2a:	e013      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e011      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c34:	e00e      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3a:	e00b      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c40:	e008      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c46:	e005      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4c:	e002      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c4e:	2340      	movs	r3, #64	; 0x40
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_IRQHandler+0x10c>
 8002c52:	2304      	movs	r3, #4
 8002c54:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <HAL_DMA_IRQHandler+0x204>)
 8002c56:	6053      	str	r3, [r2, #4]
 8002c58:	e057      	b.n	8002d0a <HAL_DMA_IRQHandler+0x1c2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <HAL_DMA_IRQHandler+0x1dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d04f      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x1bc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_DMA_IRQHandler+0x1e0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d048      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x1b8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_DMA_IRQHandler+0x1e4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d040      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x1b2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_DMA_IRQHandler+0x1e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d038      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x1ac>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <HAL_DMA_IRQHandler+0x1ec>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d030      	beq.n	8002cee <HAL_DMA_IRQHandler+0x1a6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_DMA_IRQHandler+0x1f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d028      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x1a0>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_DMA_IRQHandler+0x1d8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d020      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x19a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_DMA_IRQHandler+0x1f4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_DMA_IRQHandler+0x196>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_DMA_IRQHandler+0x1f8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d012      	beq.n	8002cda <HAL_DMA_IRQHandler+0x192>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_IRQHandler+0x1fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x18c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_DMA_IRQHandler+0x200>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_DMA_IRQHandler+0x186>
 8002cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ccc:	e01b      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cd2:	e018      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd8:	e015      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	e013      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e011      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ce6:	e00e      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cec:	e00b      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cf2:	e008      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cf8:	e005      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cfe:	e002      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002d00:	2340      	movs	r3, #64	; 0x40
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x1be>
 8002d04:	2304      	movs	r3, #4
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_DMA_IRQHandler+0x208>)
 8002d08:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8136 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	e130      	b.n	8002f80 <HAL_DMA_IRQHandler+0x438>
 8002d1e:	bf00      	nop
 8002d20:	40020080 	.word	0x40020080
 8002d24:	40020008 	.word	0x40020008
 8002d28:	4002001c 	.word	0x4002001c
 8002d2c:	40020030 	.word	0x40020030
 8002d30:	40020044 	.word	0x40020044
 8002d34:	40020058 	.word	0x40020058
 8002d38:	4002006c 	.word	0x4002006c
 8002d3c:	40020408 	.word	0x40020408
 8002d40:	4002041c 	.word	0x4002041c
 8002d44:	40020430 	.word	0x40020430
 8002d48:	40020444 	.word	0x40020444
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2202      	movs	r2, #2
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80dd 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x3d8>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80d7 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 020a 	bic.w	r2, r2, #10
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_DMA_IRQHandler+0x444>)
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d958      	bls.n	8002e56 <HAL_DMA_IRQHandler+0x30e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a79      	ldr	r2, [pc, #484]	; (8002f90 <HAL_DMA_IRQHandler+0x448>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04f      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x306>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a78      	ldr	r2, [pc, #480]	; (8002f94 <HAL_DMA_IRQHandler+0x44c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d048      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x302>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <HAL_DMA_IRQHandler+0x450>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d040      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x2fc>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_DMA_IRQHandler+0x454>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d038      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2f6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a73      	ldr	r2, [pc, #460]	; (8002fa0 <HAL_DMA_IRQHandler+0x458>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d030      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2f0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a72      	ldr	r2, [pc, #456]	; (8002fa4 <HAL_DMA_IRQHandler+0x45c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d028      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x2ea>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <HAL_DMA_IRQHandler+0x444>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d020      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x2e4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6e      	ldr	r2, [pc, #440]	; (8002fa8 <HAL_DMA_IRQHandler+0x460>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d019      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2e0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_DMA_IRQHandler+0x464>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d012      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x2dc>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6b      	ldr	r2, [pc, #428]	; (8002fb0 <HAL_DMA_IRQHandler+0x468>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00a      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x2d6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_DMA_IRQHandler+0x46c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d102      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x2d0>
 8002e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e16:	e01b      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	e018      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e22:	e015      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e24:	2320      	movs	r3, #32
 8002e26:	e013      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e011      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e30:	e00e      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e36:	e00b      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	e008      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e42:	e005      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e48:	e002      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0x308>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	4a59      	ldr	r2, [pc, #356]	; (8002fb8 <HAL_DMA_IRQHandler+0x470>)
 8002e52:	6053      	str	r3, [r2, #4]
 8002e54:	e057      	b.n	8002f06 <HAL_DMA_IRQHandler+0x3be>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_DMA_IRQHandler+0x448>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04f      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x3b8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_DMA_IRQHandler+0x44c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d048      	beq.n	8002efc <HAL_DMA_IRQHandler+0x3b4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4a      	ldr	r2, [pc, #296]	; (8002f98 <HAL_DMA_IRQHandler+0x450>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x3ae>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_DMA_IRQHandler+0x454>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d038      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x3a8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <HAL_DMA_IRQHandler+0x458>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d030      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3a2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a45      	ldr	r2, [pc, #276]	; (8002fa4 <HAL_DMA_IRQHandler+0x45c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d028      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x39c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <HAL_DMA_IRQHandler+0x444>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d020      	beq.n	8002ede <HAL_DMA_IRQHandler+0x396>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a41      	ldr	r2, [pc, #260]	; (8002fa8 <HAL_DMA_IRQHandler+0x460>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d019      	beq.n	8002eda <HAL_DMA_IRQHandler+0x392>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a40      	ldr	r2, [pc, #256]	; (8002fac <HAL_DMA_IRQHandler+0x464>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d012      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x38e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3e      	ldr	r2, [pc, #248]	; (8002fb0 <HAL_DMA_IRQHandler+0x468>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x388>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_DMA_IRQHandler+0x46c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d102      	bne.n	8002eca <HAL_DMA_IRQHandler+0x382>
 8002ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec8:	e01b      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ece:	e018      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed4:	e015      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e013      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e011      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee2:	e00e      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ee8:	e00b      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eee:	e008      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef4:	e005      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efa:	e002      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002efc:	2320      	movs	r3, #32
 8002efe:	e000      	b.n	8002f02 <HAL_DMA_IRQHandler+0x3ba>
 8002f00:	2302      	movs	r3, #2
 8002f02:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <HAL_DMA_IRQHandler+0x474>)
 8002f04:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d034      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f1e:	e02f      	b.n	8002f80 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2208      	movs	r2, #8
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d028      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x43a>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d023      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2101      	movs	r1, #1
 8002f54:	fa01 f202 	lsl.w	r2, r1, r2
 8002f58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
    }
  }
  return;
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
}
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40020080 	.word	0x40020080
 8002f90:	40020008 	.word	0x40020008
 8002f94:	4002001c 	.word	0x4002001c
 8002f98:	40020030 	.word	0x40020030
 8002f9c:	40020044 	.word	0x40020044
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	4002006c 	.word	0x4002006c
 8002fa8:	40020408 	.word	0x40020408
 8002fac:	4002041c 	.word	0x4002041c
 8002fb0:	40020430 	.word	0x40020430
 8002fb4:	40020444 	.word	0x40020444
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd2:	e179      	b.n	80032c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8168 	bne.w	80032c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a96      	ldr	r2, [pc, #600]	; (8003250 <HAL_GPIO_Init+0x290>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8002ffc:	4a94      	ldr	r2, [pc, #592]	; (8003250 <HAL_GPIO_Init+0x290>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d875      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003002:	4a94      	ldr	r2, [pc, #592]	; (8003254 <HAL_GPIO_Init+0x294>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d058      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003008:	4a92      	ldr	r2, [pc, #584]	; (8003254 <HAL_GPIO_Init+0x294>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d86f      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800300e:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_GPIO_Init+0x298>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d052      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003014:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_GPIO_Init+0x298>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d869      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800301a:	4a90      	ldr	r2, [pc, #576]	; (800325c <HAL_GPIO_Init+0x29c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04c      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003020:	4a8e      	ldr	r2, [pc, #568]	; (800325c <HAL_GPIO_Init+0x29c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d863      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003026:	4a8e      	ldr	r2, [pc, #568]	; (8003260 <HAL_GPIO_Init+0x2a0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d046      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 800302c:	4a8c      	ldr	r2, [pc, #560]	; (8003260 <HAL_GPIO_Init+0x2a0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d85d      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003032:	2b12      	cmp	r3, #18
 8003034:	d82a      	bhi.n	800308c <HAL_GPIO_Init+0xcc>
 8003036:	2b12      	cmp	r3, #18
 8003038:	d859      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_GPIO_Init+0x80>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	080030bb 	.word	0x080030bb
 8003044:	08003095 	.word	0x08003095
 8003048:	080030a7 	.word	0x080030a7
 800304c:	080030e9 	.word	0x080030e9
 8003050:	080030ef 	.word	0x080030ef
 8003054:	080030ef 	.word	0x080030ef
 8003058:	080030ef 	.word	0x080030ef
 800305c:	080030ef 	.word	0x080030ef
 8003060:	080030ef 	.word	0x080030ef
 8003064:	080030ef 	.word	0x080030ef
 8003068:	080030ef 	.word	0x080030ef
 800306c:	080030ef 	.word	0x080030ef
 8003070:	080030ef 	.word	0x080030ef
 8003074:	080030ef 	.word	0x080030ef
 8003078:	080030ef 	.word	0x080030ef
 800307c:	080030ef 	.word	0x080030ef
 8003080:	080030ef 	.word	0x080030ef
 8003084:	0800309d 	.word	0x0800309d
 8003088:	080030b1 	.word	0x080030b1
 800308c:	4a75      	ldr	r2, [pc, #468]	; (8003264 <HAL_GPIO_Init+0x2a4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003092:	e02c      	b.n	80030ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e029      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	3304      	adds	r3, #4
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e024      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	3308      	adds	r3, #8
 80030ac:	623b      	str	r3, [r7, #32]
          break;
 80030ae:	e01f      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	330c      	adds	r3, #12
 80030b6:	623b      	str	r3, [r7, #32]
          break;
 80030b8:	e01a      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030c2:	2304      	movs	r3, #4
 80030c4:	623b      	str	r3, [r7, #32]
          break;
 80030c6:	e013      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d0:	2308      	movs	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	611a      	str	r2, [r3, #16]
          break;
 80030da:	e009      	b.n	80030f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030dc:	2308      	movs	r3, #8
 80030de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	615a      	str	r2, [r3, #20]
          break;
 80030e6:	e003      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          break;
 80030ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d801      	bhi.n	80030fa <HAL_GPIO_Init+0x13a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	e001      	b.n	80030fe <HAL_GPIO_Init+0x13e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	d802      	bhi.n	800310c <HAL_GPIO_Init+0x14c>
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	e002      	b.n	8003112 <HAL_GPIO_Init+0x152>
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	3b08      	subs	r3, #8
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	210f      	movs	r1, #15
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80c1 	beq.w	80032c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003140:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_GPIO_Init+0x2a8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_GPIO_Init+0x2a8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_GPIO_Init+0x2a8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_GPIO_Init+0x2ac>)
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3c      	ldr	r2, [pc, #240]	; (8003270 <HAL_GPIO_Init+0x2b0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01f      	beq.n	80031c4 <HAL_GPIO_Init+0x204>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <HAL_GPIO_Init+0x2b4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d019      	beq.n	80031c0 <HAL_GPIO_Init+0x200>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <HAL_GPIO_Init+0x2b8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d013      	beq.n	80031bc <HAL_GPIO_Init+0x1fc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a39      	ldr	r2, [pc, #228]	; (800327c <HAL_GPIO_Init+0x2bc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00d      	beq.n	80031b8 <HAL_GPIO_Init+0x1f8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a38      	ldr	r2, [pc, #224]	; (8003280 <HAL_GPIO_Init+0x2c0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <HAL_GPIO_Init+0x1f4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <HAL_GPIO_Init+0x2c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_GPIO_Init+0x1f0>
 80031ac:	2305      	movs	r3, #5
 80031ae:	e00a      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031b0:	2306      	movs	r3, #6
 80031b2:	e008      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e006      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031b8:	2303      	movs	r3, #3
 80031ba:	e004      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031bc:	2302      	movs	r3, #2
 80031be:	e002      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_GPIO_Init+0x206>
 80031c4:	2300      	movs	r3, #0
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	f002 0203 	and.w	r2, r2, #3
 80031cc:	0092      	lsls	r2, r2, #2
 80031ce:	4093      	lsls	r3, r2
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <HAL_GPIO_Init+0x2ac>)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	3302      	adds	r3, #2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4924      	ldr	r1, [pc, #144]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	43db      	mvns	r3, r3
 8003206:	4920      	ldr	r1, [pc, #128]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003208:	4013      	ands	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	491a      	ldr	r1, [pc, #104]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003226:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	43db      	mvns	r3, r3
 800322e:	4916      	ldr	r1, [pc, #88]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003230:	4013      	ands	r3, r2
 8003232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d025      	beq.n	800328c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
 800324c:	e025      	b.n	800329a <HAL_GPIO_Init+0x2da>
 800324e:	bf00      	nop
 8003250:	10320000 	.word	0x10320000
 8003254:	10310000 	.word	0x10310000
 8003258:	10220000 	.word	0x10220000
 800325c:	10210000 	.word	0x10210000
 8003260:	10120000 	.word	0x10120000
 8003264:	10110000 	.word	0x10110000
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	40010800 	.word	0x40010800
 8003274:	40010c00 	.word	0x40010c00
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	40011800 	.word	0x40011800
 8003284:	40011c00 	.word	0x40011c00
 8003288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_GPIO_Init+0x324>)
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	43db      	mvns	r3, r3
 8003294:	4913      	ldr	r1, [pc, #76]	; (80032e4 <HAL_GPIO_Init+0x324>)
 8003296:	4013      	ands	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_GPIO_Init+0x324>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_GPIO_Init+0x324>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
 80032b2:	e006      	b.n	80032c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_GPIO_Init+0x324>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	4909      	ldr	r1, [pc, #36]	; (80032e4 <HAL_GPIO_Init+0x324>)
 80032be:	4013      	ands	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f ae7e 	bne.w	8002fd4 <HAL_GPIO_Init+0x14>
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	372c      	adds	r7, #44	; 0x2c
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e001      	b.n	800330a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]
 8003322:	4613      	mov	r3, r2
 8003324:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003326:	787b      	ldrb	r3, [r7, #1]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332c:	887a      	ldrh	r2, [r7, #2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003332:	e003      	b.n	800333c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	041a      	lsls	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43d9      	mvns	r1, r3
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	400b      	ands	r3, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fe3e 	bl	8006018 <HAL_GPIO_EXTI_Callback>
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e272      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8087 	beq.w	80034d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c8:	4b92      	ldr	r3, [pc, #584]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00c      	beq.n	80033ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d4:	4b8f      	ldr	r3, [pc, #572]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d112      	bne.n	8003406 <HAL_RCC_OscConfig+0x5e>
 80033e0:	4b8c      	ldr	r3, [pc, #560]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d10b      	bne.n	8003406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x12c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d168      	bne.n	80034d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e24c      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x76>
 8003410:	4b80      	ldr	r3, [pc, #512]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7f      	ldr	r2, [pc, #508]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e02e      	b.n	800347c <HAL_RCC_OscConfig+0xd4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b7b      	ldr	r3, [pc, #492]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a7a      	ldr	r2, [pc, #488]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b78      	ldr	r3, [pc, #480]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a77      	ldr	r2, [pc, #476]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xd4>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0xbc>
 800344a:	4b72      	ldr	r3, [pc, #456]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a71      	ldr	r2, [pc, #452]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xd4>
 8003464:	4b6b      	ldr	r3, [pc, #428]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a67      	ldr	r2, [pc, #412]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fd3e 	bl	8001f04 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fd3a 	bl	8001f04 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e200      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xe4>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fd2a 	bl	8001f04 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fd26 	bl	8001f04 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1ec      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x10c>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x18c>
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x176>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1c0      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4939      	ldr	r1, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e03a      	b.n	80035aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b36      	ldr	r3, [pc, #216]	; (8003618 <HAL_RCC_OscConfig+0x270>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe fcdf 	bl	8001f04 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fcdb 	bl	8001f04 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1a1      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4927      	ldr	r1, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_RCC_OscConfig+0x270>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fcbe 	bl	8001f04 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fcba 	bl	8001f04 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e180      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03a      	beq.n	800362c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_RCC_OscConfig+0x274>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fe fc9e 	bl	8001f04 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe fc9a 	bl	8001f04 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e160      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f000 face 	bl	8003b8c <RCC_Delay>
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCC_OscConfig+0x274>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fc84 	bl	8001f04 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fe:	e00f      	b.n	8003620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003600:	f7fe fc80 	bl	8001f04 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d908      	bls.n	8003620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e146      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	42420000 	.word	0x42420000
 800361c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e9      	bne.n	8003600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a6 	beq.w	8003786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363e:	4b8b      	ldr	r3, [pc, #556]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4a87      	ldr	r2, [pc, #540]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	61d3      	str	r3, [r2, #28]
 8003656:	4b85      	ldr	r3, [pc, #532]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_OscConfig+0x4c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b7f      	ldr	r3, [pc, #508]	; (8003870 <HAL_RCC_OscConfig+0x4c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	; (8003870 <HAL_RCC_OscConfig+0x4c8>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7fe fc41 	bl	8001f04 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fe fc3d 	bl	8001f04 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b64      	cmp	r3, #100	; 0x64
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e103      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b75      	ldr	r3, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x4c8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x312>
 80036ac:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	e02d      	b.n	8003716 <HAL_RCC_OscConfig+0x36e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036c2:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a66      	ldr	r2, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	e01c      	b.n	8003716 <HAL_RCC_OscConfig+0x36e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d10c      	bne.n	80036fe <HAL_RCC_OscConfig+0x356>
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a60      	ldr	r2, [pc, #384]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4a5d      	ldr	r2, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6213      	str	r3, [r2, #32]
 80036fc:	e00b      	b.n	8003716 <HAL_RCC_OscConfig+0x36e>
 80036fe:	4b5b      	ldr	r3, [pc, #364]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a5a      	ldr	r2, [pc, #360]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6213      	str	r3, [r2, #32]
 800370a:	4b58      	ldr	r3, [pc, #352]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a57      	ldr	r2, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d015      	beq.n	800374a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe fbf1 	bl	8001f04 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fe fbed 	bl	8001f04 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0b1      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ee      	beq.n	8003726 <HAL_RCC_OscConfig+0x37e>
 8003748:	e014      	b.n	8003774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fe fbdb 	bl	8001f04 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fbd7 	bl	8001f04 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e09b      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003768:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ee      	bne.n	8003752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b3c      	ldr	r3, [pc, #240]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4a3b      	ldr	r2, [pc, #236]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8087 	beq.w	800389e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d061      	beq.n	8003860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d146      	bne.n	8003832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a4:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fbab 	bl	8001f04 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fba7 	bl	8001f04 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e06d      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4921      	ldr	r1, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a19      	ldr	r1, [r3, #32]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	430b      	orrs	r3, r1
 80037fe:	491b      	ldr	r1, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe fb7b 	bl	8001f04 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7fe fb77 	bl	8001f04 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e03d      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x46a>
 8003830:	e035      	b.n	800389e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fb64 	bl	8001f04 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fb60 	bl	8001f04 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e026      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_OscConfig+0x4c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x498>
 800385e:	e01e      	b.n	800389e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e019      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_OscConfig+0x500>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	429a      	cmp	r2, r3
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0d0      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d910      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b67      	ldr	r3, [pc, #412]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4965      	ldr	r1, [pc, #404]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800392a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d040      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d115      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e073      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06b      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4936      	ldr	r1, [pc, #216]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fe fab2 	bl	8001f04 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe faae 	bl	8001f04 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e053      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d210      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4922      	ldr	r1, [pc, #136]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f821 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1cc>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1d0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fa10 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08007344 	.word	0x08007344
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8003aae:	e027      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab2:	613b      	str	r3, [r7, #16]
      break;
 8003ab4:	e027      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d010      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	0c5b      	lsrs	r3, r3, #17
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae2:	fb03 f202 	mul.w	r2, r3, r2
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e004      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	613b      	str	r3, [r7, #16]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b02:	613b      	str	r3, [r7, #16]
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	693b      	ldr	r3, [r7, #16]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	007a1200 	.word	0x007a1200
 8003b1c:	0800735c 	.word	0x0800735c
 8003b20:	0800736c 	.word	0x0800736c
 8003b24:	003d0900 	.word	0x003d0900

08003b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	20000000 	.word	0x20000000

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b40:	f7ff fff2 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08007354 	.word	0x08007354

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b68:	f7ff ffde 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0adb      	lsrs	r3, r3, #11
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08007354 	.word	0x08007354

08003b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <RCC_Delay+0x34>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <RCC_Delay+0x38>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba8:	bf00      	nop
  }
  while (Delay --);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <RCC_Delay+0x1c>
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	10624dd3 	.word	0x10624dd3

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d07d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be8:	4b4f      	ldr	r3, [pc, #316]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4a4b      	ldr	r2, [pc, #300]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	61d3      	str	r3, [r2, #28]
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d118      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1c:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a42      	ldr	r2, [pc, #264]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c28:	f7fe f96c 	bl	8001f04 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2e:	e008      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c30:	f7fe f968 	bl	8001f04 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e06d      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d027      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe f937 	bl	8001f04 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe f933 	bl	8001f04 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4917      	ldr	r1, [pc, #92]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4904      	ldr	r1, [pc, #16]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	42420440 	.word	0x42420440

08003d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	f200 80af 	bhi.w	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003e37 	.word	0x08003e37
 8003d64:	08003e9d 	.word	0x08003e9d
 8003d68:	08003eb9 	.word	0x08003eb9
 8003d6c:	08003e27 	.word	0x08003e27
 8003d70:	08003eb9 	.word	0x08003eb9
 8003d74:	08003eb9 	.word	0x08003eb9
 8003d78:	08003eb9 	.word	0x08003eb9
 8003d7c:	08003e2f 	.word	0x08003e2f
 8003d80:	08003eb9 	.word	0x08003eb9
 8003d84:	08003eb9 	.word	0x08003eb9
 8003d88:	08003eb9 	.word	0x08003eb9
 8003d8c:	08003eb9 	.word	0x08003eb9
 8003d90:	08003eb9 	.word	0x08003eb9
 8003d94:	08003eb9 	.word	0x08003eb9
 8003d98:	08003eb9 	.word	0x08003eb9
 8003d9c:	08003da1 	.word	0x08003da1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003da0:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003da6:	4b49      	ldr	r3, [pc, #292]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8084 	beq.w	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	0c9b      	lsrs	r3, r3, #18
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	0c5b      	lsrs	r3, r3, #17
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003dd8:	5cd3      	ldrb	r3, [r2, r3]
 8003dda:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003de6:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4a38      	ldr	r2, [pc, #224]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e02:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003e14:	e052      	b.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	61bb      	str	r3, [r7, #24]
      break;
 8003e24:	e04a      	b.n	8003ebc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003e26:	f7ff fe2b 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003e2a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003e2c:	e049      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7ff fe27 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003e32:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003e34:	e045      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e46:	d108      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e01f      	b.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003e72:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e00f      	b.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e84:	d11c      	bne.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003e92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e96:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003e98:	e012      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e9c:	f7ff fe62 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0b9b      	lsrs	r3, r3, #14
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	3301      	adds	r3, #1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	61bb      	str	r3, [r7, #24]
      break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003ec0:	bf00      	nop
    }
  }
  return (frequency);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08007370 	.word	0x08007370
 8003ed4:	08007380 	.word	0x08007380
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	003d0900 	.word	0x003d0900
 8003ee0:	aaaaaaab 	.word	0xaaaaaaab

08003ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e076      	b.n	8003fe4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f06:	d009      	beq.n	8003f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fa40 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	0c1a      	lsrs	r2, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f002 0204 	and.w	r2, r2, #4
 8003fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e041      	b.n	8004082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fd fcf4 	bl	8001a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fc4e 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e044      	b.n	800412e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_TIM_Base_Start_IT+0xac>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x6c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_TIM_Base_Start_IT+0xb0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x6c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d00e      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x6c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_TIM_Base_Start_IT+0xb4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <HAL_TIM_Base_Start_IT+0xb8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_TIM_Base_Start_IT+0xbc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d010      	beq.n	800412c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	e007      	b.n	800412c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40013400 	.word	0x40013400
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00

0800414c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e041      	b.n	80041e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd fc12 	bl	800199c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 fb9e 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start+0x24>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e022      	b.n	8004256 <HAL_TIM_PWM_Start+0x6a>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d109      	bne.n	800422a <HAL_TIM_PWM_Start+0x3e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e015      	b.n	8004256 <HAL_TIM_PWM_Start+0x6a>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d109      	bne.n	8004244 <HAL_TIM_PWM_Start+0x58>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e008      	b.n	8004256 <HAL_TIM_PWM_Start+0x6a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e072      	b.n	8004344 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0x82>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	e013      	b.n	8004296 <HAL_TIM_PWM_Start+0xaa>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0x92>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	e00b      	b.n	8004296 <HAL_TIM_PWM_Start+0xaa>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	e003      	b.n	8004296 <HAL_TIM_PWM_Start+0xaa>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fdd0 	bl	8004e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_TIM_PWM_Start+0x160>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIM_PWM_Start+0xcc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_TIM_PWM_Start+0x164>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_TIM_PWM_Start+0xd0>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_TIM_PWM_Start+0xd2>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_TIM_PWM_Start+0x160>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_TIM_PWM_Start+0x122>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <HAL_TIM_PWM_Start+0x164>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_TIM_PWM_Start+0x122>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d00e      	beq.n	800430e <HAL_TIM_PWM_Start+0x122>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_TIM_PWM_Start+0x168>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_TIM_PWM_Start+0x122>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <HAL_TIM_PWM_Start+0x16c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIM_PWM_Start+0x122>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_TIM_PWM_Start+0x170>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d111      	bne.n	8004332 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d010      	beq.n	8004342 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	e007      	b.n	8004342 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40013400 	.word	0x40013400
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00

08004360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0202 	mvn.w	r2, #2
 800438c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa76 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa69 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa78 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0204 	mvn.w	r2, #4
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa4c 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa3f 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fa4e 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0208 	mvn.w	r2, #8
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa22 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa15 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa24 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d122      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b10      	cmp	r3, #16
 800447e:	d11b      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0210 	mvn.w	r2, #16
 8004488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2208      	movs	r2, #8
 800448e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9f8 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9eb 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f9fa 	bl	80048a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0201 	mvn.w	r2, #1
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fc1c 	bl	8005d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fd84 	bl	8005018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9be 	bl	80048b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d10e      	bne.n	8004568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b20      	cmp	r3, #32
 8004556:	d107      	bne.n	8004568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0220 	mvn.w	r2, #32
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fd4f 	bl	8005006 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ae      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	f200 809f 	bhi.w	80046dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080046dd 	.word	0x080046dd
 80045ac:	080046dd 	.word	0x080046dd
 80045b0:	080046dd 	.word	0x080046dd
 80045b4:	08004619 	.word	0x08004619
 80045b8:	080046dd 	.word	0x080046dd
 80045bc:	080046dd 	.word	0x080046dd
 80045c0:	080046dd 	.word	0x080046dd
 80045c4:	0800465b 	.word	0x0800465b
 80045c8:	080046dd 	.word	0x080046dd
 80045cc:	080046dd 	.word	0x080046dd
 80045d0:	080046dd 	.word	0x080046dd
 80045d4:	0800469b 	.word	0x0800469b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f9ee 	bl	80049c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0208 	orr.w	r2, r2, #8
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0204 	bic.w	r2, r2, #4
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	619a      	str	r2, [r3, #24]
      break;
 8004616:	e064      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fa3e 	bl	8004aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]
      break;
 8004658:	e043      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fa91 	bl	8004b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0208 	orr.w	r2, r2, #8
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0204 	bic.w	r2, r2, #4
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	61da      	str	r2, [r3, #28]
      break;
 8004698:	e023      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fae5 	bl	8004c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	021a      	lsls	r2, r3, #8
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	61da      	str	r2, [r3, #28]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
      break;
 80046e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b4      	b.n	800487a <HAL_TIM_ConfigClockSource+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	f000 8086 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x172>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 fb2c 	bl	8004e06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04f      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fb15 	bl	8004e06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa8c 	bl	8004d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fae3 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800480c:	e02c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 faaa 	bl	8004d74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fad3 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800482c:	e01c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 fa6c 	bl	8004d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fac3 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800484c:	e00c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 faba 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800485e:	e003      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
	...

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a33      	ldr	r2, [pc, #204]	; (80049ac <TIM_Base_SetConfig+0xe0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00f      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <TIM_Base_SetConfig+0xe8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <TIM_Base_SetConfig+0xec>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <TIM_Base_SetConfig+0xf0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <TIM_Base_SetConfig+0xe0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <TIM_Base_SetConfig+0xe8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <TIM_Base_SetConfig+0xec>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x82>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <TIM_Base_SetConfig+0xf0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <TIM_Base_SetConfig+0xe0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xc8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00

080049c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 0201 	bic.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0302 	bic.w	r3, r3, #2
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_OC1_SetConfig+0xd8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_OC1_SetConfig+0x64>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <TIM_OC1_SetConfig+0xdc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10c      	bne.n	8004a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0308 	bic.w	r3, r3, #8
 8004a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_OC1_SetConfig+0xd8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC1_SetConfig+0x8e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <TIM_OC1_SetConfig+0xdc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40013400 	.word	0x40013400

08004aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 0210 	bic.w	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0320 	bic.w	r3, r3, #32
 8004aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a21      	ldr	r2, [pc, #132]	; (8004b80 <TIM_OC2_SetConfig+0xe0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC2_SetConfig+0x68>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a20      	ldr	r2, [pc, #128]	; (8004b84 <TIM_OC2_SetConfig+0xe4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10d      	bne.n	8004b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <TIM_OC2_SetConfig+0xe0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC2_SetConfig+0x94>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <TIM_OC2_SetConfig+0xe4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d113      	bne.n	8004b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40013400 	.word	0x40013400

08004b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC3_SetConfig+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0x92>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40013400 	.word	0x40013400

08004c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <TIM_OC4_SetConfig+0xa0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x68>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <TIM_OC4_SetConfig+0xa4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40013400 	.word	0x40013400

08004d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f023 030a 	bic.w	r3, r3, #10
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	031b      	lsls	r3, r3, #12
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	621a      	str	r2, [r3, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f043 0307 	orr.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2201      	movs	r2, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	401a      	ands	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e050      	b.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d018      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d00e      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d10c      	bne.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00

08004f64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e03d      	b.n	8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr

08005006 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e042      	b.n	80050c2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc fe03 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2224      	movs	r2, #36	; 0x24
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fdc6 	bl	8005c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005082:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005092:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08a      	sub	sp, #40	; 0x28
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d16d      	bne.n	80051c6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit+0x2c>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e066      	b.n	80051c8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005108:	f7fc fefc 	bl	8001f04 <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	88fa      	ldrh	r2, [r7, #6]
 8005112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d108      	bne.n	8005136 <HAL_UART_Transmit+0x6c>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e003      	b.n	800513e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513e:	e02a      	b.n	8005196 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fb15 	bl	800577a <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e036      	b.n	80051c8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3302      	adds	r3, #2
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e007      	b.n	8005188 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1cf      	bne.n	8005140 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	2140      	movs	r1, #64	; 0x40
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fae5 	bl	800577a <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e006      	b.n	80051c8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d112      	bne.n	8005210 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_UART_Receive_IT+0x26>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e00b      	b.n	8005212 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	461a      	mov	r2, r3
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fb25 	bl	8005856 <UART_Start_Receive_IT>
 800520c:	4603      	mov	r3, r0
 800520e:	e000      	b.n	8005212 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b0ba      	sub	sp, #232	; 0xe8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800525a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_UART_IRQHandler+0x66>
 800526e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fc01 	bl	8005a82 <UART_Receive_IT>
      return;
 8005280:	e25b      	b.n	800573a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80de 	beq.w	8005448 <HAL_UART_IRQHandler+0x22c>
 800528c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80d1 	beq.w	8005448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_UART_IRQHandler+0xae>
 80052b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f043 0201 	orr.w	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xd2>
 80052d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0xf6>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f043 0204 	orr.w	r2, r3, #4
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <HAL_UART_IRQHandler+0x126>
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d105      	bne.n	8005336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800532a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f043 0208 	orr.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 81f2 	beq.w	8005730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_UART_IRQHandler+0x14e>
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb8c 	bl	8005a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_UART_IRQHandler+0x17a>
 800538e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d04f      	beq.n	8005436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa96 	bl	80058c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d041      	beq.n	800542e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3314      	adds	r3, #20
 80053d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1d9      	bne.n	80053aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d013      	beq.n	8005426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	4a7e      	ldr	r2, [pc, #504]	; (80055fc <HAL_UART_IRQHandler+0x3e0>)
 8005404:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd fa94 	bl	8002938 <HAL_DMA_Abort_IT>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005420:	4610      	mov	r0, r2
 8005422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	e00e      	b.n	8005444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f993 	bl	8005752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e00a      	b.n	8005444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f98f 	bl	8005752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e006      	b.n	8005444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f98b 	bl	8005752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005442:	e175      	b.n	8005730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	bf00      	nop
    return;
 8005446:	e173      	b.n	8005730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 814f 	bne.w	80056f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8148 	beq.w	80056f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8141 	beq.w	80056f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80b6 	beq.w	8005600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8145 	beq.w	8005734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b2:	429a      	cmp	r2, r3
 80054b4:	f080 813e 	bcs.w	8005734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	f000 8088 	beq.w	80055dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005504:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1d9      	bne.n	80054cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800553c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005540:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005544:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800554e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e1      	bne.n	8005518 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005578:	66fa      	str	r2, [r7, #108]	; 0x6c
 800557a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800557e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e3      	bne.n	8005554 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ac:	f023 0310 	bic.w	r3, r3, #16
 80055b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055be:	65ba      	str	r2, [r7, #88]	; 0x58
 80055c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd f972 	bl	80028c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8b6 	bl	8005764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055f8:	e09c      	b.n	8005734 <HAL_UART_IRQHandler+0x518>
 80055fa:	bf00      	nop
 80055fc:	0800598d 	.word	0x0800598d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005608:	b29b      	uxth	r3, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 808e 	beq.w	8005738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800561c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8089 	beq.w	8005738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800564a:	647a      	str	r2, [r7, #68]	; 0x44
 800564c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e3      	bne.n	8005626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	623b      	str	r3, [r7, #32]
   return(result);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005682:	633a      	str	r2, [r7, #48]	; 0x30
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e3      	bne.n	800565e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056c8:	61fa      	str	r2, [r7, #28]
 80056ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	617b      	str	r3, [r7, #20]
   return(result);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e3      	bne.n	80056a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f83b 	bl	8005764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ee:	e023      	b.n	8005738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <HAL_UART_IRQHandler+0x4f4>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f953 	bl	80059b4 <UART_Transmit_IT>
    return;
 800570e:	e014      	b.n	800573a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00e      	beq.n	800573a <HAL_UART_IRQHandler+0x51e>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f992 	bl	8005a52 <UART_EndTransmit_IT>
    return;
 800572e:	e004      	b.n	800573a <HAL_UART_IRQHandler+0x51e>
    return;
 8005730:	bf00      	nop
 8005732:	e002      	b.n	800573a <HAL_UART_IRQHandler+0x51e>
      return;
 8005734:	bf00      	nop
 8005736:	e000      	b.n	800573a <HAL_UART_IRQHandler+0x51e>
      return;
 8005738:	bf00      	nop
  }
}
 800573a:	37e8      	adds	r7, #232	; 0xe8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b090      	sub	sp, #64	; 0x40
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	e050      	b.n	800582e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d04c      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <UART_WaitOnFlagUntilTimeout+0x30>
 800579a:	f7fc fbb3 	bl	8001f04 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d241      	bcs.n	800582e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057ca:	637a      	str	r2, [r7, #52]	; 0x34
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e5      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	613b      	str	r3, [r7, #16]
   return(result);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fe:	623a      	str	r2, [r7, #32]
 8005800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	69f9      	ldr	r1, [r7, #28]
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	61bb      	str	r3, [r7, #24]
   return(result);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e5      	bne.n	80057de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e00f      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d09f      	beq.n	800578c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3740      	adds	r7, #64	; 0x40
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2222      	movs	r2, #34	; 0x22
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0220 	orr.w	r2, r2, #32
 80058ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b095      	sub	sp, #84	; 0x54
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058f0:	643a      	str	r2, [r7, #64]	; 0x40
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	61fb      	str	r3, [r7, #28]
   return(result);
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005924:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800592a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	d119      	bne.n	8005974 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 0310 	bic.w	r3, r3, #16
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005960:	61ba      	str	r2, [r7, #24]
 8005962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005982:	bf00      	nop
 8005984:	3754      	adds	r7, #84	; 0x54
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff fed3 	bl	8005752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b21      	cmp	r3, #33	; 0x21
 80059c6:	d13e      	bne.n	8005a46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d114      	bne.n	80059fc <UART_Transmit_IT+0x48>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d110      	bne.n	80059fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]
 80059fa:	e008      	b.n	8005a0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6211      	str	r1, [r2, #32]
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fe64 	bl	8005740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b08c      	sub	sp, #48	; 0x30
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b22      	cmp	r3, #34	; 0x22
 8005a94:	f040 80ae 	bne.w	8005bf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d117      	bne.n	8005ad2 <UART_Receive_IT+0x50>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d113      	bne.n	8005ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
 8005ad0:	e026      	b.n	8005b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae4:	d007      	beq.n	8005af6 <UART_Receive_IT+0x74>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <UART_Receive_IT+0x82>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e008      	b.n	8005b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d15d      	bne.n	8005bf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0220 	bic.w	r2, r2, #32
 8005b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d135      	bne.n	8005be6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	623a      	str	r2, [r7, #32]
 8005ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	6a3a      	ldr	r2, [r7, #32]
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d10a      	bne.n	8005bd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fdc0 	bl	8005764 <HAL_UARTEx_RxEventCallback>
 8005be4:	e002      	b.n	8005bec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa6c 	bl	80060c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e002      	b.n	8005bf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c3a:	f023 030c 	bic.w	r3, r3, #12
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <UART_SetConfig+0x114>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d103      	bne.n	8005c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c68:	f7fd ff7c 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	e002      	b.n	8005c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fd ff64 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8005c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <UART_SetConfig+0x118>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	0119      	lsls	r1, r3, #4
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <UART_SetConfig+0x118>)
 8005cae:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	2064      	movs	r0, #100	; 0x64
 8005cb6:	fb00 f303 	mul.w	r3, r0, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	3332      	adds	r3, #50	; 0x32
 8005cc0:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <UART_SetConfig+0x118>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ccc:	4419      	add	r1, r3
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <UART_SetConfig+0x118>)
 8005ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2064      	movs	r0, #100	; 0x64
 8005cee:	fb00 f303 	mul.w	r3, r0, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <UART_SetConfig+0x118>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	440a      	add	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40013800 	.word	0x40013800
 8005d18:	51eb851f 	.word	0x51eb851f

08005d1c <HAL_TIM_PeriodElapsedCallback>:
    if (hadc->Instance == ADC1) {
        HAL_ADC_Stop_DMA(&hadc1);
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005d1c:	b5b0      	push	{r4, r5, r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a98      	ldr	r2, [pc, #608]	; (8005f8c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f040 80be 	bne.w	8005eac <HAL_TIM_PeriodElapsedCallback+0x190>
        static int led_count = 0;
        if (led_count >= 10) {
 8005d30:	4b97      	ldr	r3, [pc, #604]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b09      	cmp	r3, #9
 8005d36:	dd07      	ble.n	8005d48 <HAL_TIM_PeriodElapsedCallback+0x2c>
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8005d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d3c:	4895      	ldr	r0, [pc, #596]	; (8005f94 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005d3e:	f7fd fb02 	bl	8003346 <HAL_GPIO_TogglePin>
            led_count = 0;
 8005d42:	4b93      	ldr	r3, [pc, #588]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
        }
        led_count += 1;
 8005d48:	4b91      	ldr	r3, [pc, #580]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a90      	ldr	r2, [pc, #576]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005d50:	6013      	str	r3, [r2, #0]
        if (led_count == 5) {
 8005d52:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	f040 80a8 	bne.w	8005eac <HAL_TIM_PeriodElapsedCallback+0x190>
            int x = 10, y = 10, size = 16, y_increment = 20;
 8005d5c:	230a      	movs	r3, #10
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d60:	230a      	movs	r3, #10
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	2310      	movs	r3, #16
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	2314      	movs	r3, #20
 8005d6a:	61bb      	str	r3, [r7, #24]
            sprintf(string_display, "pid_error: %04f", pid_error);
 8005d6c:	4b8a      	ldr	r3, [pc, #552]	; (8005f98 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fa fbc5 	bl	8000500 <__aeabi_f2d>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4988      	ldr	r1, [pc, #544]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005d7c:	4888      	ldr	r0, [pc, #544]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005d7e:	f001 f8b7 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	b298      	uxth	r0, r3
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	b299      	uxth	r1, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	9201      	str	r2, [sp, #4]
 8005d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d96:	9200      	str	r2, [sp, #0]
 8005d98:	4a81      	ldr	r2, [pc, #516]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005d9a:	f000 fd09 	bl	80067b0 <LCD_String>
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	623b      	str	r3, [r7, #32]
            sprintf(string_display, "t:%04f", temperature);
 8005da6:	4b7f      	ldr	r3, [pc, #508]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fa fba8 	bl	8000500 <__aeabi_f2d>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	497c      	ldr	r1, [pc, #496]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8005db6:	487a      	ldr	r0, [pc, #488]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005db8:	f001 f89a 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	9201      	str	r2, [sp, #4]
 8005dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd0:	9200      	str	r2, [sp, #0]
 8005dd2:	4a73      	ldr	r2, [pc, #460]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005dd4:	f000 fcec 	bl	80067b0 <LCD_String>
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	623b      	str	r3, [r7, #32]
            sprintf(string_display, "goal:%04d", goal_temperature);
 8005de0:	4b72      	ldr	r3, [pc, #456]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x290>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	4972      	ldr	r1, [pc, #456]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005de8:	486d      	ldr	r0, [pc, #436]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005dea:	f001 f881 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	b298      	uxth	r0, r3
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	b299      	uxth	r1, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	9201      	str	r2, [sp, #4]
 8005dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e02:	9200      	str	r2, [sp, #0]
 8005e04:	4a66      	ldr	r2, [pc, #408]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e06:	f000 fcd3 	bl	80067b0 <LCD_String>
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	4413      	add	r3, r2
 8005e10:	623b      	str	r3, [r7, #32]
            sprintf(string_display, "d:%04f", duty);
 8005e12:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fb72 	bl	8000500 <__aeabi_f2d>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4965      	ldr	r1, [pc, #404]	; (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8005e22:	485f      	ldr	r0, [pc, #380]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e24:	f001 f864 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	b298      	uxth	r0, r3
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	b299      	uxth	r1, r3
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2200      	movs	r2, #0
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	4a58      	ldr	r2, [pc, #352]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e40:	f000 fcb6 	bl	80067b0 <LCD_String>
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	4413      	add	r3, r2
 8005e4a:	623b      	str	r3, [r7, #32]
            sprintf(string_display, "heat_level:%04d", heat_level);
 8005e4c:	4b5b      	ldr	r3, [pc, #364]	; (8005fbc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	495b      	ldr	r1, [pc, #364]	; (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8005e54:	4852      	ldr	r0, [pc, #328]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e56:	f001 f84b 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	b298      	uxth	r0, r3
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	b299      	uxth	r1, r3
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2200      	movs	r2, #0
 8005e68:	9201      	str	r2, [sp, #4]
 8005e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e6e:	9200      	str	r2, [sp, #0]
 8005e70:	4a4b      	ldr	r2, [pc, #300]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e72:	f000 fc9d 	bl	80067b0 <LCD_String>
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	623b      	str	r3, [r7, #32]
            sprintf(string_display, "data:%6s", string_recv);
 8005e7e:	4a51      	ldr	r2, [pc, #324]	; (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005e80:	4951      	ldr	r1, [pc, #324]	; (8005fc8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8005e82:	4847      	ldr	r0, [pc, #284]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005e84:	f001 f834 	bl	8006ef0 <siprintf>
            LCD_String(x, y, string_display, size, WHITE, BLACK), y += y_increment;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	b298      	uxth	r0, r3
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2200      	movs	r2, #0
 8005e96:	9201      	str	r2, [sp, #4]
 8005e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9c:	9200      	str	r2, [sp, #0]
 8005e9e:	4a40      	ldr	r2, [pc, #256]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8005ea0:	f000 fc86 	bl	80067b0 <LCD_String>
 8005ea4:	6a3a      	ldr	r2, [r7, #32]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	623b      	str	r3, [r7, #32]
        }
    }

    if (htim->Instance == TIM7) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a46      	ldr	r2, [pc, #280]	; (8005fcc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	f040 80a6 	bne.w	8006004 <HAL_TIM_PeriodElapsedCallback+0x2e8>
        // refresh_adc();
        pid_error = (float) goal_temperature - temperature;
 8005eb8:	4b3c      	ldr	r3, [pc, #240]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x290>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fa fe63 	bl	8000b88 <__aeabi_i2f>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7fa fda6 	bl	8000a1c <__aeabi_fsub>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005ed6:	601a      	str	r2, [r3, #0]
        duty = arm_pid_f32(&pid, pid_error);
 8005ed8:	4b2f      	ldr	r3, [pc, #188]	; (8005f98 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3c      	ldr	r2, [pc, #240]	; (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005ede:	617a      	str	r2, [r7, #20]
 8005ee0:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fa fea1 	bl	8000c30 <__aeabi_fmul>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fa fe97 	bl	8000c30 <__aeabi_fmul>
 8005f02:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 8005f04:	4619      	mov	r1, r3
 8005f06:	4620      	mov	r0, r4
 8005f08:	f7fa fd8a 	bl	8000a20 <__addsf3>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f7fa fe88 	bl	8000c30 <__aeabi_fmul>
 8005f20:	4603      	mov	r3, r0
 8005f22:	4619      	mov	r1, r3
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7fa fd7b 	bl	8000a20 <__addsf3>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fa fd73 	bl	8000a20 <__addsf3>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005f56:	6013      	str	r3, [r2, #0]
        // set_heat_level((uint16_t) duty);
        temperature += (float) 0.01 * duty;
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	491d      	ldr	r1, [pc, #116]	; (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fa fe66 	bl	8000c30 <__aeabi_fmul>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7fa fd56 	bl	8000a20 <__addsf3>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005f7a:	601a      	str	r2, [r3, #0]

        sprintf(string_send, "%f, %f\n", temperature, (float) goal_temperature);
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fa fabd 	bl	8000500 <__aeabi_f2d>
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	e025      	b.n	8005fd8 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8005f8c:	40001000 	.word	0x40001000
 8005f90:	20000368 	.word	0x20000368
 8005f94:	40010c00 	.word	0x40010c00
 8005f98:	20000364 	.word	0x20000364
 8005f9c:	080072f4 	.word	0x080072f4
 8005fa0:	20000374 	.word	0x20000374
 8005fa4:	20000460 	.word	0x20000460
 8005fa8:	08007304 	.word	0x08007304
 8005fac:	2000000c 	.word	0x2000000c
 8005fb0:	0800730c 	.word	0x0800730c
 8005fb4:	2000035c 	.word	0x2000035c
 8005fb8:	08007318 	.word	0x08007318
 8005fbc:	20000370 	.word	0x20000370
 8005fc0:	08007320 	.word	0x08007320
 8005fc4:	20000468 	.word	0x20000468
 8005fc8:	08007330 	.word	0x08007330
 8005fcc:	40001400 	.word	0x40001400
 8005fd0:	2000043c 	.word	0x2000043c
 8005fd4:	3c23d70a 	.word	0x3c23d70a
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fdd3 	bl	8000b88 <__aeabi_i2f>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa fa8b 	bl	8000500 <__aeabi_f2d>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	e9cd 2300 	strd	r2, r3, [sp]
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	4906      	ldr	r1, [pc, #24]	; (8006010 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8005ff8:	4806      	ldr	r0, [pc, #24]	; (8006014 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8005ffa:	f000 ff79 	bl	8006ef0 <siprintf>
        send_bluetooth(string_send);
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8006000:	f000 f8a0 	bl	8006144 <send_bluetooth>
    }
}
 8006004:	bf00      	nop
 8006006:	3728      	adds	r7, #40	; 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bdb0      	pop	{r4, r5, r7, pc}
 800600c:	2000000c 	.word	0x2000000c
 8006010:	0800733c 	.word	0x0800733c
 8006014:	200003d8 	.word	0x200003d8

08006018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == A_Pin) {
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d110      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x32>
        if (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == RESET && encoder_count < 1000) {
 8006028:	2104      	movs	r1, #4
 800602a:	4823      	ldr	r0, [pc, #140]	; (80060b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800602c:	f7fd f95c 	bl	80032e8 <HAL_GPIO_ReadPin>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x32>
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800603e:	da04      	bge.n	800604a <HAL_GPIO_EXTI_Callback+0x32>
            encoder_count += 1;
 8006040:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006048:	6013      	str	r3, [r2, #0]
        }
    }
    if (GPIO_Pin == B_Pin) {
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d10f      	bne.n	8006070 <HAL_GPIO_EXTI_Callback+0x58>
        if (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == RESET && encoder_count > 0) {
 8006050:	2102      	movs	r1, #2
 8006052:	4819      	ldr	r0, [pc, #100]	; (80060b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8006054:	f7fd f948 	bl	80032e8 <HAL_GPIO_ReadPin>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d108      	bne.n	8006070 <HAL_GPIO_EXTI_Callback+0x58>
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	dd04      	ble.n	8006070 <HAL_GPIO_EXTI_Callback+0x58>
            encoder_count -= 1;
 8006066:	4b15      	ldr	r3, [pc, #84]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	4a13      	ldr	r2, [pc, #76]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 800606e:	6013      	str	r3, [r2, #0]
        }
    }
    if (GPIO_Pin == SW_Pin) {
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d118      	bne.n	80060a8 <HAL_GPIO_EXTI_Callback+0x90>
        goal_temperature = (uint16_t) ((float) encoder_count * k);
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <HAL_GPIO_EXTI_Callback+0xa4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa fd84 	bl	8000b88 <__aeabi_i2f>
 8006080:	4603      	mov	r3, r0
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa fa3c 	bl	8000500 <__aeabi_f2d>
 8006088:	a309      	add	r3, pc, #36	; (adr r3, 80060b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa fa8f 	bl	80005b0 <__aeabi_dmul>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	f7fa fc9b 	bl	80009d4 <__aeabi_d2uiz>
 800609e:	4603      	mov	r3, r0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80060a6:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == key_Pin) {

    }
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	9999999a 	.word	0x9999999a
 80060b4:	3fb99999 	.word	0x3fb99999
 80060b8:	40011000 	.word	0x40011000
 80060bc:	20000360 	.word	0x20000360
 80060c0:	2000000c 	.word	0x2000000c

080060c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a17      	ldr	r2, [pc, #92]	; (8006130 <HAL_UART_RxCpltCallback+0x6c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d128      	bne.n	8006128 <HAL_UART_RxCpltCallback+0x64>
        static int string_recv_index = 0;
        if (string_recv_index == 0) {
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <HAL_UART_RxCpltCallback+0x24>
            memset(string_recv, 0, sizeof(string_recv));
 80060de:	2264      	movs	r2, #100	; 0x64
 80060e0:	2100      	movs	r1, #0
 80060e2:	4815      	ldr	r0, [pc, #84]	; (8006138 <HAL_UART_RxCpltCallback+0x74>)
 80060e4:	f000 fc7a 	bl	80069dc <memset>
        }
        if (tmp_data == '\n') {
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <HAL_UART_RxCpltCallback+0x78>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b0a      	cmp	r3, #10
 80060ee:	d108      	bne.n	8006102 <HAL_UART_RxCpltCallback+0x3e>
            string_recv[string_recv_index] = '\0';
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a10      	ldr	r2, [pc, #64]	; (8006138 <HAL_UART_RxCpltCallback+0x74>)
 80060f6:	2100      	movs	r1, #0
 80060f8:	54d1      	strb	r1, [r2, r3]
            string_recv_index = 0;
 80060fa:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e008      	b.n	8006114 <HAL_UART_RxCpltCallback+0x50>
        } else {
            string_recv[string_recv_index++] = tmp_data;
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	490a      	ldr	r1, [pc, #40]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 800610a:	600a      	str	r2, [r1, #0]
 800610c:	4a0b      	ldr	r2, [pc, #44]	; (800613c <HAL_UART_RxCpltCallback+0x78>)
 800610e:	7811      	ldrb	r1, [r2, #0]
 8006110:	4a09      	ldr	r2, [pc, #36]	; (8006138 <HAL_UART_RxCpltCallback+0x74>)
 8006112:	54d1      	strb	r1, [r2, r3]
        }

        string_recv[string_recv_index] = '\0';
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_UART_RxCpltCallback+0x70>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a07      	ldr	r2, [pc, #28]	; (8006138 <HAL_UART_RxCpltCallback+0x74>)
 800611a:	2100      	movs	r1, #0
 800611c:	54d1      	strb	r1, [r2, r3]
        HAL_UART_Receive_IT(&huart3, (uint8_t *) &tmp_data, 1);
 800611e:	2201      	movs	r2, #1
 8006120:	4906      	ldr	r1, [pc, #24]	; (800613c <HAL_UART_RxCpltCallback+0x78>)
 8006122:	4807      	ldr	r0, [pc, #28]	; (8006140 <HAL_UART_RxCpltCallback+0x7c>)
 8006124:	f7ff f854 	bl	80051d0 <HAL_UART_Receive_IT>
    }
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40004800 	.word	0x40004800
 8006134:	2000036c 	.word	0x2000036c
 8006138:	20000468 	.word	0x20000468
 800613c:	20000464 	.word	0x20000464
 8006140:	20000310 	.word	0x20000310

08006144 <send_bluetooth>:
    voltage = res[1];
    NTC = res[2];
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1_buffer, ADC_ARRAY_SIZE * ADC_NUMS);
}

void send_bluetooth(char string[]) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&bluetooth, (uint8_t *) string, strlen(string), 0xFF);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fa f86b 	bl	8000228 <strlen>
 8006152:	4603      	mov	r3, r0
 8006154:	b29a      	uxth	r2, r3
 8006156:	23ff      	movs	r3, #255	; 0xff
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4803      	ldr	r0, [pc, #12]	; (8006168 <send_bluetooth+0x24>)
 800615c:	f7fe ffb5 	bl	80050ca <HAL_UART_Transmit>
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000310 	.word	0x20000310

0800616c <spiSendByte>:
void sendByte(u8 Data);                                    // 向液晶屏发送：数据，8位
void sendShort(u16 Data);                                    // 向液晶屏发送：数据，16位
void setCursor(u16 x_start, u16 y_start, u16 x_end, u16 y_end); // 设置显示区域

// SPI发送传送1字节
u8 spiSendByte(u8 data) {
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
//
//    DMA1_Channel5->CMAR = data;									 //重置存储器地址
//
//    DMA1_Channel5->CCR |= 3 << 0;               //开启DMA通道5，使能发送完成中断;

    while ((SPI2->SR & SPI_FLAG_TXE) == RESET) {}
 8006176:	bf00      	nop
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <spiSendByte+0x3c>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f9      	beq.n	8006178 <spiSendByte+0xc>
    SPI2->DR = data;
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <spiSendByte+0x3c>)
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	60d3      	str	r3, [r2, #12]
    while ((SPI2->SR & SPI_FLAG_RXNE) == RESET) {}
 800618a:	bf00      	nop
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <spiSendByte+0x3c>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f9      	beq.n	800618c <spiSendByte+0x20>
    return SPI2->DR;
 8006198:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <spiSendByte+0x3c>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	b2db      	uxtb	r3, r3
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	40003800 	.word	0x40003800

080061ac <LCD_Init>:
*功  能：初始化lcd
*参  数：为了简化理解、便于移植，参数(屏幕像素、显示方向)在h文件里进行修改
*返回值：无
*备  注：
*****************************************************************************/
void LCD_Init(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af02      	add	r7, sp, #8
    xLCD.InitOK = 0;
 80061b2:	4b9c      	ldr	r3, [pc, #624]	; (8006424 <LCD_Init+0x278>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
    xLCD.bColor = BLACK;
 80061b8:	4b9a      	ldr	r3, [pc, #616]	; (8006424 <LCD_Init+0x278>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
    // 显示方向像素匹配
    if ((LCD_DIR == 1) || (LCD_DIR == 3)) {
        xLCD.width = LCD_WIDTH;       // 屏宽度像素，超过此值驱动芯片会自动换行，注意：如果屏幕右边有花屏，就加大这个值
        xLCD.height = LCD_HEIGHT;        // 屏高度像素， 注意：如果屏幕下面有花屏，就加大这个值
    } else {
        xLCD.width = LCD_HEIGHT;
 80061be:	4b99      	ldr	r3, [pc, #612]	; (8006424 <LCD_Init+0x278>)
 80061c0:	22c8      	movs	r2, #200	; 0xc8
 80061c2:	805a      	strh	r2, [r3, #2]
        xLCD.height = LCD_WIDTH;
 80061c4:	4b97      	ldr	r3, [pc, #604]	; (8006424 <LCD_Init+0x278>)
 80061c6:	22c8      	movs	r2, #200	; 0xc8
 80061c8:	809a      	strh	r2, [r3, #4]
    }

    // 初始化GPIO
//    gpioInit();
    MX_GPIO_Init();
 80061ca:	f7fa ff65 	bl	8001098 <MX_GPIO_Init>
    // 初始化SPI外设、协议
//    spiInit();
    MX_SPI2_Init();
 80061ce:	f7fb f8bf 	bl	8001350 <MX_SPI2_Init>
    __HAL_SPI_ENABLE(&hspi2);
 80061d2:	4b95      	ldr	r3, [pc, #596]	; (8006428 <LCD_Init+0x27c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b93      	ldr	r3, [pc, #588]	; (8006428 <LCD_Init+0x27c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e0:	601a      	str	r2, [r3, #0]
    LCD_BL_HIGH;
 80061e2:	4b92      	ldr	r3, [pc, #584]	; (800642c <LCD_Init+0x280>)
 80061e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e8:	611a      	str	r2, [r3, #16]

    // 屏幕复位
    LCD_RES_LOW;           // LCD_RST=0	  //SPI接口复位
 80061ea:	4b90      	ldr	r3, [pc, #576]	; (800642c <LCD_Init+0x280>)
 80061ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061f0:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);          // delay 20 ms
 80061f2:	2014      	movs	r0, #20
 80061f4:	f7fb fe90 	bl	8001f18 <HAL_Delay>
    LCD_RES_HIGH;        // LCD_RST=1
 80061f8:	4b8c      	ldr	r3, [pc, #560]	; (800642c <LCD_Init+0x280>)
 80061fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061fe:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);
 8006200:	2014      	movs	r0, #20
 8006202:	f7fb fe89 	bl	8001f18 <HAL_Delay>

    sendOrder(0x11);       // 退出睡眠模式
 8006206:	2011      	movs	r0, #17
 8006208:	f000 f912 	bl	8006430 <sendOrder>
    HAL_Delay(120);         // Delay 120ms
 800620c:	2078      	movs	r0, #120	; 0x78
 800620e:	f7fb fe83 	bl	8001f18 <HAL_Delay>
    //------------------------------------ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB1);
 8006212:	20b1      	movs	r0, #177	; 0xb1
 8006214:	f000 f90c 	bl	8006430 <sendOrder>
    sendByte(0x05);
 8006218:	2005      	movs	r0, #5
 800621a:	f000 f925 	bl	8006468 <sendByte>
    sendByte(0x3C);
 800621e:	203c      	movs	r0, #60	; 0x3c
 8006220:	f000 f922 	bl	8006468 <sendByte>
    sendByte(0x3C);
 8006224:	203c      	movs	r0, #60	; 0x3c
 8006226:	f000 f91f 	bl	8006468 <sendByte>

    sendOrder(0xB2);
 800622a:	20b2      	movs	r0, #178	; 0xb2
 800622c:	f000 f900 	bl	8006430 <sendOrder>
    sendByte(0x05);
 8006230:	2005      	movs	r0, #5
 8006232:	f000 f919 	bl	8006468 <sendByte>
    sendByte(0x3C);
 8006236:	203c      	movs	r0, #60	; 0x3c
 8006238:	f000 f916 	bl	8006468 <sendByte>
    sendByte(0x3C);
 800623c:	203c      	movs	r0, #60	; 0x3c
 800623e:	f000 f913 	bl	8006468 <sendByte>

    sendOrder(0xB3);
 8006242:	20b3      	movs	r0, #179	; 0xb3
 8006244:	f000 f8f4 	bl	8006430 <sendOrder>
    sendByte(0x05);
 8006248:	2005      	movs	r0, #5
 800624a:	f000 f90d 	bl	8006468 <sendByte>
    sendByte(0x3C);
 800624e:	203c      	movs	r0, #60	; 0x3c
 8006250:	f000 f90a 	bl	8006468 <sendByte>
    sendByte(0x3C);
 8006254:	203c      	movs	r0, #60	; 0x3c
 8006256:	f000 f907 	bl	8006468 <sendByte>
    sendByte(0x05);
 800625a:	2005      	movs	r0, #5
 800625c:	f000 f904 	bl	8006468 <sendByte>
    sendByte(0x3C);
 8006260:	203c      	movs	r0, #60	; 0x3c
 8006262:	f000 f901 	bl	8006468 <sendByte>
    sendByte(0x3C);
 8006266:	203c      	movs	r0, #60	; 0x3c
 8006268:	f000 f8fe 	bl	8006468 <sendByte>
    //------------------------------------End ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB4); // Dot inversion
 800626c:	20b4      	movs	r0, #180	; 0xb4
 800626e:	f000 f8df 	bl	8006430 <sendOrder>
    sendByte(0x03);
 8006272:	2003      	movs	r0, #3
 8006274:	f000 f8f8 	bl	8006468 <sendByte>

    sendOrder(0xC0); // ST7735R Power Sequence
 8006278:	20c0      	movs	r0, #192	; 0xc0
 800627a:	f000 f8d9 	bl	8006430 <sendOrder>
    sendByte(0x28);
 800627e:	2028      	movs	r0, #40	; 0x28
 8006280:	f000 f8f2 	bl	8006468 <sendByte>
    sendByte(0x08);
 8006284:	2008      	movs	r0, #8
 8006286:	f000 f8ef 	bl	8006468 <sendByte>
    sendByte(0x04);
 800628a:	2004      	movs	r0, #4
 800628c:	f000 f8ec 	bl	8006468 <sendByte>

    sendOrder(0xC1);
 8006290:	20c1      	movs	r0, #193	; 0xc1
 8006292:	f000 f8cd 	bl	8006430 <sendOrder>
    sendByte(0XC0);
 8006296:	20c0      	movs	r0, #192	; 0xc0
 8006298:	f000 f8e6 	bl	8006468 <sendByte>

    sendOrder(0xC2);
 800629c:	20c2      	movs	r0, #194	; 0xc2
 800629e:	f000 f8c7 	bl	8006430 <sendOrder>
    sendByte(0x0D);
 80062a2:	200d      	movs	r0, #13
 80062a4:	f000 f8e0 	bl	8006468 <sendByte>
    sendByte(0x00);
 80062a8:	2000      	movs	r0, #0
 80062aa:	f000 f8dd 	bl	8006468 <sendByte>
    sendOrder(0xC3);
 80062ae:	20c3      	movs	r0, #195	; 0xc3
 80062b0:	f000 f8be 	bl	8006430 <sendOrder>

    sendByte(0x8D);
 80062b4:	208d      	movs	r0, #141	; 0x8d
 80062b6:	f000 f8d7 	bl	8006468 <sendByte>
    sendByte(0x2A);
 80062ba:	202a      	movs	r0, #42	; 0x2a
 80062bc:	f000 f8d4 	bl	8006468 <sendByte>

    sendOrder(0xC4);
 80062c0:	20c4      	movs	r0, #196	; 0xc4
 80062c2:	f000 f8b5 	bl	8006430 <sendOrder>
    sendByte(0x8D);
 80062c6:	208d      	movs	r0, #141	; 0x8d
 80062c8:	f000 f8ce 	bl	8006468 <sendByte>
    sendByte(0xEE);
 80062cc:	20ee      	movs	r0, #238	; 0xee
 80062ce:	f000 f8cb 	bl	8006468 <sendByte>
    //---------------------------------End ST7735S Power Sequence-------------------------------------//
    sendOrder(0xC5); //VCOM
 80062d2:	20c5      	movs	r0, #197	; 0xc5
 80062d4:	f000 f8ac 	bl	8006430 <sendOrder>
    sendByte(0x1A);
 80062d8:	201a      	movs	r0, #26
 80062da:	f000 f8c5 	bl	8006468 <sendByte>
    sendOrder(0x36); //MX, MY, RGB mode
 80062de:	2036      	movs	r0, #54	; 0x36
 80062e0:	f000 f8a6 	bl	8006430 <sendOrder>
    if (LCD_DIR == 1) sendByte(0xC0);  // 重要：显示方向控制，C0/00/A0/60,  C8/08/A8/68
    if (LCD_DIR == 2) sendByte(0x00);
    if (LCD_DIR == 3) sendByte(0xA0);
    if (LCD_DIR == 4) sendByte(0x60);
 80062e4:	2060      	movs	r0, #96	; 0x60
 80062e6:	f000 f8bf 	bl	8006468 <sendByte>
    //------------------------------------ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0xE0);
 80062ea:	20e0      	movs	r0, #224	; 0xe0
 80062ec:	f000 f8a0 	bl	8006430 <sendOrder>
    sendByte(0x04);
 80062f0:	2004      	movs	r0, #4
 80062f2:	f000 f8b9 	bl	8006468 <sendByte>
    sendByte(0x22);
 80062f6:	2022      	movs	r0, #34	; 0x22
 80062f8:	f000 f8b6 	bl	8006468 <sendByte>
    sendByte(0x07);
 80062fc:	2007      	movs	r0, #7
 80062fe:	f000 f8b3 	bl	8006468 <sendByte>
    sendByte(0x0A);
 8006302:	200a      	movs	r0, #10
 8006304:	f000 f8b0 	bl	8006468 <sendByte>
    sendByte(0x2E);
 8006308:	202e      	movs	r0, #46	; 0x2e
 800630a:	f000 f8ad 	bl	8006468 <sendByte>
    sendByte(0x30);
 800630e:	2030      	movs	r0, #48	; 0x30
 8006310:	f000 f8aa 	bl	8006468 <sendByte>
    sendByte(0x25);
 8006314:	2025      	movs	r0, #37	; 0x25
 8006316:	f000 f8a7 	bl	8006468 <sendByte>
    sendByte(0x2A);
 800631a:	202a      	movs	r0, #42	; 0x2a
 800631c:	f000 f8a4 	bl	8006468 <sendByte>
    sendByte(0x28);
 8006320:	2028      	movs	r0, #40	; 0x28
 8006322:	f000 f8a1 	bl	8006468 <sendByte>
    sendByte(0x26);
 8006326:	2026      	movs	r0, #38	; 0x26
 8006328:	f000 f89e 	bl	8006468 <sendByte>
    sendByte(0x2E);
 800632c:	202e      	movs	r0, #46	; 0x2e
 800632e:	f000 f89b 	bl	8006468 <sendByte>
    sendByte(0x3A);
 8006332:	203a      	movs	r0, #58	; 0x3a
 8006334:	f000 f898 	bl	8006468 <sendByte>
    sendByte(0x00);
 8006338:	2000      	movs	r0, #0
 800633a:	f000 f895 	bl	8006468 <sendByte>
    sendByte(0x01);
 800633e:	2001      	movs	r0, #1
 8006340:	f000 f892 	bl	8006468 <sendByte>
    sendByte(0x03);
 8006344:	2003      	movs	r0, #3
 8006346:	f000 f88f 	bl	8006468 <sendByte>
    sendByte(0x13);
 800634a:	2013      	movs	r0, #19
 800634c:	f000 f88c 	bl	8006468 <sendByte>

    sendOrder(0xE1);
 8006350:	20e1      	movs	r0, #225	; 0xe1
 8006352:	f000 f86d 	bl	8006430 <sendOrder>
    sendByte(0x04);
 8006356:	2004      	movs	r0, #4
 8006358:	f000 f886 	bl	8006468 <sendByte>
    sendByte(0x16);
 800635c:	2016      	movs	r0, #22
 800635e:	f000 f883 	bl	8006468 <sendByte>
    sendByte(0x06);
 8006362:	2006      	movs	r0, #6
 8006364:	f000 f880 	bl	8006468 <sendByte>
    sendByte(0x0D);
 8006368:	200d      	movs	r0, #13
 800636a:	f000 f87d 	bl	8006468 <sendByte>
    sendByte(0x2D);
 800636e:	202d      	movs	r0, #45	; 0x2d
 8006370:	f000 f87a 	bl	8006468 <sendByte>
    sendByte(0x26);
 8006374:	2026      	movs	r0, #38	; 0x26
 8006376:	f000 f877 	bl	8006468 <sendByte>
    sendByte(0x23);
 800637a:	2023      	movs	r0, #35	; 0x23
 800637c:	f000 f874 	bl	8006468 <sendByte>
    sendByte(0x27);
 8006380:	2027      	movs	r0, #39	; 0x27
 8006382:	f000 f871 	bl	8006468 <sendByte>
    sendByte(0x27);
 8006386:	2027      	movs	r0, #39	; 0x27
 8006388:	f000 f86e 	bl	8006468 <sendByte>
    sendByte(0x25);
 800638c:	2025      	movs	r0, #37	; 0x25
 800638e:	f000 f86b 	bl	8006468 <sendByte>
    sendByte(0x2D);
 8006392:	202d      	movs	r0, #45	; 0x2d
 8006394:	f000 f868 	bl	8006468 <sendByte>
    sendByte(0x3B);
 8006398:	203b      	movs	r0, #59	; 0x3b
 800639a:	f000 f865 	bl	8006468 <sendByte>
    sendByte(0x00);
 800639e:	2000      	movs	r0, #0
 80063a0:	f000 f862 	bl	8006468 <sendByte>
    sendByte(0x01);
 80063a4:	2001      	movs	r0, #1
 80063a6:	f000 f85f 	bl	8006468 <sendByte>
    sendByte(0x04);
 80063aa:	2004      	movs	r0, #4
 80063ac:	f000 f85c 	bl	8006468 <sendByte>
    sendByte(0x13);
 80063b0:	2013      	movs	r0, #19
 80063b2:	f000 f859 	bl	8006468 <sendByte>

    // 后期复制增加的，不明白
    sendOrder(0x2a);
 80063b6:	202a      	movs	r0, #42	; 0x2a
 80063b8:	f000 f83a 	bl	8006430 <sendOrder>
    sendByte(0x00);
 80063bc:	2000      	movs	r0, #0
 80063be:	f000 f853 	bl	8006468 <sendByte>
    sendByte(0x00);
 80063c2:	2000      	movs	r0, #0
 80063c4:	f000 f850 	bl	8006468 <sendByte>
    sendByte(0x00);
 80063c8:	2000      	movs	r0, #0
 80063ca:	f000 f84d 	bl	8006468 <sendByte>
    sendByte(0x7f);
 80063ce:	207f      	movs	r0, #127	; 0x7f
 80063d0:	f000 f84a 	bl	8006468 <sendByte>
    // 后期复制增加的，不明白
    sendOrder(0x2b);
 80063d4:	202b      	movs	r0, #43	; 0x2b
 80063d6:	f000 f82b 	bl	8006430 <sendOrder>
    sendByte(0x00);
 80063da:	2000      	movs	r0, #0
 80063dc:	f000 f844 	bl	8006468 <sendByte>
    sendByte(0x00);
 80063e0:	2000      	movs	r0, #0
 80063e2:	f000 f841 	bl	8006468 <sendByte>
    sendByte(0x00);
 80063e6:	2000      	movs	r0, #0
 80063e8:	f000 f83e 	bl	8006468 <sendByte>
    sendByte(0x9f);
 80063ec:	209f      	movs	r0, #159	; 0x9f
 80063ee:	f000 f83b 	bl	8006468 <sendByte>
    //------------------------------------End ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0x3A); // 65k mode
 80063f2:	203a      	movs	r0, #58	; 0x3a
 80063f4:	f000 f81c 	bl	8006430 <sendOrder>
    sendByte(0x05);
 80063f8:	2005      	movs	r0, #5
 80063fa:	f000 f835 	bl	8006468 <sendByte>

    sendOrder(0x29); // Display on
 80063fe:	2029      	movs	r0, #41	; 0x29
 8006400:	f000 f816 	bl	8006430 <sendOrder>

    LCD_Fill(1, 1, xLCD.width, xLCD.height, BLACK);
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <LCD_Init+0x278>)
 8006406:	885a      	ldrh	r2, [r3, #2]
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <LCD_Init+0x278>)
 800640a:	889b      	ldrh	r3, [r3, #4]
 800640c:	2100      	movs	r1, #0
 800640e:	9100      	str	r1, [sp, #0]
 8006410:	2101      	movs	r1, #1
 8006412:	2001      	movs	r0, #1
 8006414:	f000 f8e3 	bl	80065de <LCD_Fill>
    xLCD.InitOK = 1;
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <LCD_Init+0x278>)
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
}
 800641e:	bf00      	nop
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	200004cc 	.word	0x200004cc
 8006428:	20000104 	.word	0x20000104
 800642c:	40011400 	.word	0x40011400

08006430 <sendOrder>:

// 向LCD发送寄存器地址(指令)
void sendOrder(u16 order) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <sendOrder+0x34>)
 800643c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006440:	611a      	str	r2, [r3, #16]
    LCD_RS_LOW;            // RS高: 数据值， RS低: 寄存器地址值
 8006442:	4b08      	ldr	r3, [pc, #32]	; (8006464 <sendOrder+0x34>)
 8006444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006448:	611a      	str	r2, [r3, #16]
    spiSendByte(order);    // 发送 寄存器地址值
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fe8c 	bl	800616c <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <sendOrder+0x34>)
 8006456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800645a:	611a      	str	r2, [r3, #16]
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40011400 	.word	0x40011400

08006468 <sendByte>:

// 向LCD发送数值
void sendByte(u8 data) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <sendByte+0x34>)
 8006474:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006478:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据值， RS低: 寄存器地址值
 800647a:	4b08      	ldr	r3, [pc, #32]	; (800649c <sendByte+0x34>)
 800647c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006480:	611a      	str	r2, [r3, #16]
    spiSendByte(data);     // 发送1字节
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fe71 	bl	800616c <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <sendByte+0x34>)
 800648c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006490:	611a      	str	r2, [r3, #16]
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40011400 	.word	0x40011400

080064a0 <sendShort>:

// 向LCD发送2个字节
void sendShort(u16 data) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <sendShort+0x44>)
 80064ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80064b0:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据， RS低: 指令
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <sendShort+0x44>)
 80064b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b8:	611a      	str	r2, [r3, #16]
    spiSendByte(data >> 8);  // 发送1字节
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fe52 	bl	800616c <spiSendByte>
    spiSendByte(data);     // 发送1字节
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fe4d 	bl	800616c <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 80064d2:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <sendShort+0x44>)
 80064d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064d8:	611a      	str	r2, [r3, #16]
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40011400 	.word	0x40011400

080064e8 <LCD_Display>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void LCD_Display(u8 sw) {
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
    if (sw == 0)
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d104      	bne.n	8006502 <LCD_Display+0x1a>
        LCD_BL_LOW;
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <LCD_Display+0x2c>)
 80064fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064fe:	611a      	str	r2, [r3, #16]
    else
        LCD_BL_HIGH;
}
 8006500:	e003      	b.n	800650a <LCD_Display+0x22>
        LCD_BL_HIGH;
 8006502:	4b04      	ldr	r3, [pc, #16]	; (8006514 <LCD_Display+0x2c>)
 8006504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006508:	611a      	str	r2, [r3, #16]
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	40011400 	.word	0x40011400

08006518 <setCursor>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void setCursor(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd) {
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4623      	mov	r3, r4
 8006528:	80fb      	strh	r3, [r7, #6]
 800652a:	4603      	mov	r3, r0
 800652c:	80bb      	strh	r3, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	807b      	strh	r3, [r7, #2]
 8006532:	4613      	mov	r3, r2
 8006534:	803b      	strh	r3, [r7, #0]
    sendOrder(0x2A);
 8006536:	202a      	movs	r0, #42	; 0x2a
 8006538:	f7ff ff7a 	bl	8006430 <sendOrder>
    sendByte(xStart >> 8);   // 起始位置x高位，因为1.8寸屏是128*160, 不大于255, 直接写0省事
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	b29b      	uxth	r3, r3
 8006542:	b2db      	uxtb	r3, r3
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ff8f 	bl	8006468 <sendByte>
    sendByte(xStart); // 起始位置x低位，值传递时自动舍弃了高8位，也省得运算了
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ff8a 	bl	8006468 <sendByte>
    sendByte(xEnd >> 8);   // 起始位置y高位
 8006554:	887b      	ldrh	r3, [r7, #2]
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	b29b      	uxth	r3, r3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff83 	bl	8006468 <sendByte>
    sendByte(xEnd);   // 起始位置x位位
 8006562:	887b      	ldrh	r3, [r7, #2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff7e 	bl	8006468 <sendByte>

    sendOrder(0x2B);
 800656c:	202b      	movs	r0, #43	; 0x2b
 800656e:	f7ff ff5f 	bl	8006430 <sendOrder>
    sendByte(yStart >> 8);
 8006572:	88bb      	ldrh	r3, [r7, #4]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b29b      	uxth	r3, r3
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ff74 	bl	8006468 <sendByte>
    sendByte(yStart);
 8006580:	88bb      	ldrh	r3, [r7, #4]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff ff6f 	bl	8006468 <sendByte>
    sendByte(yEnd >> 8);
 800658a:	883b      	ldrh	r3, [r7, #0]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	b29b      	uxth	r3, r3
 8006590:	b2db      	uxtb	r3, r3
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff ff68 	bl	8006468 <sendByte>
    sendByte(yEnd);
 8006598:	883b      	ldrh	r3, [r7, #0]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff ff63 	bl	8006468 <sendByte>

    sendOrder(0x2c);  // 发送写数据命令
 80065a2:	202c      	movs	r0, #44	; 0x2c
 80065a4:	f7ff ff44 	bl	8006430 <sendOrder>
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd90      	pop	{r4, r7, pc}

080065b0 <drawPoint>:
函数名：在rawPoint
功  能：画一个点
参  数：无
返回值：无
*************************************************/
void drawPoint(u16 x, u16 y, u16 color) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	80fb      	strh	r3, [r7, #6]
 80065ba:	460b      	mov	r3, r1
 80065bc:	80bb      	strh	r3, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	807b      	strh	r3, [r7, #2]
    setCursor(x, y, x, y);      //设置光标位置
 80065c2:	88bb      	ldrh	r3, [r7, #4]
 80065c4:	88fa      	ldrh	r2, [r7, #6]
 80065c6:	88b9      	ldrh	r1, [r7, #4]
 80065c8:	88f8      	ldrh	r0, [r7, #6]
 80065ca:	f7ff ffa5 	bl	8006518 <setCursor>
    sendShort(color);
 80065ce:	887b      	ldrh	r3, [r7, #2]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ff65 	bl	80064a0 <sendShort>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <LCD_Fill>:
 *          u32 Color           填充的颜色
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
 *****************************************************************/
void LCD_Fill(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd, u16 color) {
 80065de:	b590      	push	{r4, r7, lr}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	4604      	mov	r4, r0
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	4623      	mov	r3, r4
 80065ee:	80fb      	strh	r3, [r7, #6]
 80065f0:	4603      	mov	r3, r0
 80065f2:	80bb      	strh	r3, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	807b      	strh	r3, [r7, #2]
 80065f8:	4613      	mov	r3, r2
 80065fa:	803b      	strh	r3, [r7, #0]
//    spiInit();                                      // 防止SPI参数被其它设备修改了
    u32 pixel = (xEnd - xStart + 1) * (yEnd - yStart + 1);    // 填充的像素数量
 80065fc:	887a      	ldrh	r2, [r7, #2]
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	3301      	adds	r3, #1
 8006604:	8839      	ldrh	r1, [r7, #0]
 8006606:	88ba      	ldrh	r2, [r7, #4]
 8006608:	1a8a      	subs	r2, r1, r2
 800660a:	3201      	adds	r2, #1
 800660c:	fb02 f303 	mul.w	r3, r2, r3
 8006610:	60fb      	str	r3, [r7, #12]

    setCursor(xStart, yStart, xEnd, yEnd);        // 设定填充范围
 8006612:	883b      	ldrh	r3, [r7, #0]
 8006614:	887a      	ldrh	r2, [r7, #2]
 8006616:	88b9      	ldrh	r1, [r7, #4]
 8006618:	88f8      	ldrh	r0, [r7, #6]
 800661a:	f7ff ff7d 	bl	8006518 <setCursor>
    while (pixel-- > 0)                                // 发送颜色值
 800661e:	e003      	b.n	8006628 <LCD_Fill+0x4a>
        sendShort(color);
 8006620:	8c3b      	ldrh	r3, [r7, #32]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff3c 	bl	80064a0 <sendShort>
    while (pixel-- > 0)                                // 发送颜色值
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e5a      	subs	r2, r3, #1
 800662c:	60fa      	str	r2, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f6      	bne.n	8006620 <LCD_Fill+0x42>
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bd90      	pop	{r4, r7, pc}

0800663c <drawAscii>:
 *          u8  size    字体大小 12/16/24/32
 *          u32 fColor  字体颜色
 *          u32 bColor  背景颜色
 * 备  注： 参考原子哥和野火大神的代码后修改  资料存放Q群：262901124
 *****************************************************************/
void drawAscii(u16 x, u16 y, u8 num, u8 size, u32 fColor, u32 bColor) {
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4623      	mov	r3, r4
 800664c:	80fb      	strh	r3, [r7, #6]
 800664e:	4603      	mov	r3, r0
 8006650:	80bb      	strh	r3, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
 8006656:	4613      	mov	r3, r2
 8006658:	70bb      	strb	r3, [r7, #2]
//    spiInit();                                        // 防止SPI参数被其它设备修改了

    if (xLCD.InitOK == 0) return;
 800665a:	4b50      	ldr	r3, [pc, #320]	; (800679c <drawAscii+0x160>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8094 	beq.w	800678c <drawAscii+0x150>

    u8 temp;
    u16 y0 = y;
 8006664:	88bb      	ldrh	r3, [r7, #4]
 8006666:	817b      	strh	r3, [r7, #10]

    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);           // 得到字体一个字符对应点阵集所占的字节数
 8006668:	78bb      	ldrb	r3, [r7, #2]
 800666a:	08db      	lsrs	r3, r3, #3
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	78bb      	ldrb	r3, [r7, #2]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf14      	ite	ne
 800667c:	2301      	movne	r3, #1
 800667e:	2300      	moveq	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	4413      	add	r3, r2
 8006684:	b2db      	uxtb	r3, r3
 8006686:	78ba      	ldrb	r2, [r7, #2]
 8006688:	0852      	lsrs	r2, r2, #1
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	727b      	strb	r3, [r7, #9]
    num = num - ' ';                                       // 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	3b20      	subs	r3, #32
 8006696:	70fb      	strb	r3, [r7, #3]
    for (u8 t = 0; t < csize; t++) {
 8006698:	2300      	movs	r3, #0
 800669a:	73bb      	strb	r3, [r7, #14]
 800669c:	e071      	b.n	8006782 <drawAscii+0x146>
        if (size == 12) temp = asc2_1206[num][t];   // 调用1206字体
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d10b      	bne.n	80066bc <drawAscii+0x80>
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	7bb9      	ldrb	r1, [r7, #14]
 80066a8:	483d      	ldr	r0, [pc, #244]	; (80067a0 <drawAscii+0x164>)
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4403      	add	r3, r0
 80066b4:	440b      	add	r3, r1
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e025      	b.n	8006708 <drawAscii+0xcc>
        else if (size == 16) temp = asc2_1608[num][t];   // 调用1608字体
 80066bc:	78bb      	ldrb	r3, [r7, #2]
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d108      	bne.n	80066d4 <drawAscii+0x98>
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	4937      	ldr	r1, [pc, #220]	; (80067a4 <drawAscii+0x168>)
 80066c8:	0112      	lsls	r2, r2, #4
 80066ca:	440a      	add	r2, r1
 80066cc:	4413      	add	r3, r2
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	e019      	b.n	8006708 <drawAscii+0xcc>
        else if (size == 24) temp = asc2_2412[num][t];   // 调用2412字体
 80066d4:	78bb      	ldrb	r3, [r7, #2]
 80066d6:	2b18      	cmp	r3, #24
 80066d8:	d10b      	bne.n	80066f2 <drawAscii+0xb6>
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	7bb9      	ldrb	r1, [r7, #14]
 80066de:	4832      	ldr	r0, [pc, #200]	; (80067a8 <drawAscii+0x16c>)
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4403      	add	r3, r0
 80066ea:	440b      	add	r3, r1
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	e00a      	b.n	8006708 <drawAscii+0xcc>
        else if (size == 32) temp = asc2_3216[num][t];   // 调用3216字体
 80066f2:	78bb      	ldrb	r3, [r7, #2]
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d14b      	bne.n	8006790 <drawAscii+0x154>
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	492b      	ldr	r1, [pc, #172]	; (80067ac <drawAscii+0x170>)
 80066fe:	0192      	lsls	r2, r2, #6
 8006700:	440a      	add	r2, r1
 8006702:	4413      	add	r3, r2
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	73fb      	strb	r3, [r7, #15]
        else return;                                   // 没有的字库

        for (u8 t1 = 0; t1 < 8; t1++) {
 8006708:	2300      	movs	r3, #0
 800670a:	737b      	strb	r3, [r7, #13]
 800670c:	e031      	b.n	8006772 <drawAscii+0x136>
            if (temp & 0x80) drawPoint(x, y, fColor);  // 字体 画点
 800670e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da07      	bge.n	8006726 <drawAscii+0xea>
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	b29a      	uxth	r2, r3
 800671a:	88b9      	ldrh	r1, [r7, #4]
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff ff46 	bl	80065b0 <drawPoint>
 8006724:	e006      	b.n	8006734 <drawAscii+0xf8>
            else drawPoint(x, y, bColor);  // 背景 画点
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	b29a      	uxth	r2, r3
 800672a:	88b9      	ldrh	r1, [r7, #4]
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff ff3e 	bl	80065b0 <drawPoint>
            temp <<= 1;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
            y++;
 800673a:	88bb      	ldrh	r3, [r7, #4]
 800673c:	3301      	adds	r3, #1
 800673e:	80bb      	strh	r3, [r7, #4]
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <drawAscii+0x160>)
 8006742:	889b      	ldrh	r3, [r3, #4]
 8006744:	88ba      	ldrh	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d224      	bcs.n	8006794 <drawAscii+0x158>
            if ((y - y0) == size) {
 800674a:	88ba      	ldrh	r2, [r7, #4]
 800674c:	897b      	ldrh	r3, [r7, #10]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	78bb      	ldrb	r3, [r7, #2]
 8006752:	429a      	cmp	r2, r3
 8006754:	d10a      	bne.n	800676c <drawAscii+0x130>
                y = y0;
 8006756:	897b      	ldrh	r3, [r7, #10]
 8006758:	80bb      	strh	r3, [r7, #4]
                x++;
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	3301      	adds	r3, #1
 800675e:	80fb      	strh	r3, [r7, #6]
                if (x >= xLCD.width) return;              // 超出屏幕宽度(宽)
 8006760:	4b0e      	ldr	r3, [pc, #56]	; (800679c <drawAscii+0x160>)
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	429a      	cmp	r2, r3
 8006768:	d307      	bcc.n	800677a <drawAscii+0x13e>
 800676a:	e014      	b.n	8006796 <drawAscii+0x15a>
        for (u8 t1 = 0; t1 < 8; t1++) {
 800676c:	7b7b      	ldrb	r3, [r7, #13]
 800676e:	3301      	adds	r3, #1
 8006770:	737b      	strb	r3, [r7, #13]
 8006772:	7b7b      	ldrb	r3, [r7, #13]
 8006774:	2b07      	cmp	r3, #7
 8006776:	d9ca      	bls.n	800670e <drawAscii+0xd2>
 8006778:	e000      	b.n	800677c <drawAscii+0x140>
                break;
 800677a:	bf00      	nop
    for (u8 t = 0; t < csize; t++) {
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	3301      	adds	r3, #1
 8006780:	73bb      	strb	r3, [r7, #14]
 8006782:	7bba      	ldrb	r2, [r7, #14]
 8006784:	7a7b      	ldrb	r3, [r7, #9]
 8006786:	429a      	cmp	r2, r3
 8006788:	d389      	bcc.n	800669e <drawAscii+0x62>
 800678a:	e004      	b.n	8006796 <drawAscii+0x15a>
    if (xLCD.InitOK == 0) return;
 800678c:	bf00      	nop
 800678e:	e002      	b.n	8006796 <drawAscii+0x15a>
        else return;                                   // 没有的字库
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <drawAscii+0x15a>
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 8006794:	bf00      	nop
            }
        }
    }
}
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}
 800679c:	200004cc 	.word	0x200004cc
 80067a0:	08007384 	.word	0x08007384
 80067a4:	080077f8 	.word	0x080077f8
 80067a8:	08007de8 	.word	0x08007de8
 80067ac:	08008b44 	.word	0x08008b44

080067b0 <LCD_String>:
 *
 * 参  数：
 * 返回值：　
 * 备  注： 魔女开发板团队  资料存放Q群：262901124        最后修改_2020年05月1８日
 ******************************************************************************/
void LCD_String(u16 x, u16 y, char *pFont, u8 size, u32 fColor, u32 bColor) {
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b089      	sub	sp, #36	; 0x24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60ba      	str	r2, [r7, #8]
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	81fb      	strh	r3, [r7, #14]
 80067be:	460b      	mov	r3, r1
 80067c0:	81bb      	strh	r3, [r7, #12]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
    if (xLCD.InitOK == 0) return;
 80067c6:	4b2d      	ldr	r3, [pc, #180]	; (800687c <LCD_String+0xcc>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d04f      	beq.n	800686e <LCD_String+0xbe>

    u16 xStart = x;
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	82fb      	strh	r3, [r7, #22]

    // 字体大小控制
    if (size != 12 && size != 16 && size != 24 && size != 32)
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	d045      	beq.n	8006864 <LCD_String+0xb4>
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d042      	beq.n	8006864 <LCD_String+0xb4>
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	2b18      	cmp	r3, #24
 80067e2:	d03f      	beq.n	8006864 <LCD_String+0xb4>
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d03c      	beq.n	8006864 <LCD_String+0xb4>
        size = 24;
 80067ea:	2318      	movs	r3, #24
 80067ec:	71fb      	strb	r3, [r7, #7]

    while (*pFont != 0) {
 80067ee:	e039      	b.n	8006864 <LCD_String+0xb4>
        // 位置控制
        if (x > (xLCD.width - size))       // 如果这一行不够位置，就下一行
 80067f0:	89fa      	ldrh	r2, [r7, #14]
 80067f2:	4b22      	ldr	r3, [pc, #136]	; (800687c <LCD_String+0xcc>)
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	4619      	mov	r1, r3
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	1acb      	subs	r3, r1, r3
 80067fc:	429a      	cmp	r2, r3
 80067fe:	dd06      	ble.n	800680e <LCD_String+0x5e>
        {
            x = xStart;
 8006800:	8afb      	ldrh	r3, [r7, #22]
 8006802:	81fb      	strh	r3, [r7, #14]
            y = y + size;
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	b29a      	uxth	r2, r3
 8006808:	89bb      	ldrh	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	81bb      	strh	r3, [r7, #12]
        }
        if (y > (xLCD.height - size))    // 如果到了屏幕底部，就返回，不再输出
 800680e:	89ba      	ldrh	r2, [r7, #12]
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <LCD_String+0xcc>)
 8006812:	889b      	ldrh	r3, [r3, #4]
 8006814:	4619      	mov	r1, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	1acb      	subs	r3, r1, r3
 800681a:	429a      	cmp	r2, r3
 800681c:	dc29      	bgt.n	8006872 <LCD_String+0xc2>
            return;

        // 判断文字是ASCII还是汉字
        if (*pFont < 127)              // ASCII字符
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b7e      	cmp	r3, #126	; 0x7e
 8006824:	d816      	bhi.n	8006854 <LCD_String+0xa4>
        {
            drawAscii(x, y, *pFont, size, fColor, bColor);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	79fc      	ldrb	r4, [r7, #7]
 800682c:	89b9      	ldrh	r1, [r7, #12]
 800682e:	89f8      	ldrh	r0, [r7, #14]
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	4623      	mov	r3, r4
 800683a:	f7ff feff 	bl	800663c <drawAscii>
            pFont++;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	3301      	adds	r3, #1
 8006842:	60bb      	str	r3, [r7, #8]
            x += size / 2;
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	b2db      	uxtb	r3, r3
 800684a:	b29a      	uxth	r2, r3
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	4413      	add	r3, r2
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	e007      	b.n	8006864 <LCD_String+0xb4>
        } else                          // 汉字显示
        {
            // 重要: 如果用的不是魔女开发板的字库, 就要修改或注释下面这一行, 这样就不影响ASCII英文字符的输出
            // drawGBK(x, y, (u8 *) pFont, size, fColor, bColor);
            pFont = pFont + 2;          // 下一个要显示的数据在内存中的位置
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3302      	adds	r3, #2
 8006858:	60bb      	str	r3, [r7, #8]
            x = x + size;                 // 下一个要显示的数据在屏幕上的X位置
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	b29a      	uxth	r2, r3
 800685e:	89fb      	ldrh	r3, [r7, #14]
 8006860:	4413      	add	r3, r2
 8006862:	81fb      	strh	r3, [r7, #14]
    while (*pFont != 0) {
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1c1      	bne.n	80067f0 <LCD_String+0x40>
 800686c:	e002      	b.n	8006874 <LCD_String+0xc4>
    if (xLCD.InitOK == 0) return;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <LCD_String+0xc4>
            return;
 8006872:	bf00      	nop
        }
    }
}
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}
 800687a:	bf00      	nop
 800687c:	200004cc 	.word	0x200004cc

08006880 <init>:
const float32_t PID_PARAM_KP = (float32_t) 50;
const float32_t PID_PARAM_KI = (float32_t) 0.01;
const float32_t PID_PARAM_KD = (float32_t) 5;


void init() {
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af02      	add	r7, sp, #8
    pid.Kp = PID_PARAM_KP;
 8006886:	4a30      	ldr	r2, [pc, #192]	; (8006948 <init+0xc8>)
 8006888:	4b30      	ldr	r3, [pc, #192]	; (800694c <init+0xcc>)
 800688a:	619a      	str	r2, [r3, #24]
    pid.Ki = PID_PARAM_KI;
 800688c:	4a30      	ldr	r2, [pc, #192]	; (8006950 <init+0xd0>)
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <init+0xcc>)
 8006890:	61da      	str	r2, [r3, #28]
    pid.Kd = PID_PARAM_KD;
 8006892:	4a30      	ldr	r2, [pc, #192]	; (8006954 <init+0xd4>)
 8006894:	4b2d      	ldr	r3, [pc, #180]	; (800694c <init+0xcc>)
 8006896:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&pid, 1);
 8006898:	2101      	movs	r1, #1
 800689a:	482c      	ldr	r0, [pc, #176]	; (800694c <init+0xcc>)
 800689c:	f7fb fa9b 	bl	8001dd6 <arm_pid_init_f32>

    HAL_Init();
 80068a0:	f7fb fad8 	bl	8001e54 <HAL_Init>
    SystemClock_Config();
 80068a4:	f7fa fcf2 	bl	800128c <SystemClock_Config>
    MX_GPIO_Init();
 80068a8:	f7fa fbf6 	bl	8001098 <MX_GPIO_Init>

    MX_USART1_UART_Init();
 80068ac:	f7fb f982 	bl	8001bb4 <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 80068b0:	f7fb f9aa 	bl	8001c08 <MX_USART3_UART_Init>
    HAL_UART_Receive_IT(&huart3,(uint8_t *) &tmp_data,1);
 80068b4:	2201      	movs	r2, #1
 80068b6:	4928      	ldr	r1, [pc, #160]	; (8006958 <init+0xd8>)
 80068b8:	4828      	ldr	r0, [pc, #160]	; (800695c <init+0xdc>)
 80068ba:	f7fe fc89 	bl	80051d0 <HAL_UART_Receive_IT>

    MX_SPI2_Init();
 80068be:	f7fa fd47 	bl	8001350 <MX_SPI2_Init>
    HAL_SPI_MspInit(&hspi2);
 80068c2:	4827      	ldr	r0, [pc, #156]	; (8006960 <init+0xe0>)
 80068c4:	f7fa fd7a 	bl	80013bc <HAL_SPI_MspInit>
    __HAL_SPI_ENABLE(&hspi2);
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <init+0xe0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <init+0xe0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d6:	601a      	str	r2, [r3, #0]

    LCD_Init();
 80068d8:	f7ff fc68 	bl	80061ac <LCD_Init>
    LCD_Display(true);
 80068dc:	2001      	movs	r0, #1
 80068de:	f7ff fe03 	bl	80064e8 <LCD_Display>
    LCD_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, GRAYBLUE);
 80068e2:	f245 4358 	movw	r3, #21592	; 0x5458
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	23c8      	movs	r3, #200	; 0xc8
 80068ea:	22c8      	movs	r2, #200	; 0xc8
 80068ec:	2100      	movs	r1, #0
 80068ee:	2000      	movs	r0, #0
 80068f0:	f7ff fe75 	bl	80065de <LCD_Fill>

    MX_DMA_Init();
 80068f4:	f7fa fbb2 	bl	800105c <MX_DMA_Init>
    MX_ADC1_Init();
 80068f8:	f7fa faea 	bl	8000ed0 <MX_ADC1_Init>
    HAL_ADC_MspInit(&hadc1);
 80068fc:	4819      	ldr	r0, [pc, #100]	; (8006964 <init+0xe4>)
 80068fe:	f7fa fb45 	bl	8000f8c <HAL_ADC_MspInit>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8006902:	4818      	ldr	r0, [pc, #96]	; (8006964 <init+0xe4>)
 8006904:	f7fb fdaa 	bl	800245c <HAL_ADCEx_Calibration_Start>

    MX_TIM1_Init();
 8006908:	f7fa fe92 	bl	8001630 <MX_TIM1_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800690c:	2100      	movs	r1, #0
 800690e:	4816      	ldr	r0, [pc, #88]	; (8006968 <init+0xe8>)
 8006910:	f7fd fc6c 	bl	80041ec <HAL_TIM_PWM_Start>

    MX_TIM3_Init();
 8006914:	f7fa ff0e 	bl	8001734 <MX_TIM3_Init>
    MX_TIM4_Init();
 8006918:	f7fa ff86 	bl	8001828 <MX_TIM4_Init>
    MX_TIM6_Init();
 800691c:	f7fa ffd2 	bl	80018c4 <MX_TIM6_Init>
    MX_TIM7_Init();
 8006920:	f7fb f806 	bl	8001930 <MX_TIM7_Init>

    HAL_TIM_Base_Start_IT(&htim1);
 8006924:	4810      	ldr	r0, [pc, #64]	; (8006968 <init+0xe8>)
 8006926:	f7fd fbb1 	bl	800408c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 800692a:	4810      	ldr	r0, [pc, #64]	; (800696c <init+0xec>)
 800692c:	f7fd fbae 	bl	800408c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8006930:	480f      	ldr	r0, [pc, #60]	; (8006970 <init+0xf0>)
 8006932:	f7fd fbab 	bl	800408c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 8006936:	480f      	ldr	r0, [pc, #60]	; (8006974 <init+0xf4>)
 8006938:	f7fd fba8 	bl	800408c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 800693c:	480e      	ldr	r0, [pc, #56]	; (8006978 <init+0xf8>)
 800693e:	f7fd fba5 	bl	800408c <HAL_TIM_Base_Start_IT>
}
 8006942:	bf00      	nop
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	42480000 	.word	0x42480000
 800694c:	2000043c 	.word	0x2000043c
 8006950:	3c23d70a 	.word	0x3c23d70a
 8006954:	40a00000 	.word	0x40a00000
 8006958:	20000464 	.word	0x20000464
 800695c:	20000310 	.word	0x20000310
 8006960:	20000104 	.word	0x20000104
 8006964:	20000090 	.word	0x20000090
 8006968:	20000160 	.word	0x20000160
 800696c:	200001a8 	.word	0x200001a8
 8006970:	200001f0 	.word	0x200001f0
 8006974:	20000238 	.word	0x20000238
 8006978:	20000280 	.word	0x20000280

0800697c <main>:

int main() {
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
    init();
 8006980:	f7ff ff7e 	bl	8006880 <init>
    while (true) {
 8006984:	e7fe      	b.n	8006984 <main+0x8>
	...

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000010 	.word	0x20000010

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	2600      	movs	r6, #0
 8006998:	4d0c      	ldr	r5, [pc, #48]	; (80069cc <__libc_init_array+0x38>)
 800699a:	4c0d      	ldr	r4, [pc, #52]	; (80069d0 <__libc_init_array+0x3c>)
 800699c:	1b64      	subs	r4, r4, r5
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	f000 fc9a 	bl	80072dc <_init>
 80069a8:	2600      	movs	r6, #0
 80069aa:	4d0a      	ldr	r5, [pc, #40]	; (80069d4 <__libc_init_array+0x40>)
 80069ac:	4c0a      	ldr	r4, [pc, #40]	; (80069d8 <__libc_init_array+0x44>)
 80069ae:	1b64      	subs	r4, r4, r5
 80069b0:	10a4      	asrs	r4, r4, #2
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	0800a39c 	.word	0x0800a39c
 80069d0:	0800a39c 	.word	0x0800a39c
 80069d4:	0800a39c 	.word	0x0800a39c
 80069d8:	0800a3a0 	.word	0x0800a3a0

080069dc <memset>:
 80069dc:	4603      	mov	r3, r0
 80069de:	4402      	add	r2, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <_free_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4605      	mov	r5, r0
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d040      	beq.n	8006a76 <_free_r+0x8a>
 80069f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f8:	1f0c      	subs	r4, r1, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bfb8      	it	lt
 80069fe:	18e4      	addlt	r4, r4, r3
 8006a00:	f000 face 	bl	8006fa0 <__malloc_lock>
 8006a04:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <_free_r+0x8c>)
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	b933      	cbnz	r3, 8006a18 <_free_r+0x2c>
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	6014      	str	r4, [r2, #0]
 8006a0e:	4628      	mov	r0, r5
 8006a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a14:	f000 baca 	b.w	8006fac <__malloc_unlock>
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d908      	bls.n	8006a2e <_free_r+0x42>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	1821      	adds	r1, r4, r0
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf01      	itttt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	1809      	addeq	r1, r1, r0
 8006a2a:	6021      	streq	r1, [r4, #0]
 8006a2c:	e7ed      	b.n	8006a0a <_free_r+0x1e>
 8006a2e:	461a      	mov	r2, r3
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b10b      	cbz	r3, 8006a38 <_free_r+0x4c>
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d9fa      	bls.n	8006a2e <_free_r+0x42>
 8006a38:	6811      	ldr	r1, [r2, #0]
 8006a3a:	1850      	adds	r0, r2, r1
 8006a3c:	42a0      	cmp	r0, r4
 8006a3e:	d10b      	bne.n	8006a58 <_free_r+0x6c>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	4401      	add	r1, r0
 8006a44:	1850      	adds	r0, r2, r1
 8006a46:	4283      	cmp	r3, r0
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	d1e0      	bne.n	8006a0e <_free_r+0x22>
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4401      	add	r1, r0
 8006a52:	6011      	str	r1, [r2, #0]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	e7da      	b.n	8006a0e <_free_r+0x22>
 8006a58:	d902      	bls.n	8006a60 <_free_r+0x74>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	e7d6      	b.n	8006a0e <_free_r+0x22>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	1821      	adds	r1, r4, r0
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf01      	itttt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	1809      	addeq	r1, r1, r0
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	6054      	str	r4, [r2, #4]
 8006a74:	e7cb      	b.n	8006a0e <_free_r+0x22>
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	200004d8 	.word	0x200004d8

08006a7c <sbrk_aligned>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4e0e      	ldr	r6, [pc, #56]	; (8006ab8 <sbrk_aligned+0x3c>)
 8006a80:	460c      	mov	r4, r1
 8006a82:	6831      	ldr	r1, [r6, #0]
 8006a84:	4605      	mov	r5, r0
 8006a86:	b911      	cbnz	r1, 8006a8e <sbrk_aligned+0x12>
 8006a88:	f000 fa22 	bl	8006ed0 <_sbrk_r>
 8006a8c:	6030      	str	r0, [r6, #0]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 fa1d 	bl	8006ed0 <_sbrk_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d00a      	beq.n	8006ab0 <sbrk_aligned+0x34>
 8006a9a:	1cc4      	adds	r4, r0, #3
 8006a9c:	f024 0403 	bic.w	r4, r4, #3
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d007      	beq.n	8006ab4 <sbrk_aligned+0x38>
 8006aa4:	1a21      	subs	r1, r4, r0
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 fa12 	bl	8006ed0 <_sbrk_r>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d101      	bne.n	8006ab4 <sbrk_aligned+0x38>
 8006ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	200004dc 	.word	0x200004dc

08006abc <_malloc_r>:
 8006abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac0:	1ccd      	adds	r5, r1, #3
 8006ac2:	f025 0503 	bic.w	r5, r5, #3
 8006ac6:	3508      	adds	r5, #8
 8006ac8:	2d0c      	cmp	r5, #12
 8006aca:	bf38      	it	cc
 8006acc:	250c      	movcc	r5, #12
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	db01      	blt.n	8006ad8 <_malloc_r+0x1c>
 8006ad4:	42a9      	cmp	r1, r5
 8006ad6:	d905      	bls.n	8006ae4 <_malloc_r+0x28>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	2600      	movs	r6, #0
 8006adc:	603b      	str	r3, [r7, #0]
 8006ade:	4630      	mov	r0, r6
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae4:	4e2e      	ldr	r6, [pc, #184]	; (8006ba0 <_malloc_r+0xe4>)
 8006ae6:	f000 fa5b 	bl	8006fa0 <__malloc_lock>
 8006aea:	6833      	ldr	r3, [r6, #0]
 8006aec:	461c      	mov	r4, r3
 8006aee:	bb34      	cbnz	r4, 8006b3e <_malloc_r+0x82>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4638      	mov	r0, r7
 8006af4:	f7ff ffc2 	bl	8006a7c <sbrk_aligned>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	4604      	mov	r4, r0
 8006afc:	d14d      	bne.n	8006b9a <_malloc_r+0xde>
 8006afe:	6834      	ldr	r4, [r6, #0]
 8006b00:	4626      	mov	r6, r4
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	d140      	bne.n	8006b88 <_malloc_r+0xcc>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	eb04 0803 	add.w	r8, r4, r3
 8006b10:	f000 f9de 	bl	8006ed0 <_sbrk_r>
 8006b14:	4580      	cmp	r8, r0
 8006b16:	d13a      	bne.n	8006b8e <_malloc_r+0xd2>
 8006b18:	6821      	ldr	r1, [r4, #0]
 8006b1a:	3503      	adds	r5, #3
 8006b1c:	1a6d      	subs	r5, r5, r1
 8006b1e:	f025 0503 	bic.w	r5, r5, #3
 8006b22:	3508      	adds	r5, #8
 8006b24:	2d0c      	cmp	r5, #12
 8006b26:	bf38      	it	cc
 8006b28:	250c      	movcc	r5, #12
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7ff ffa5 	bl	8006a7c <sbrk_aligned>
 8006b32:	3001      	adds	r0, #1
 8006b34:	d02b      	beq.n	8006b8e <_malloc_r+0xd2>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	442b      	add	r3, r5
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	e00e      	b.n	8006b5c <_malloc_r+0xa0>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	1b52      	subs	r2, r2, r5
 8006b42:	d41e      	bmi.n	8006b82 <_malloc_r+0xc6>
 8006b44:	2a0b      	cmp	r2, #11
 8006b46:	d916      	bls.n	8006b76 <_malloc_r+0xba>
 8006b48:	1961      	adds	r1, r4, r5
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	6025      	str	r5, [r4, #0]
 8006b4e:	bf18      	it	ne
 8006b50:	6059      	strne	r1, [r3, #4]
 8006b52:	6863      	ldr	r3, [r4, #4]
 8006b54:	bf08      	it	eq
 8006b56:	6031      	streq	r1, [r6, #0]
 8006b58:	5162      	str	r2, [r4, r5]
 8006b5a:	604b      	str	r3, [r1, #4]
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f104 060b 	add.w	r6, r4, #11
 8006b62:	f000 fa23 	bl	8006fac <__malloc_unlock>
 8006b66:	f026 0607 	bic.w	r6, r6, #7
 8006b6a:	1d23      	adds	r3, r4, #4
 8006b6c:	1af2      	subs	r2, r6, r3
 8006b6e:	d0b6      	beq.n	8006ade <_malloc_r+0x22>
 8006b70:	1b9b      	subs	r3, r3, r6
 8006b72:	50a3      	str	r3, [r4, r2]
 8006b74:	e7b3      	b.n	8006ade <_malloc_r+0x22>
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	bf0c      	ite	eq
 8006b7c:	6032      	streq	r2, [r6, #0]
 8006b7e:	605a      	strne	r2, [r3, #4]
 8006b80:	e7ec      	b.n	8006b5c <_malloc_r+0xa0>
 8006b82:	4623      	mov	r3, r4
 8006b84:	6864      	ldr	r4, [r4, #4]
 8006b86:	e7b2      	b.n	8006aee <_malloc_r+0x32>
 8006b88:	4634      	mov	r4, r6
 8006b8a:	6876      	ldr	r6, [r6, #4]
 8006b8c:	e7b9      	b.n	8006b02 <_malloc_r+0x46>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	4638      	mov	r0, r7
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	f000 fa0a 	bl	8006fac <__malloc_unlock>
 8006b98:	e7a1      	b.n	8006ade <_malloc_r+0x22>
 8006b9a:	6025      	str	r5, [r4, #0]
 8006b9c:	e7de      	b.n	8006b5c <_malloc_r+0xa0>
 8006b9e:	bf00      	nop
 8006ba0:	200004d8 	.word	0x200004d8

08006ba4 <_printf_common>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	4616      	mov	r6, r2
 8006baa:	4699      	mov	r9, r3
 8006bac:	688a      	ldr	r2, [r1, #8]
 8006bae:	690b      	ldr	r3, [r1, #16]
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	bfb8      	it	lt
 8006bb6:	4613      	movlt	r3, r2
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bc4:	b10a      	cbz	r2, 8006bca <_printf_common+0x26>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	0699      	lsls	r1, r3, #26
 8006bce:	bf42      	ittt	mi
 8006bd0:	6833      	ldrmi	r3, [r6, #0]
 8006bd2:	3302      	addmi	r3, #2
 8006bd4:	6033      	strmi	r3, [r6, #0]
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	f015 0506 	ands.w	r5, r5, #6
 8006bdc:	d106      	bne.n	8006bec <_printf_common+0x48>
 8006bde:	f104 0a19 	add.w	sl, r4, #25
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	6832      	ldr	r2, [r6, #0]
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	dc28      	bgt.n	8006c3e <_printf_common+0x9a>
 8006bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf0:	1e13      	subs	r3, r2, #0
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	0692      	lsls	r2, r2, #26
 8006bfa:	d42d      	bmi.n	8006c58 <_printf_common+0xb4>
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c04:	47c0      	blx	r8
 8006c06:	3001      	adds	r0, #1
 8006c08:	d020      	beq.n	8006c4c <_printf_common+0xa8>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	68e5      	ldr	r5, [r4, #12]
 8006c0e:	f003 0306 	and.w	r3, r3, #6
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	bf18      	it	ne
 8006c16:	2500      	movne	r5, #0
 8006c18:	6832      	ldr	r2, [r6, #0]
 8006c1a:	f04f 0600 	mov.w	r6, #0
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	bf08      	it	eq
 8006c22:	1aad      	subeq	r5, r5, r2
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	bf08      	it	eq
 8006c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bfc4      	itt	gt
 8006c30:	1a9b      	subgt	r3, r3, r2
 8006c32:	18ed      	addgt	r5, r5, r3
 8006c34:	341a      	adds	r4, #26
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d11a      	bne.n	8006c70 <_printf_common+0xcc>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e008      	b.n	8006c50 <_printf_common+0xac>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4649      	mov	r1, r9
 8006c44:	4638      	mov	r0, r7
 8006c46:	47c0      	blx	r8
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0xb0>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	3501      	adds	r5, #1
 8006c56:	e7c4      	b.n	8006be2 <_printf_common+0x3e>
 8006c58:	2030      	movs	r0, #48	; 0x30
 8006c5a:	18e1      	adds	r1, r4, r3
 8006c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c66:	4422      	add	r2, r4
 8006c68:	3302      	adds	r3, #2
 8006c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c6e:	e7c5      	b.n	8006bfc <_printf_common+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	4649      	mov	r1, r9
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0e6      	beq.n	8006c4c <_printf_common+0xa8>
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7d9      	b.n	8006c36 <_printf_common+0x92>
	...

08006c84 <_printf_i>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	7e0f      	ldrb	r7, [r1, #24]
 8006c8a:	4691      	mov	r9, r2
 8006c8c:	2f78      	cmp	r7, #120	; 0x78
 8006c8e:	4680      	mov	r8, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	469a      	mov	sl, r3
 8006c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c9a:	d807      	bhi.n	8006cac <_printf_i+0x28>
 8006c9c:	2f62      	cmp	r7, #98	; 0x62
 8006c9e:	d80a      	bhi.n	8006cb6 <_printf_i+0x32>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f000 80d9 	beq.w	8006e58 <_printf_i+0x1d4>
 8006ca6:	2f58      	cmp	r7, #88	; 0x58
 8006ca8:	f000 80a4 	beq.w	8006df4 <_printf_i+0x170>
 8006cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb4:	e03a      	b.n	8006d2c <_printf_i+0xa8>
 8006cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cba:	2b15      	cmp	r3, #21
 8006cbc:	d8f6      	bhi.n	8006cac <_printf_i+0x28>
 8006cbe:	a101      	add	r1, pc, #4	; (adr r1, 8006cc4 <_printf_i+0x40>)
 8006cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006cad 	.word	0x08006cad
 8006cd0:	08006cad 	.word	0x08006cad
 8006cd4:	08006cad 	.word	0x08006cad
 8006cd8:	08006cad 	.word	0x08006cad
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006cad 	.word	0x08006cad
 8006ce4:	08006cad 	.word	0x08006cad
 8006ce8:	08006cad 	.word	0x08006cad
 8006cec:	08006cad 	.word	0x08006cad
 8006cf0:	08006e3f 	.word	0x08006e3f
 8006cf4:	08006d61 	.word	0x08006d61
 8006cf8:	08006e21 	.word	0x08006e21
 8006cfc:	08006cad 	.word	0x08006cad
 8006d00:	08006cad 	.word	0x08006cad
 8006d04:	08006e61 	.word	0x08006e61
 8006d08:	08006cad 	.word	0x08006cad
 8006d0c:	08006d61 	.word	0x08006d61
 8006d10:	08006cad 	.word	0x08006cad
 8006d14:	08006cad 	.word	0x08006cad
 8006d18:	08006e29 	.word	0x08006e29
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	602a      	str	r2, [r5, #0]
 8006d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0a4      	b.n	8006e7a <_printf_i+0x1f6>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	6829      	ldr	r1, [r5, #0]
 8006d34:	0606      	lsls	r6, r0, #24
 8006d36:	f101 0304 	add.w	r3, r1, #4
 8006d3a:	d50a      	bpl.n	8006d52 <_printf_i+0xce>
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	da03      	bge.n	8006d4c <_printf_i+0xc8>
 8006d44:	232d      	movs	r3, #45	; 0x2d
 8006d46:	4276      	negs	r6, r6
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4c:	230a      	movs	r3, #10
 8006d4e:	485e      	ldr	r0, [pc, #376]	; (8006ec8 <_printf_i+0x244>)
 8006d50:	e019      	b.n	8006d86 <_printf_i+0x102>
 8006d52:	680e      	ldr	r6, [r1, #0]
 8006d54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	bf18      	it	ne
 8006d5c:	b236      	sxthne	r6, r6
 8006d5e:	e7ef      	b.n	8006d40 <_printf_i+0xbc>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1d19      	adds	r1, r3, #4
 8006d66:	6029      	str	r1, [r5, #0]
 8006d68:	0601      	lsls	r1, r0, #24
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0xec>
 8006d6c:	681e      	ldr	r6, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <_printf_i+0xf2>
 8006d70:	0646      	lsls	r6, r0, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0xe8>
 8006d74:	881e      	ldrh	r6, [r3, #0]
 8006d76:	2f6f      	cmp	r7, #111	; 0x6f
 8006d78:	bf0c      	ite	eq
 8006d7a:	2308      	moveq	r3, #8
 8006d7c:	230a      	movne	r3, #10
 8006d7e:	4852      	ldr	r0, [pc, #328]	; (8006ec8 <_printf_i+0x244>)
 8006d80:	2100      	movs	r1, #0
 8006d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d86:	6865      	ldr	r5, [r4, #4]
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	bfa8      	it	ge
 8006d8c:	6821      	ldrge	r1, [r4, #0]
 8006d8e:	60a5      	str	r5, [r4, #8]
 8006d90:	bfa4      	itt	ge
 8006d92:	f021 0104 	bicge.w	r1, r1, #4
 8006d96:	6021      	strge	r1, [r4, #0]
 8006d98:	b90e      	cbnz	r6, 8006d9e <_printf_i+0x11a>
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	d04d      	beq.n	8006e3a <_printf_i+0x1b6>
 8006d9e:	4615      	mov	r5, r2
 8006da0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006da4:	fb03 6711 	mls	r7, r3, r1, r6
 8006da8:	5dc7      	ldrb	r7, [r0, r7]
 8006daa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dae:	4637      	mov	r7, r6
 8006db0:	42bb      	cmp	r3, r7
 8006db2:	460e      	mov	r6, r1
 8006db4:	d9f4      	bls.n	8006da0 <_printf_i+0x11c>
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d10b      	bne.n	8006dd2 <_printf_i+0x14e>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	07de      	lsls	r6, r3, #31
 8006dbe:	d508      	bpl.n	8006dd2 <_printf_i+0x14e>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	6861      	ldr	r1, [r4, #4]
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	bfde      	ittt	le
 8006dc8:	2330      	movle	r3, #48	; 0x30
 8006dca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dd2:	1b52      	subs	r2, r2, r5
 8006dd4:	6122      	str	r2, [r4, #16]
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	aa03      	add	r2, sp, #12
 8006de2:	f7ff fedf 	bl	8006ba4 <_printf_common>
 8006de6:	3001      	adds	r0, #1
 8006de8:	d14c      	bne.n	8006e84 <_printf_i+0x200>
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	b004      	add	sp, #16
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	4834      	ldr	r0, [pc, #208]	; (8006ec8 <_printf_i+0x244>)
 8006df6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dfa:	6829      	ldr	r1, [r5, #0]
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e02:	6029      	str	r1, [r5, #0]
 8006e04:	061d      	lsls	r5, r3, #24
 8006e06:	d514      	bpl.n	8006e32 <_printf_i+0x1ae>
 8006e08:	07df      	lsls	r7, r3, #31
 8006e0a:	bf44      	itt	mi
 8006e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8006e10:	6023      	strmi	r3, [r4, #0]
 8006e12:	b91e      	cbnz	r6, 8006e1c <_printf_i+0x198>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	e7af      	b.n	8006d80 <_printf_i+0xfc>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f043 0320 	orr.w	r3, r3, #32
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	2378      	movs	r3, #120	; 0x78
 8006e2a:	4828      	ldr	r0, [pc, #160]	; (8006ecc <_printf_i+0x248>)
 8006e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e30:	e7e3      	b.n	8006dfa <_printf_i+0x176>
 8006e32:	0659      	lsls	r1, r3, #25
 8006e34:	bf48      	it	mi
 8006e36:	b2b6      	uxthmi	r6, r6
 8006e38:	e7e6      	b.n	8006e08 <_printf_i+0x184>
 8006e3a:	4615      	mov	r5, r2
 8006e3c:	e7bb      	b.n	8006db6 <_printf_i+0x132>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	6826      	ldr	r6, [r4, #0]
 8006e42:	1d18      	adds	r0, r3, #4
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	6028      	str	r0, [r5, #0]
 8006e48:	0635      	lsls	r5, r6, #24
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	d501      	bpl.n	8006e52 <_printf_i+0x1ce>
 8006e4e:	6019      	str	r1, [r3, #0]
 8006e50:	e002      	b.n	8006e58 <_printf_i+0x1d4>
 8006e52:	0670      	lsls	r0, r6, #25
 8006e54:	d5fb      	bpl.n	8006e4e <_printf_i+0x1ca>
 8006e56:	8019      	strh	r1, [r3, #0]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4615      	mov	r5, r2
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	e7ba      	b.n	8006dd6 <_printf_i+0x152>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	2100      	movs	r1, #0
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f861 	bl	8006f34 <memchr>
 8006e72:	b108      	cbz	r0, 8006e78 <_printf_i+0x1f4>
 8006e74:	1b40      	subs	r0, r0, r5
 8006e76:	6060      	str	r0, [r4, #4]
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e82:	e7a8      	b.n	8006dd6 <_printf_i+0x152>
 8006e84:	462a      	mov	r2, r5
 8006e86:	4649      	mov	r1, r9
 8006e88:	4640      	mov	r0, r8
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	47d0      	blx	sl
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d0ab      	beq.n	8006dea <_printf_i+0x166>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	079b      	lsls	r3, r3, #30
 8006e96:	d413      	bmi.n	8006ec0 <_printf_i+0x23c>
 8006e98:	68e0      	ldr	r0, [r4, #12]
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	4298      	cmp	r0, r3
 8006e9e:	bfb8      	it	lt
 8006ea0:	4618      	movlt	r0, r3
 8006ea2:	e7a4      	b.n	8006dee <_printf_i+0x16a>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4640      	mov	r0, r8
 8006eac:	47d0      	blx	sl
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d09b      	beq.n	8006dea <_printf_i+0x166>
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	68e3      	ldr	r3, [r4, #12]
 8006eb6:	9903      	ldr	r1, [sp, #12]
 8006eb8:	1a5b      	subs	r3, r3, r1
 8006eba:	42ab      	cmp	r3, r5
 8006ebc:	dcf2      	bgt.n	8006ea4 <_printf_i+0x220>
 8006ebe:	e7eb      	b.n	8006e98 <_printf_i+0x214>
 8006ec0:	2500      	movs	r5, #0
 8006ec2:	f104 0619 	add.w	r6, r4, #25
 8006ec6:	e7f5      	b.n	8006eb4 <_printf_i+0x230>
 8006ec8:	0800a304 	.word	0x0800a304
 8006ecc:	0800a315 	.word	0x0800a315

08006ed0 <_sbrk_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4d05      	ldr	r5, [pc, #20]	; (8006eec <_sbrk_r+0x1c>)
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7fa fb6c 	bl	80015b8 <_sbrk>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_sbrk_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_sbrk_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	200004e4 	.word	0x200004e4

08006ef0 <siprintf>:
 8006ef0:	b40e      	push	{r1, r2, r3}
 8006ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ef6:	b500      	push	{lr}
 8006ef8:	b09c      	sub	sp, #112	; 0x70
 8006efa:	ab1d      	add	r3, sp, #116	; 0x74
 8006efc:	9002      	str	r0, [sp, #8]
 8006efe:	9006      	str	r0, [sp, #24]
 8006f00:	9107      	str	r1, [sp, #28]
 8006f02:	9104      	str	r1, [sp, #16]
 8006f04:	4808      	ldr	r0, [pc, #32]	; (8006f28 <siprintf+0x38>)
 8006f06:	4909      	ldr	r1, [pc, #36]	; (8006f2c <siprintf+0x3c>)
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	a902      	add	r1, sp, #8
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	f000 f8da 	bl	80070cc <_svfiprintf_r>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	b01c      	add	sp, #112	; 0x70
 8006f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f24:	b003      	add	sp, #12
 8006f26:	4770      	bx	lr
 8006f28:	20000010 	.word	0x20000010
 8006f2c:	ffff0208 	.word	0xffff0208

08006f30 <__retarget_lock_acquire_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <__retarget_lock_release_recursive>:
 8006f32:	4770      	bx	lr

08006f34 <memchr>:
 8006f34:	4603      	mov	r3, r0
 8006f36:	b510      	push	{r4, lr}
 8006f38:	b2c9      	uxtb	r1, r1
 8006f3a:	4402      	add	r2, r0
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	d101      	bne.n	8006f46 <memchr+0x12>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e003      	b.n	8006f4e <memchr+0x1a>
 8006f46:	7804      	ldrb	r4, [r0, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	428c      	cmp	r4, r1
 8006f4c:	d1f6      	bne.n	8006f3c <memchr+0x8>
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <memcpy>:
 8006f50:	440a      	add	r2, r1
 8006f52:	4291      	cmp	r1, r2
 8006f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f58:	d100      	bne.n	8006f5c <memcpy+0xc>
 8006f5a:	4770      	bx	lr
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f62:	4291      	cmp	r1, r2
 8006f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f68:	d1f9      	bne.n	8006f5e <memcpy+0xe>
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <memmove>:
 8006f6c:	4288      	cmp	r0, r1
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	eb01 0402 	add.w	r4, r1, r2
 8006f74:	d902      	bls.n	8006f7c <memmove+0x10>
 8006f76:	4284      	cmp	r4, r0
 8006f78:	4623      	mov	r3, r4
 8006f7a:	d807      	bhi.n	8006f8c <memmove+0x20>
 8006f7c:	1e43      	subs	r3, r0, #1
 8006f7e:	42a1      	cmp	r1, r4
 8006f80:	d008      	beq.n	8006f94 <memmove+0x28>
 8006f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8a:	e7f8      	b.n	8006f7e <memmove+0x12>
 8006f8c:	4601      	mov	r1, r0
 8006f8e:	4402      	add	r2, r0
 8006f90:	428a      	cmp	r2, r1
 8006f92:	d100      	bne.n	8006f96 <memmove+0x2a>
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f9e:	e7f7      	b.n	8006f90 <memmove+0x24>

08006fa0 <__malloc_lock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__malloc_lock+0x8>)
 8006fa2:	f7ff bfc5 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	200004e0 	.word	0x200004e0

08006fac <__malloc_unlock>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__malloc_unlock+0x8>)
 8006fae:	f7ff bfc0 	b.w	8006f32 <__retarget_lock_release_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	200004e0 	.word	0x200004e0

08006fb8 <_realloc_r>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	b921      	cbnz	r1, 8006fce <_realloc_r+0x16>
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	f7ff bd77 	b.w	8006abc <_malloc_r>
 8006fce:	b92a      	cbnz	r2, 8006fdc <_realloc_r+0x24>
 8006fd0:	f7ff fd0c 	bl	80069ec <_free_r>
 8006fd4:	4625      	mov	r5, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	f000 f976 	bl	80072cc <_malloc_usable_size_r>
 8006fe0:	4284      	cmp	r4, r0
 8006fe2:	4607      	mov	r7, r0
 8006fe4:	d802      	bhi.n	8006fec <_realloc_r+0x34>
 8006fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fea:	d812      	bhi.n	8007012 <_realloc_r+0x5a>
 8006fec:	4621      	mov	r1, r4
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f7ff fd64 	bl	8006abc <_malloc_r>
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d0ed      	beq.n	8006fd6 <_realloc_r+0x1e>
 8006ffa:	42bc      	cmp	r4, r7
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4631      	mov	r1, r6
 8007000:	bf28      	it	cs
 8007002:	463a      	movcs	r2, r7
 8007004:	f7ff ffa4 	bl	8006f50 <memcpy>
 8007008:	4631      	mov	r1, r6
 800700a:	4640      	mov	r0, r8
 800700c:	f7ff fcee 	bl	80069ec <_free_r>
 8007010:	e7e1      	b.n	8006fd6 <_realloc_r+0x1e>
 8007012:	4635      	mov	r5, r6
 8007014:	e7df      	b.n	8006fd6 <_realloc_r+0x1e>

08007016 <__ssputs_r>:
 8007016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701a:	688e      	ldr	r6, [r1, #8]
 800701c:	4682      	mov	sl, r0
 800701e:	429e      	cmp	r6, r3
 8007020:	460c      	mov	r4, r1
 8007022:	4690      	mov	r8, r2
 8007024:	461f      	mov	r7, r3
 8007026:	d838      	bhi.n	800709a <__ssputs_r+0x84>
 8007028:	898a      	ldrh	r2, [r1, #12]
 800702a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800702e:	d032      	beq.n	8007096 <__ssputs_r+0x80>
 8007030:	6825      	ldr	r5, [r4, #0]
 8007032:	6909      	ldr	r1, [r1, #16]
 8007034:	3301      	adds	r3, #1
 8007036:	eba5 0901 	sub.w	r9, r5, r1
 800703a:	6965      	ldr	r5, [r4, #20]
 800703c:	444b      	add	r3, r9
 800703e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007046:	106d      	asrs	r5, r5, #1
 8007048:	429d      	cmp	r5, r3
 800704a:	bf38      	it	cc
 800704c:	461d      	movcc	r5, r3
 800704e:	0553      	lsls	r3, r2, #21
 8007050:	d531      	bpl.n	80070b6 <__ssputs_r+0xa0>
 8007052:	4629      	mov	r1, r5
 8007054:	f7ff fd32 	bl	8006abc <_malloc_r>
 8007058:	4606      	mov	r6, r0
 800705a:	b950      	cbnz	r0, 8007072 <__ssputs_r+0x5c>
 800705c:	230c      	movs	r3, #12
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	f8ca 3000 	str.w	r3, [sl]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007072:	464a      	mov	r2, r9
 8007074:	6921      	ldr	r1, [r4, #16]
 8007076:	f7ff ff6b 	bl	8006f50 <memcpy>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6126      	str	r6, [r4, #16]
 8007088:	444e      	add	r6, r9
 800708a:	6026      	str	r6, [r4, #0]
 800708c:	463e      	mov	r6, r7
 800708e:	6165      	str	r5, [r4, #20]
 8007090:	eba5 0509 	sub.w	r5, r5, r9
 8007094:	60a5      	str	r5, [r4, #8]
 8007096:	42be      	cmp	r6, r7
 8007098:	d900      	bls.n	800709c <__ssputs_r+0x86>
 800709a:	463e      	mov	r6, r7
 800709c:	4632      	mov	r2, r6
 800709e:	4641      	mov	r1, r8
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	f7ff ff63 	bl	8006f6c <memmove>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	2000      	movs	r0, #0
 80070aa:	1b9b      	subs	r3, r3, r6
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	4433      	add	r3, r6
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	e7db      	b.n	800706e <__ssputs_r+0x58>
 80070b6:	462a      	mov	r2, r5
 80070b8:	f7ff ff7e 	bl	8006fb8 <_realloc_r>
 80070bc:	4606      	mov	r6, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	d1e1      	bne.n	8007086 <__ssputs_r+0x70>
 80070c2:	4650      	mov	r0, sl
 80070c4:	6921      	ldr	r1, [r4, #16]
 80070c6:	f7ff fc91 	bl	80069ec <_free_r>
 80070ca:	e7c7      	b.n	800705c <__ssputs_r+0x46>

080070cc <_svfiprintf_r>:
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	4698      	mov	r8, r3
 80070d2:	898b      	ldrh	r3, [r1, #12]
 80070d4:	4607      	mov	r7, r0
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	460d      	mov	r5, r1
 80070da:	4614      	mov	r4, r2
 80070dc:	b09d      	sub	sp, #116	; 0x74
 80070de:	d50e      	bpl.n	80070fe <_svfiprintf_r+0x32>
 80070e0:	690b      	ldr	r3, [r1, #16]
 80070e2:	b963      	cbnz	r3, 80070fe <_svfiprintf_r+0x32>
 80070e4:	2140      	movs	r1, #64	; 0x40
 80070e6:	f7ff fce9 	bl	8006abc <_malloc_r>
 80070ea:	6028      	str	r0, [r5, #0]
 80070ec:	6128      	str	r0, [r5, #16]
 80070ee:	b920      	cbnz	r0, 80070fa <_svfiprintf_r+0x2e>
 80070f0:	230c      	movs	r3, #12
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	e0d1      	b.n	800729e <_svfiprintf_r+0x1d2>
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	616b      	str	r3, [r5, #20]
 80070fe:	2300      	movs	r3, #0
 8007100:	9309      	str	r3, [sp, #36]	; 0x24
 8007102:	2320      	movs	r3, #32
 8007104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007108:	2330      	movs	r3, #48	; 0x30
 800710a:	f04f 0901 	mov.w	r9, #1
 800710e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072b8 <_svfiprintf_r+0x1ec>
 8007116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800711a:	4623      	mov	r3, r4
 800711c:	469a      	mov	sl, r3
 800711e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007122:	b10a      	cbz	r2, 8007128 <_svfiprintf_r+0x5c>
 8007124:	2a25      	cmp	r2, #37	; 0x25
 8007126:	d1f9      	bne.n	800711c <_svfiprintf_r+0x50>
 8007128:	ebba 0b04 	subs.w	fp, sl, r4
 800712c:	d00b      	beq.n	8007146 <_svfiprintf_r+0x7a>
 800712e:	465b      	mov	r3, fp
 8007130:	4622      	mov	r2, r4
 8007132:	4629      	mov	r1, r5
 8007134:	4638      	mov	r0, r7
 8007136:	f7ff ff6e 	bl	8007016 <__ssputs_r>
 800713a:	3001      	adds	r0, #1
 800713c:	f000 80aa 	beq.w	8007294 <_svfiprintf_r+0x1c8>
 8007140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007142:	445a      	add	r2, fp
 8007144:	9209      	str	r2, [sp, #36]	; 0x24
 8007146:	f89a 3000 	ldrb.w	r3, [sl]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80a2 	beq.w	8007294 <_svfiprintf_r+0x1c8>
 8007150:	2300      	movs	r3, #0
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715a:	f10a 0a01 	add.w	sl, sl, #1
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007166:	931a      	str	r3, [sp, #104]	; 0x68
 8007168:	4654      	mov	r4, sl
 800716a:	2205      	movs	r2, #5
 800716c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007170:	4851      	ldr	r0, [pc, #324]	; (80072b8 <_svfiprintf_r+0x1ec>)
 8007172:	f7ff fedf 	bl	8006f34 <memchr>
 8007176:	9a04      	ldr	r2, [sp, #16]
 8007178:	b9d8      	cbnz	r0, 80071b2 <_svfiprintf_r+0xe6>
 800717a:	06d0      	lsls	r0, r2, #27
 800717c:	bf44      	itt	mi
 800717e:	2320      	movmi	r3, #32
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007184:	0711      	lsls	r1, r2, #28
 8007186:	bf44      	itt	mi
 8007188:	232b      	movmi	r3, #43	; 0x2b
 800718a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800718e:	f89a 3000 	ldrb.w	r3, [sl]
 8007192:	2b2a      	cmp	r3, #42	; 0x2a
 8007194:	d015      	beq.n	80071c2 <_svfiprintf_r+0xf6>
 8007196:	4654      	mov	r4, sl
 8007198:	2000      	movs	r0, #0
 800719a:	f04f 0c0a 	mov.w	ip, #10
 800719e:	9a07      	ldr	r2, [sp, #28]
 80071a0:	4621      	mov	r1, r4
 80071a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a6:	3b30      	subs	r3, #48	; 0x30
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d94e      	bls.n	800724a <_svfiprintf_r+0x17e>
 80071ac:	b1b0      	cbz	r0, 80071dc <_svfiprintf_r+0x110>
 80071ae:	9207      	str	r2, [sp, #28]
 80071b0:	e014      	b.n	80071dc <_svfiprintf_r+0x110>
 80071b2:	eba0 0308 	sub.w	r3, r0, r8
 80071b6:	fa09 f303 	lsl.w	r3, r9, r3
 80071ba:	4313      	orrs	r3, r2
 80071bc:	46a2      	mov	sl, r4
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	e7d2      	b.n	8007168 <_svfiprintf_r+0x9c>
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	1d19      	adds	r1, r3, #4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	9103      	str	r1, [sp, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfbb      	ittet	lt
 80071ce:	425b      	neglt	r3, r3
 80071d0:	f042 0202 	orrlt.w	r2, r2, #2
 80071d4:	9307      	strge	r3, [sp, #28]
 80071d6:	9307      	strlt	r3, [sp, #28]
 80071d8:	bfb8      	it	lt
 80071da:	9204      	strlt	r2, [sp, #16]
 80071dc:	7823      	ldrb	r3, [r4, #0]
 80071de:	2b2e      	cmp	r3, #46	; 0x2e
 80071e0:	d10c      	bne.n	80071fc <_svfiprintf_r+0x130>
 80071e2:	7863      	ldrb	r3, [r4, #1]
 80071e4:	2b2a      	cmp	r3, #42	; 0x2a
 80071e6:	d135      	bne.n	8007254 <_svfiprintf_r+0x188>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	3402      	adds	r4, #2
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9203      	str	r2, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfb8      	it	lt
 80071f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80072bc <_svfiprintf_r+0x1f0>
 8007200:	2203      	movs	r2, #3
 8007202:	4650      	mov	r0, sl
 8007204:	7821      	ldrb	r1, [r4, #0]
 8007206:	f7ff fe95 	bl	8006f34 <memchr>
 800720a:	b140      	cbz	r0, 800721e <_svfiprintf_r+0x152>
 800720c:	2340      	movs	r3, #64	; 0x40
 800720e:	eba0 000a 	sub.w	r0, r0, sl
 8007212:	fa03 f000 	lsl.w	r0, r3, r0
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	3401      	adds	r4, #1
 800721a:	4303      	orrs	r3, r0
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007222:	2206      	movs	r2, #6
 8007224:	4826      	ldr	r0, [pc, #152]	; (80072c0 <_svfiprintf_r+0x1f4>)
 8007226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800722a:	f7ff fe83 	bl	8006f34 <memchr>
 800722e:	2800      	cmp	r0, #0
 8007230:	d038      	beq.n	80072a4 <_svfiprintf_r+0x1d8>
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <_svfiprintf_r+0x1f8>)
 8007234:	bb1b      	cbnz	r3, 800727e <_svfiprintf_r+0x1b2>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	3307      	adds	r3, #7
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	3308      	adds	r3, #8
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007244:	4433      	add	r3, r6
 8007246:	9309      	str	r3, [sp, #36]	; 0x24
 8007248:	e767      	b.n	800711a <_svfiprintf_r+0x4e>
 800724a:	460c      	mov	r4, r1
 800724c:	2001      	movs	r0, #1
 800724e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007252:	e7a5      	b.n	80071a0 <_svfiprintf_r+0xd4>
 8007254:	2300      	movs	r3, #0
 8007256:	f04f 0c0a 	mov.w	ip, #10
 800725a:	4619      	mov	r1, r3
 800725c:	3401      	adds	r4, #1
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	4620      	mov	r0, r4
 8007262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007266:	3a30      	subs	r2, #48	; 0x30
 8007268:	2a09      	cmp	r2, #9
 800726a:	d903      	bls.n	8007274 <_svfiprintf_r+0x1a8>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0c5      	beq.n	80071fc <_svfiprintf_r+0x130>
 8007270:	9105      	str	r1, [sp, #20]
 8007272:	e7c3      	b.n	80071fc <_svfiprintf_r+0x130>
 8007274:	4604      	mov	r4, r0
 8007276:	2301      	movs	r3, #1
 8007278:	fb0c 2101 	mla	r1, ip, r1, r2
 800727c:	e7f0      	b.n	8007260 <_svfiprintf_r+0x194>
 800727e:	ab03      	add	r3, sp, #12
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	462a      	mov	r2, r5
 8007284:	4638      	mov	r0, r7
 8007286:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <_svfiprintf_r+0x1fc>)
 8007288:	a904      	add	r1, sp, #16
 800728a:	f3af 8000 	nop.w
 800728e:	1c42      	adds	r2, r0, #1
 8007290:	4606      	mov	r6, r0
 8007292:	d1d6      	bne.n	8007242 <_svfiprintf_r+0x176>
 8007294:	89ab      	ldrh	r3, [r5, #12]
 8007296:	065b      	lsls	r3, r3, #25
 8007298:	f53f af2c 	bmi.w	80070f4 <_svfiprintf_r+0x28>
 800729c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729e:	b01d      	add	sp, #116	; 0x74
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4638      	mov	r0, r7
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <_svfiprintf_r+0x1fc>)
 80072ae:	a904      	add	r1, sp, #16
 80072b0:	f7ff fce8 	bl	8006c84 <_printf_i>
 80072b4:	e7eb      	b.n	800728e <_svfiprintf_r+0x1c2>
 80072b6:	bf00      	nop
 80072b8:	0800a388 	.word	0x0800a388
 80072bc:	0800a38e 	.word	0x0800a38e
 80072c0:	0800a392 	.word	0x0800a392
 80072c4:	00000000 	.word	0x00000000
 80072c8:	08007017 	.word	0x08007017

080072cc <_malloc_usable_size_r>:
 80072cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d0:	1f18      	subs	r0, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfbc      	itt	lt
 80072d6:	580b      	ldrlt	r3, [r1, r0]
 80072d8:	18c0      	addlt	r0, r0, r3
 80072da:	4770      	bx	lr

080072dc <_init>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr

080072e8 <_fini>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr

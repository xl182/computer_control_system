
computer_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008784  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003248  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbb4  0800bbb4  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbb4  0800bbb4  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbb4  0800bbb4  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb8  0800bbb8  0001bbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800bbbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054e4  20000278  0800be34  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000575c  0800be34  0002575c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b35  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382e  00000000  00000000  00035dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7ee  00000000  00000000  0003b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a955  00000000  00000000  000591de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3354  00000000  00000000  00073b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00116ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000278 	.word	0x20000278
 8000204:	00000000 	.word	0x00000000
 8000208:	08008954 	.word	0x08008954

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000027c 	.word	0x2000027c
 8000224:	08008954 	.word	0x08008954

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2f>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009dc:	bf24      	itt	cs
 80009de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009e6:	d90d      	bls.n	8000a04 <__aeabi_d2f+0x30>
 80009e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009fc:	bf08      	it	eq
 80009fe:	f020 0001 	biceq.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a08:	d121      	bne.n	8000a4e <__aeabi_d2f+0x7a>
 8000a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a0e:	bfbc      	itt	lt
 8000a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	4770      	bxlt	lr
 8000a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a1e:	f1c2 0218 	rsb	r2, r2, #24
 8000a22:	f1c2 0c20 	rsb	ip, r2, #32
 8000a26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a2e:	bf18      	it	ne
 8000a30:	f040 0001 	orrne.w	r0, r0, #1
 8000a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a40:	ea40 000c 	orr.w	r0, r0, ip
 8000a44:	fa23 f302 	lsr.w	r3, r3, r2
 8000a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a4c:	e7cc      	b.n	80009e8 <__aeabi_d2f+0x14>
 8000a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a52:	d107      	bne.n	8000a64 <__aeabi_d2f+0x90>
 8000a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a58:	bf1e      	ittt	ne
 8000a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a62:	4770      	bxne	lr
 8000a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_frsub>:
 8000a74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	e002      	b.n	8000a80 <__addsf3>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fsub>:
 8000a7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a80 <__addsf3>:
 8000a80:	0042      	lsls	r2, r0, #1
 8000a82:	bf1f      	itttt	ne
 8000a84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a88:	ea92 0f03 	teqne	r2, r3
 8000a8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a94:	d06a      	beq.n	8000b6c <__addsf3+0xec>
 8000a96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a9e:	bfc1      	itttt	gt
 8000aa0:	18d2      	addgt	r2, r2, r3
 8000aa2:	4041      	eorgt	r1, r0
 8000aa4:	4048      	eorgt	r0, r1
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	2b19      	cmp	r3, #25
 8000aae:	bf88      	it	hi
 8000ab0:	4770      	bxhi	lr
 8000ab2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4249      	negne	r1, r1
 8000ad2:	ea92 0f03 	teq	r2, r3
 8000ad6:	d03f      	beq.n	8000b58 <__addsf3+0xd8>
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae0:	eb10 000c 	adds.w	r0, r0, ip
 8000ae4:	f1c3 0320 	rsb	r3, r3, #32
 8000ae8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__addsf3+0x78>
 8000af2:	4249      	negs	r1, r1
 8000af4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000afc:	d313      	bcc.n	8000b26 <__addsf3+0xa6>
 8000afe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b02:	d306      	bcc.n	8000b12 <__addsf3+0x92>
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0a:	f102 0201 	add.w	r2, r2, #1
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	d251      	bcs.n	8000bb6 <__addsf3+0x136>
 8000b12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	ea40 0003 	orr.w	r0, r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	0049      	lsls	r1, r1, #1
 8000b28:	eb40 0000 	adc.w	r0, r0, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b34:	d2ed      	bcs.n	8000b12 <__addsf3+0x92>
 8000b36:	fab0 fc80 	clz	ip, r0
 8000b3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b46:	bfaa      	itet	ge
 8000b48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b4c:	4252      	neglt	r2, r2
 8000b4e:	4318      	orrge	r0, r3
 8000b50:	bfbc      	itt	lt
 8000b52:	40d0      	lsrlt	r0, r2
 8000b54:	4318      	orrlt	r0, r3
 8000b56:	4770      	bx	lr
 8000b58:	f092 0f00 	teq	r2, #0
 8000b5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b60:	bf06      	itte	eq
 8000b62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b66:	3201      	addeq	r2, #1
 8000b68:	3b01      	subne	r3, #1
 8000b6a:	e7b5      	b.n	8000ad8 <__addsf3+0x58>
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d021      	beq.n	8000bc0 <__addsf3+0x140>
 8000b7c:	ea92 0f03 	teq	r2, r3
 8000b80:	d004      	beq.n	8000b8c <__addsf3+0x10c>
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf08      	it	eq
 8000b88:	4608      	moveq	r0, r1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea90 0f01 	teq	r0, r1
 8000b90:	bf1c      	itt	ne
 8000b92:	2000      	movne	r0, #0
 8000b94:	4770      	bxne	lr
 8000b96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9a:	d104      	bne.n	8000ba6 <__addsf3+0x126>
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000baa:	bf3c      	itt	cc
 8000bac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bxcc	lr
 8000bb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	4770      	bx	lr
 8000bc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc4:	bf16      	itet	ne
 8000bc6:	4608      	movne	r0, r1
 8000bc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bcc:	4601      	movne	r1, r0
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	bf06      	itte	eq
 8000bd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bd6:	ea90 0f01 	teqeq	r0, r1
 8000bda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_ui2f>:
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e004      	b.n	8000bf0 <__aeabi_i2f+0x8>
 8000be6:	bf00      	nop

08000be8 <__aeabi_i2f>:
 8000be8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bec:	bf48      	it	mi
 8000bee:	4240      	negmi	r0, r0
 8000bf0:	ea5f 0c00 	movs.w	ip, r0
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	e01c      	b.n	8000c3e <__aeabi_l2f+0x2a>

08000c04 <__aeabi_ul2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e00a      	b.n	8000c28 <__aeabi_l2f+0x14>
 8000c12:	bf00      	nop

08000c14 <__aeabi_l2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_l2f+0x14>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	ea5f 0c01 	movs.w	ip, r1
 8000c2c:	bf02      	ittt	eq
 8000c2e:	4684      	moveq	ip, r0
 8000c30:	4601      	moveq	r1, r0
 8000c32:	2000      	moveq	r0, #0
 8000c34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c38:	bf08      	it	eq
 8000c3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c42:	fabc f28c 	clz	r2, ip
 8000c46:	3a08      	subs	r2, #8
 8000c48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c4c:	db10      	blt.n	8000c70 <__aeabi_l2f+0x5c>
 8000c4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f102 0220 	add.w	r2, r2, #32
 8000c74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c80:	fa21 f202 	lsr.w	r2, r1, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fmul>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d06f      	beq.n	8000d88 <__aeabi_fmul+0xf8>
 8000ca8:	441a      	add	r2, r3
 8000caa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cae:	0240      	lsls	r0, r0, #9
 8000cb0:	bf18      	it	ne
 8000cb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cb6:	d01e      	beq.n	8000cf6 <__aeabi_fmul+0x66>
 8000cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ccc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd0:	bf3e      	ittt	cc
 8000cd2:	0049      	lslcc	r1, r1, #1
 8000cd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd8:	005b      	lslcc	r3, r3, #1
 8000cda:	ea40 0001 	orr.w	r0, r0, r1
 8000cde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce2:	2afd      	cmp	r2, #253	; 0xfd
 8000ce4:	d81d      	bhi.n	8000d22 <__aeabi_fmul+0x92>
 8000ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	4770      	bx	lr
 8000cf6:	f090 0f00 	teq	r0, #0
 8000cfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	0249      	lsleq	r1, r1, #9
 8000d02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0a:	3a7f      	subs	r2, #127	; 0x7f
 8000d0c:	bfc2      	ittt	gt
 8000d0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d16:	4770      	bxgt	lr
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	3a01      	subs	r2, #1
 8000d22:	dc5d      	bgt.n	8000de0 <__aeabi_fmul+0x150>
 8000d24:	f112 0f19 	cmn.w	r2, #25
 8000d28:	bfdc      	itt	le
 8000d2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d2e:	4770      	bxle	lr
 8000d30:	f1c2 0200 	rsb	r2, r2, #0
 8000d34:	0041      	lsls	r1, r0, #1
 8000d36:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3a:	f1c2 0220 	rsb	r2, r2, #32
 8000d3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d46:	f140 0000 	adc.w	r0, r0, #0
 8000d4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d4e:	bf08      	it	eq
 8000d50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d54:	4770      	bx	lr
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0040      	lsleq	r0, r0, #1
 8000d62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d66:	3a01      	subeq	r2, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xce>
 8000d6a:	ea40 000c 	orr.w	r0, r0, ip
 8000d6e:	f093 0f00 	teq	r3, #0
 8000d72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0049      	lsleq	r1, r1, #1
 8000d7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d7e:	3b01      	subeq	r3, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xe6>
 8000d82:	ea41 010c 	orr.w	r1, r1, ip
 8000d86:	e78f      	b.n	8000ca8 <__aeabi_fmul+0x18>
 8000d88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	bf18      	it	ne
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d00a      	beq.n	8000dae <__aeabi_fmul+0x11e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1d8      	bne.n	8000d56 <__aeabi_fmul+0xc6>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	bf17      	itett	ne
 8000db4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db8:	4608      	moveq	r0, r1
 8000dba:	f091 0f00 	teqne	r1, #0
 8000dbe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc2:	d014      	beq.n	8000dee <__aeabi_fmul+0x15e>
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fmul+0x13e>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d10f      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000dce:	ea93 0f0c 	teq	r3, ip
 8000dd2:	d103      	bne.n	8000ddc <__aeabi_fmul+0x14c>
 8000dd4:	024b      	lsls	r3, r1, #9
 8000dd6:	bf18      	it	ne
 8000dd8:	4608      	movne	r0, r1
 8000dda:	d108      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dec:	4770      	bx	lr
 8000dee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_fdiv>:
 8000df8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e00:	bf1e      	ittt	ne
 8000e02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e06:	ea92 0f0c 	teqne	r2, ip
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d069      	beq.n	8000ee4 <__aeabi_fdiv+0xec>
 8000e10:	eba2 0203 	sub.w	r2, r2, r3
 8000e14:	ea80 0c01 	eor.w	ip, r0, r1
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e1e:	d037      	beq.n	8000e90 <__aeabi_fdiv+0x98>
 8000e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf38      	it	cc
 8000e34:	005b      	lslcc	r3, r3, #1
 8000e36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	bf24      	itt	cs
 8000e42:	1a5b      	subcs	r3, r3, r1
 8000e44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e4c:	bf24      	itt	cs
 8000e4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5a:	bf24      	itt	cs
 8000e5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e68:	bf24      	itt	cs
 8000e6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7a:	d1e0      	bne.n	8000e3e <__aeabi_fdiv+0x46>
 8000e7c:	2afd      	cmp	r2, #253	; 0xfd
 8000e7e:	f63f af50 	bhi.w	8000d22 <__aeabi_fmul+0x92>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e98:	327f      	adds	r2, #127	; 0x7f
 8000e9a:	bfc2      	ittt	gt
 8000e9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea4:	4770      	bxgt	lr
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	3a01      	subs	r2, #1
 8000eb0:	e737      	b.n	8000d22 <__aeabi_fmul+0x92>
 8000eb2:	f092 0f00 	teq	r2, #0
 8000eb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0040      	lsleq	r0, r0, #1
 8000ebe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec2:	3a01      	subeq	r2, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xc2>
 8000ec6:	ea40 000c 	orr.w	r0, r0, ip
 8000eca:	f093 0f00 	teq	r3, #0
 8000ece:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0049      	lsleq	r1, r1, #1
 8000ed6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eda:	3b01      	subeq	r3, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xda>
 8000ede:	ea41 010c 	orr.w	r1, r1, ip
 8000ee2:	e795      	b.n	8000e10 <__aeabi_fdiv+0x18>
 8000ee4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d108      	bne.n	8000f00 <__aeabi_fdiv+0x108>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	f47f af7d 	bne.w	8000dee <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	f47f af70 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e776      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	d104      	bne.n	8000f10 <__aeabi_fdiv+0x118>
 8000f06:	024b      	lsls	r3, r1, #9
 8000f08:	f43f af4c 	beq.w	8000da4 <__aeabi_fmul+0x114>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e76e      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f14:	bf18      	it	ne
 8000f16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	d1ca      	bne.n	8000eb2 <__aeabi_fdiv+0xba>
 8000f1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f20:	f47f af5c 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000f24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f28:	f47f af3c 	bne.w	8000da4 <__aeabi_fmul+0x114>
 8000f2c:	e75f      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f2e:	bf00      	nop

08000f30 <__gesf2>:
 8000f30:	f04f 3cff 	mov.w	ip, #4294967295
 8000f34:	e006      	b.n	8000f44 <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__lesf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	e002      	b.n	8000f44 <__cmpsf2+0x4>
 8000f3e:	bf00      	nop

08000f40 <__cmpsf2>:
 8000f40:	f04f 0c01 	mov.w	ip, #1
 8000f44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	bf18      	it	ne
 8000f56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5a:	d011      	beq.n	8000f80 <__cmpsf2+0x40>
 8000f5c:	b001      	add	sp, #4
 8000f5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f62:	bf18      	it	ne
 8000f64:	ea90 0f01 	teqne	r0, r1
 8000f68:	bf58      	it	pl
 8000f6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f6e:	bf88      	it	hi
 8000f70:	17c8      	asrhi	r0, r1, #31
 8000f72:	bf38      	it	cc
 8000f74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f78:	bf18      	it	ne
 8000f7a:	f040 0001 	orrne.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f84:	d102      	bne.n	8000f8c <__cmpsf2+0x4c>
 8000f86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8a:	d105      	bne.n	8000f98 <__cmpsf2+0x58>
 8000f8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f90:	d1e4      	bne.n	8000f5c <__cmpsf2+0x1c>
 8000f92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f96:	d0e1      	beq.n	8000f5c <__cmpsf2+0x1c>
 8000f98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_cfrcmple>:
 8000fa0:	4684      	mov	ip, r0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4661      	mov	r1, ip
 8000fa6:	e7ff      	b.n	8000fa8 <__aeabi_cfcmpeq>

08000fa8 <__aeabi_cfcmpeq>:
 8000fa8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000faa:	f7ff ffc9 	bl	8000f40 <__cmpsf2>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	bf48      	it	mi
 8000fb2:	f110 0f00 	cmnmi.w	r0, #0
 8000fb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb8 <__aeabi_fcmpeq>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff fff4 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fc0:	bf0c      	ite	eq
 8000fc2:	2001      	moveq	r0, #1
 8000fc4:	2000      	movne	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmplt>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffea 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fd4:	bf34      	ite	cc
 8000fd6:	2001      	movcc	r0, #1
 8000fd8:	2000      	movcs	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmple>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffe0 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fe8:	bf94      	ite	ls
 8000fea:	2001      	movls	r0, #1
 8000fec:	2000      	movhi	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmpge>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffd2 	bl	8000fa0 <__aeabi_cfrcmple>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpgt>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffc8 	bl	8000fa0 <__aeabi_cfrcmple>
 8001010:	bf34      	ite	cc
 8001012:	2001      	movcc	r0, #1
 8001014:	2000      	movcs	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_f2uiz>:
 800101c:	0042      	lsls	r2, r0, #1
 800101e:	d20e      	bcs.n	800103e <__aeabi_f2uiz+0x22>
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30b      	bcc.n	800103e <__aeabi_f2uiz+0x22>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d409      	bmi.n	8001044 <__aeabi_f2uiz+0x28>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	fa23 f002 	lsr.w	r0, r3, r2
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2uiz+0x32>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d102      	bne.n	8001054 <__aeabi_f2uiz+0x38>
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	4770      	bx	lr
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <MX_ADC1_Init+0xb0>)
 800106e:	4a28      	ldr	r2, [pc, #160]	; (8001110 <MX_ADC1_Init+0xb4>)
 8001070:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_ADC1_Init+0xb0>)
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_ADC1_Init+0xb0>)
 800107c:	2201      	movs	r2, #1
 800107e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_ADC1_Init+0xb0>)
 8001082:	2200      	movs	r2, #0
 8001084:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_ADC1_Init+0xb0>)
 8001088:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_ADC1_Init+0xb0>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_ADC1_Init+0xb0>)
 8001096:	2203      	movs	r2, #3
 8001098:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <MX_ADC1_Init+0xb0>)
 800109c:	f001 f8a6 	bl	80021ec <HAL_ADC_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010a6:	f000 fa14 	bl	80014d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_ADC1_Init+0xb0>)
 80010bc:	f001 fabc 	bl	8002638 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fa04 	bl	80014d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_ADC1_Init+0xb0>)
 80010d8:	f001 faae 	bl	8002638 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010e2:	f000 f9f6 	bl	80014d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010e6:	2306      	movs	r3, #6
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_ADC1_Init+0xb0>)
 80010f4:	f001 faa0 	bl	8002638 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010fe:	f000 f9e8 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000294 	.word	0x20000294
 8001110:	40012400 	.word	0x40012400

08001114 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_ADC_MspInit+0xc0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d14a      	bne.n	80011ca <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_ADC_MspInit+0xc4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vout_Pin|NTC_Pin|T12_Pin;
 8001164:	2346      	movs	r3, #70	; 0x46
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	481a      	ldr	r0, [pc, #104]	; (80011dc <HAL_ADC_MspInit+0xc8>)
 8001174:	f002 fa9a 	bl	80036ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_ADC_MspInit+0xd0>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 800119a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 80011a8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 80011b0:	f001 fdf8 	bl	8002da4 <HAL_DMA_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80011ba:	f000 f98a 	bl	80014d2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 80011c2:	621a      	str	r2, [r3, #32]
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_ADC_MspInit+0xcc>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012400 	.word	0x40012400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	200002c4 	.word	0x200002c4
 80011e4:	40020008 	.word	0x40020008

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x38>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x38>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x38>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f001 fd93 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f001 fdac 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800123e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a69      	ldr	r2, [pc, #420]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b64      	ldr	r3, [pc, #400]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a63      	ldr	r2, [pc, #396]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b61      	ldr	r3, [pc, #388]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a5d      	ldr	r2, [pc, #372]	; (80013fc <MX_GPIO_Init+0x1d8>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001298:	4b58      	ldr	r3, [pc, #352]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a57      	ldr	r2, [pc, #348]	; (80013fc <MX_GPIO_Init+0x1d8>)
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b55      	ldr	r3, [pc, #340]	; (80013fc <MX_GPIO_Init+0x1d8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_Pin|STATE_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012b6:	4852      	ldr	r0, [pc, #328]	; (8001400 <MX_GPIO_Init+0x1dc>)
 80012b8:	f002 fba3 	bl	8003a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80012c2:	4850      	ldr	r0, [pc, #320]	; (8001404 <MX_GPIO_Init+0x1e0>)
 80012c4:	f002 fb9d 	bl	8003a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ce:	484e      	ldr	r0, [pc, #312]	; (8001408 <MX_GPIO_Init+0x1e4>)
 80012d0:	f002 fb97 	bl	8003a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012d4:	f643 53ff 	movw	r3, #15871	; 0x3dff
 80012d8:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4846      	ldr	r0, [pc, #280]	; (8001400 <MX_GPIO_Init+0x1dc>)
 80012e6:	f002 f9e1 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 PC8
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80012ea:	f643 5330 	movw	r3, #15664	; 0x3d30
 80012ee:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4844      	ldr	r0, [pc, #272]	; (800140c <MX_GPIO_Init+0x1e8>)
 80012fc:	f002 f9d6 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SW_Pin|A_Pin|B_Pin|key_Pin;
 8001300:	230f      	movs	r3, #15
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <MX_GPIO_Init+0x1ec>)
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	4619      	mov	r1, r3
 8001312:	483e      	ldr	r0, [pc, #248]	; (800140c <MX_GPIO_Init+0x1e8>)
 8001314:	f002 f9ca 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8001318:	f649 13b8 	movw	r3, #39352	; 0x99b8
 800131c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	4619      	mov	r1, r3
 8001328:	483a      	ldr	r0, [pc, #232]	; (8001414 <MX_GPIO_Init+0x1f0>)
 800132a:	f002 f9bf 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800132e:	f241 13ff 	movw	r3, #4607	; 0x11ff
 8001332:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4619      	mov	r1, r3
 800133e:	4832      	ldr	r0, [pc, #200]	; (8001408 <MX_GPIO_Init+0x1e4>)
 8001340:	f002 f9b4 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_Pin|STATE_Pin;
 8001344:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	4828      	ldr	r0, [pc, #160]	; (8001400 <MX_GPIO_Init+0x1dc>)
 800135e:	f002 f9a5 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin;
 8001362:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4619      	mov	r1, r3
 800137a:	4822      	ldr	r0, [pc, #136]	; (8001404 <MX_GPIO_Init+0x1e0>)
 800137c:	f002 f996 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001380:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001384:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4619      	mov	r1, r3
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_GPIO_Init+0x1e0>)
 8001392:	f002 f98b 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2302      	movs	r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x1e4>)
 80013b0:	f002 f97c 	bl	80036ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2006      	movs	r0, #6
 80013ba:	f001 fcbc 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013be:	2006      	movs	r0, #6
 80013c0:	f001 fcd5 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2007      	movs	r0, #7
 80013ca:	f001 fcb4 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f001 fccd 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2008      	movs	r0, #8
 80013da:	f001 fcac 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013de:	2008      	movs	r0, #8
 80013e0:	f001 fcc5 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2009      	movs	r0, #9
 80013ea:	f001 fca4 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013ee:	2009      	movs	r0, #9
 80013f0:	f001 fcbd 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	40011800 	.word	0x40011800
 8001404:	40011400 	.word	0x40011400
 8001408:	40010c00 	.word	0x40010c00
 800140c:	40011000 	.word	0x40011000
 8001410:	10210000 	.word	0x10210000
 8001414:	40010800 	.word	0x40010800

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b096      	sub	sp, #88	; 0x58
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001422:	2228      	movs	r2, #40	; 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f006 f864 	bl	80074f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800146c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb0e 	bl	8003a94 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800147e:	f000 f828 	bl	80014d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fd7a 	bl	8003f98 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014aa:	f000 f812 	bl	80014d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ae:	2302      	movs	r3, #2
 80014b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fefa 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80014c6:	f000 f804 	bl	80014d2 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3758      	adds	r7, #88	; 0x58
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d6:	b672      	cpsid	i
}
 80014d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014da:	e7fe      	b.n	80014da <Error_Handler+0x8>

080014dc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_SPI2_Init+0x64>)
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <MX_SPI2_Init+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI2_Init+0x64>)
 80014e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI2_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_SPI2_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI2_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI2_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI2_Init+0x64>)
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI2_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_SPI2_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI2_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_SPI2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI2_Init+0x64>)
 8001528:	220a      	movs	r2, #10
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_SPI2_Init+0x64>)
 800152e:	f003 f84f 	bl	80045d0 <HAL_SPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001538:	f7ff ffcb 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000308 	.word	0x20000308
 8001544:	40003800 	.word	0x40003800

08001548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d131      	bne.n	80015cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 800156e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_SPI_MspInit+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001598:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800159c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <HAL_SPI_MspInit+0x94>)
 80015ae:	f002 f87d 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_SPI_MspInit+0x94>)
 80015c8:	f002 f870 	bl	80036ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40003800 	.word	0x40003800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_MspInit+0x5c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x5c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x5c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x5c>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MspInit+0x60>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_MspInit+0x60>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000

08001644 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  }
}

/**
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
 800168a:	f000 fd6f 	bl	800216c <HAL_IncTick>

  /* USER CODE END PendSV_IRQn 1 */
}

 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI0_IRQHandler>:

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
 8001696:	2001      	movs	r0, #1
 8001698:	f002 f9e4 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
 80016a4:	2002      	movs	r0, #2
 80016a6:	f002 f9dd 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <EXTI2_IRQHandler>:
}

/**
  * @brief This function handles EXTI line1 interrupt.
  */
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

 80016b2:	2004      	movs	r0, #4
 80016b4:	f002 f9d6 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_Pin);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <EXTI3_IRQHandler>:
  /* USER CODE END EXTI1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line2 interrupt.
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  */
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */
 80016c0:	2008      	movs	r0, #8
 80016c2:	f002 f9cf 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Pin);
  /* USER CODE BEGIN EXTI2_IRQn 1 */
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <DMA1_Channel1_IRQHandler>:

  /* USER CODE END EXTI2_IRQn 1 */
}

/**
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Channel1_IRQHandler+0x10>)
 80016d2:	f001 fd81 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key_Pin);
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002c4 	.word	0x200002c4

080016e0 <TIM4_IRQHandler>:
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}

 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM4_IRQHandler+0x10>)
 80016e6:	f003 f9b1 	bl	8004a4c <HAL_TIM_IRQHandler>
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200003f4 	.word	0x200003f4

080016f4 <USART1_IRQHandler>:
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

/**
  * @brief This function handles TIM4 global interrupt.
  */
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USART1_IRQHandler+0x10>)
 80016fa:	f004 f905 	bl	8005908 <HAL_UART_IRQHandler>
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200004cc 	.word	0x200004cc

08001708 <USART3_IRQHandler>:
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 1 */
}
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USART3_IRQHandler+0x10>)
 800170e:	f004 f8fb 	bl	8005908 <HAL_UART_IRQHandler>

/**
  * @brief This function handles USART1 global interrupt.
  */
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000514 	.word	0x20000514

0800171c <TIM6_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM6_IRQHandler+0x10>)
 8001722:	f003 f993 	bl	8004a4c <HAL_TIM_IRQHandler>
}

/**
  * @brief This function handles USART3 global interrupt.
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000043c 	.word	0x2000043c

08001730 <TIM7_IRQHandler>:
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM7_IRQHandler+0x10>)
 8001736:	f003 f989 	bl	8004a4c <HAL_TIM_IRQHandler>
}

/**
  * @brief This function handles TIM6 global interrupt.
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000484 	.word	0x20000484

08001744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <_kill>:

int _kill(int pid, int sig)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175c:	f005 fe8e 	bl	800747c <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	2216      	movs	r2, #22
 8001764:	601a      	str	r2, [r3, #0]
  return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_exit>:

void _exit (int status)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800177a:	f04f 31ff 	mov.w	r1, #4294967295
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffe7 	bl	8001752 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001784:	e7fe      	b.n	8001784 <_exit+0x12>

08001786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00a      	b.n	80017ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001798:	f3af 8000 	nop.w
 800179c:	4601      	mov	r1, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf0      	blt.n	8001798 <_read+0x12>
  }

  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e009      	b.n	80017e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf1      	blt.n	80017d2 <_write+0x12>
  }
  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_close>:

int _close(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <_isatty>:

int _isatty(int file)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f005 fdf8 	bl	800747c <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000c000 	.word	0x2000c000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000360 	.word	0x20000360
 80018c0:	20005760 	.word	0x20005760

080018c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b092      	sub	sp, #72	; 0x48
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2220      	movs	r2, #32
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fdfa 	bl	80074f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <MX_TIM1_Init+0x104>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001908:	f240 22cf 	movw	r2, #719	; 0x2cf
 800190c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001916:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_TIM1_Init+0x100>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <MX_TIM1_Init+0x100>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800192e:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001930:	f002 ff82 	bl	8004838 <HAL_TIM_PWM_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800193a:	f7ff fdca 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800194a:	4619      	mov	r1, r3
 800194c:	4820      	ldr	r0, [pc, #128]	; (80019d0 <MX_TIM1_Init+0x100>)
 800194e:	f003 fe13 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001958:	f7ff fdbb 	bl	80014d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195c:	2360      	movs	r3, #96	; 0x60
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001982:	f003 f96b 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800198c:	f7ff fda1 	bl	80014d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM1_Init+0x100>)
 80019b4:	f003 fe4c 	bl	8005650 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80019be:	f7ff fd88 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM1_Init+0x100>)
 80019c4:	f000 f9c0 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3748      	adds	r7, #72	; 0x48
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000364 	.word	0x20000364
 80019d4:	40012c00 	.word	0x40012c00

080019d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_TIM3_Init+0xd4>)
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <MX_TIM3_Init+0xd8>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a02:	2247      	movs	r2, #71	; 0x47
 8001a04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1e:	4823      	ldr	r0, [pc, #140]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a20:	f002 ff0a 	bl	8004838 <HAL_TIM_PWM_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a2a:	f7ff fd52 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a3e:	f003 fd9b 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a48:	f7ff fd43 	bl	80014d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4c:	2360      	movs	r3, #96	; 0x60
 8001a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4812      	ldr	r0, [pc, #72]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a64:	f003 f8fa 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a6e:	f7ff fd30 	bl	80014d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2204      	movs	r2, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a7a:	f003 f8ef 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a84:	f7ff fd25 	bl	80014d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001a90:	f003 f8e4 	bl	8004c5c <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001a9a:	f7ff fd1a 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM3_Init+0xd4>)
 8001aa0:	f000 f952 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200003ac 	.word	0x200003ac
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <MX_TIM4_Init+0x98>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ad8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001adc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001afa:	f002 fded 	bl	80046d8 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b04:	f7ff fce5 	bl	80014d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001b16:	f003 f963 	bl	8004de0 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b20:	f7ff fcd7 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001b32:	f003 fd21 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f7ff fcc9 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200003f4 	.word	0x200003f4
 8001b4c:	40000800 	.word	0x40000800

08001b50 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <MX_TIM6_Init+0x68>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b66:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b78:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b82:	f002 fda9 	bl	80046d8 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b8c:	f7ff fca1 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b9e:	f003 fceb 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ba8:	f7ff fc93 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000043c 	.word	0x2000043c
 8001bb8:	40001000 	.word	0x40001000

08001bbc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM7_Init+0x68>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bd2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001bd6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bee:	f002 fd73 	bl	80046d8 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001bf8:	f7ff fc6b 	bl	80014d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001c0a:	f003 fcb5 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c14:	f7ff fc5d 	bl	80014d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000484 	.word	0x20000484
 8001c24:	40001400 	.word	0x40001400

08001c28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_TIM_PWM_MspInit+0x58>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10c      	bne.n	8001c54 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c52:	e010      	b.n	8001c76 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_TIM_PWM_MspInit+0x60>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10b      	bne.n	8001c76 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_TIM_PWM_MspInit+0x5c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <HAL_TIM_Base_MspInit+0xac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201e      	movs	r0, #30
 8001cbc:	f001 f83b 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cc0:	201e      	movs	r0, #30
 8001cc2:	f001 f854 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001cc6:	e032      	b.n	8001d2e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_TIM_Base_MspInit+0xb4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d114      	bne.n	8001cfc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001cd8:	f043 0310 	orr.w	r3, r3, #16
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2036      	movs	r0, #54	; 0x36
 8001cf0:	f001 f821 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001cf4:	2036      	movs	r0, #54	; 0x36
 8001cf6:	f001 f83a 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 8001cfa:	e018      	b.n	8001d2e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_TIM_Base_MspInit+0xb8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d113      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_TIM_Base_MspInit+0xb0>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2037      	movs	r0, #55	; 0x37
 8001d24:	f001 f807 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d28:	2037      	movs	r0, #55	; 0x37
 8001d2a:	f001 f820 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40001000 	.word	0x40001000
 8001d44:	40001400 	.word	0x40001400

08001d48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_TIM_MspPostInit+0xe0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d12b      	bne.n	8001dc0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = T12_CTRL_Pin;
 8001d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(T12_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	4826      	ldr	r0, [pc, #152]	; (8001e30 <HAL_TIM_MspPostInit+0xe8>)
 8001d96:	f001 fc89 	bl	80036ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_TIM_MspPostInit+0xec>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_TIM_MspPostInit+0xec>)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dbe:	e02f      	b.n	8001e20 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_TIM_MspPostInit+0xf0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12a      	bne.n	8001e20 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6193      	str	r3, [r2, #24]
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_TIM_MspPostInit+0xe4>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Red_Pin|Green_Pin|Buzzer_Pin;
 8001de2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <HAL_TIM_MspPostInit+0xf4>)
 8001df8:	f001 fc58 	bl	80036ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_MspPostInit+0xec>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_TIM_MspPostInit+0xec>)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	6053      	str	r3, [r2, #4]
}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40011800 	.word	0x40011800
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40011000 	.word	0x40011000

08001e40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART1_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Instance = USART1;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.BaudRate = 115200;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e78:	f003 fc4d 	bl	8005716 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART1_UART_Init+0x46>
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e82:	f7ff fb26 	bl	80014d2 <Error_Handler>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200004cc 	.word	0x200004cc
 8001e90:	40013800 	.word	0x40013800

08001e94 <MX_USART3_UART_Init>:

}
/* USART3 init function */

 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 1 */
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Instance = USART3;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.BaudRate = 115200;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f003 fc23 	bl	8005716 <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x46>
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed6:	f7ff fafc 	bl	80014d2 <Error_Handler>
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000514 	.word	0x20000514
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
}

 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_UART_MspInit+0x11c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d13a      	bne.n	8001f7e <HAL_UART_MspInit+0x96>
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
  {
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN USART1_MspInit 0 */

 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a38      	ldr	r2, [pc, #224]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	61bb      	str	r3, [r7, #24]
    /**USART1 GPIO Configuration
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
    PA9     ------> USART1_TX
 8001f42:	2303      	movs	r3, #3
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    PA10     ------> USART1_RX
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	482f      	ldr	r0, [pc, #188]	; (800200c <HAL_UART_MspInit+0x124>)
 8001f4e:	f001 fbad 	bl	80036ac <HAL_GPIO_Init>
    */
    GPIO_InitStruct.Pin = TXD_Pin;
 8001f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4619      	mov	r1, r3
 8001f66:	4829      	ldr	r0, [pc, #164]	; (800200c <HAL_UART_MspInit+0x124>)
 8001f68:	f001 fba0 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RXD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2025      	movs	r0, #37	; 0x25
 8001f72:	f000 fee0 	bl	8002d36 <HAL_NVIC_SetPriority>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2025      	movs	r0, #37	; 0x25
 8001f78:	f000 fef9 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Bluetooth_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART3 interrupt Init */
 8001f7c:	e03e      	b.n	8001ffc <HAL_UART_MspInit+0x114>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_UART_MspInit+0x128>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d139      	bne.n	8001ffc <HAL_UART_MspInit+0x114>
  }
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  {
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_UART_MspInit+0x120>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	61bb      	str	r3, [r7, #24]

 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    /**USART3 GPIO Configuration
 8001fc6:	f107 0318 	add.w	r3, r7, #24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <HAL_UART_MspInit+0x12c>)
 8001fce:	f001 fb6d 	bl	80036ac <HAL_GPIO_Init>
    PB11     ------> USART3_RX
 8001fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd6:	61bb      	str	r3, [r7, #24]
    */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_UART_MspInit+0x12c>)
 8001fe8:	f001 fb60 	bl	80036ac <HAL_GPIO_Init>

 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2027      	movs	r0, #39	; 0x27
 8001ff2:	f000 fea0 	bl	8002d36 <HAL_NVIC_SetPriority>
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin;
 8001ff6:	2027      	movs	r0, #39	; 0x27
 8001ff8:	f000 feb9 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    /* USART3 interrupt Init */
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013800 	.word	0x40013800
 8002008:	40021000 	.word	0x40021000
 800200c:	40010800 	.word	0x40010800
 8002010:	40004800 	.word	0x40004800
 8002014:	40010c00 	.word	0x40010c00

08002018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002018:	f7ff fc54 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800201e:	490c      	ldr	r1, [pc, #48]	; (8002050 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002034:	4c09      	ldr	r4, [pc, #36]	; (800205c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002042:	f005 fa33 	bl	80074ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002046:	f005 f9e1 	bl	800740c <main>
  bx lr
 800204a:	4770      	bx	lr
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002054:	0800bbbc 	.word	0x0800bbbc
  ldr r2, =_sbss
 8002058:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800205c:	2000575c 	.word	0x2000575c

08002060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC1_2_IRQHandler>

08002062 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7fe fd02 	bl	8000a80 <__addsf3>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7fe fcfa 	bl	8000a80 <__addsf3>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4619      	mov	r1, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fcec 	bl	8000a80 <__addsf3>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4619      	mov	r1, r3
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7fe fce5 	bl	8000a7c <__aeabi_fsub>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <arm_pid_init_f32+0x74>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	330c      	adds	r3, #12
 80020cc:	220c      	movs	r2, #12
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fa0f 	bl	80074f4 <memset>
  }

}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x28>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x28>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fe15 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fa70 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fe2d 	bl	8002d8a <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 fdf5 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_IncTick+0x1c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x20>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_IncTick+0x20>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000008 	.word	0x20000008
 800218c:	2000055c 	.word	0x2000055c

08002190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <HAL_GetTick+0x10>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	2000055c 	.word	0x2000055c

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fff0 	bl	8002190 <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffe0 	bl	8002190 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008

080021ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0ce      	b.n	80023ac <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe ff72 	bl	8001114 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fb53 	bl	80028dc <ADC_ConversionStop_Disable>
 8002236:	4603      	mov	r3, r0
 8002238:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80a9 	bne.w	800239a <HAL_ADC_Init+0x1ae>
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80a5 	bne.w	800239a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002258:	f023 0302 	bic.w	r3, r3, #2
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4951      	ldr	r1, [pc, #324]	; (80023b4 <HAL_ADC_Init+0x1c8>)
 800226e:	428b      	cmp	r3, r1
 8002270:	d10a      	bne.n	8002288 <HAL_ADC_Init+0x9c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800227a:	d002      	beq.n	8002282 <HAL_ADC_Init+0x96>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	e004      	b.n	800228c <HAL_ADC_Init+0xa0>
 8002282:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002286:	e001      	b.n	800228c <HAL_ADC_Init+0xa0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800228c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7b1b      	ldrb	r3, [r3, #12]
 8002292:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002294:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4313      	orrs	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d003      	beq.n	80022ae <HAL_ADC_Init+0xc2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_Init+0xc8>
 80022ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_Init+0xca>
 80022b4:	2300      	movs	r3, #0
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7d1b      	ldrb	r3, [r3, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d119      	bne.n	80022f8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	035a      	lsls	r2, r3, #13
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e00b      	b.n	80022f8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_ADC_Init+0x1cc>)
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	430b      	orrs	r3, r1
 800231e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d003      	beq.n	8002332 <HAL_ADC_Init+0x146>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d104      	bne.n	800233c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	3b01      	subs	r3, #1
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_ADC_Init+0x1d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002376:	e018      	b.n	80023aa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f023 0312 	bic.w	r3, r3, #18
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002398:	e007      	b.n	80023aa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f043 0210 	orr.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013c00 	.word	0x40013c00
 80023b8:	ffe1f7fd 	.word	0xffe1f7fd
 80023bc:	ff1f0efe 	.word	0xff1f0efe

080023c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_ADC_Start_DMA+0x1a8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_Start_DMA+0x24>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a63      	ldr	r2, [pc, #396]	; (800256c <HAL_ADC_Start_DMA+0x1ac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d106      	bne.n	80023f2 <HAL_ADC_Start_DMA+0x32>
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <HAL_ADC_Start_DMA+0x1a8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 80b3 	bne.w	8002558 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_Start_DMA+0x40>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0ae      	b.n	800255e <HAL_ADC_Start_DMA+0x19e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fa0d 	bl	8002828 <ADC_Enable>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 809a 	bne.w	800254e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4e      	ldr	r2, [pc, #312]	; (800256c <HAL_ADC_Start_DMA+0x1ac>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d105      	bne.n	8002444 <HAL_ADC_Start_DMA+0x84>
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <HAL_ADC_Start_DMA+0x1a8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d026      	beq.n	80024ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800246e:	e01d      	b.n	80024ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_ADC_Start_DMA+0x1a8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_ADC_Start_DMA+0xd0>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_ADC_Start_DMA+0x1ac>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d10d      	bne.n	80024ac <HAL_ADC_Start_DMA+0xec>
 8002490:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_ADC_Start_DMA+0x1a8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f023 0206 	bic.w	r2, r3, #6
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_ADC_Start_DMA+0x1b0>)
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <HAL_ADC_Start_DMA+0x1b4>)
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_ADC_Start_DMA+0x1b8>)
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a18      	ldr	r0, [r3, #32]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	334c      	adds	r3, #76	; 0x4c
 8002510:	4619      	mov	r1, r3
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f000 fcbb 	bl	8002e90 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002524:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002528:	d108      	bne.n	800253c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002538:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800253a:	e00f      	b.n	800255c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800254a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800254c:	e006      	b.n	800255c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002556:	e001      	b.n	800255c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800255c:	7dfb      	ldrb	r3, [r7, #23]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40012400 	.word	0x40012400
 800256c:	40012800 	.word	0x40012800
 8002570:	0800295f 	.word	0x0800295f
 8002574:	080029db 	.word	0x080029db
 8002578:	080029f7 	.word	0x080029f7

0800257c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Stop_DMA+0x1a>
 8002592:	2302      	movs	r3, #2
 8002594:	e03a      	b.n	800260c <HAL_ADC_Stop_DMA+0x90>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f99c 	bl	80028dc <ADC_ConversionStop_Disable>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d129      	bne.n	8002602 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11a      	bne.n	8002602 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fcbd 	bl	8002f50 <HAL_DMA_Abort>
 80025d6:	4603      	mov	r3, r0
 80025d8:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
 80025f4:	e005      	b.n	8002602 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x20>
 8002654:	2302      	movs	r3, #2
 8002656:	e0dc      	b.n	8002812 <HAL_ADC_ConfigChannel+0x1da>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d81c      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b05      	subs	r3, #5
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	4019      	ands	r1, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b05      	subs	r3, #5
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
 80026a0:	e03c      	b.n	800271c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d81c      	bhi.n	80026e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b23      	subs	r3, #35	; 0x23
 80026bc:	221f      	movs	r2, #31
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	4019      	ands	r1, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b23      	subs	r3, #35	; 0x23
 80026d6:	fa00 f203 	lsl.w	r2, r0, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
 80026e2:	e01b      	b.n	800271c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b41      	subs	r3, #65	; 0x41
 80026f6:	221f      	movs	r2, #31
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4019      	ands	r1, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b41      	subs	r3, #65	; 0x41
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b09      	cmp	r3, #9
 8002722:	d91c      	bls.n	800275e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68d9      	ldr	r1, [r3, #12]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	2207      	movs	r2, #7
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	4019      	ands	r1, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6898      	ldr	r0, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	3b1e      	subs	r3, #30
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	e019      	b.n	8002792 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6919      	ldr	r1, [r3, #16]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	2207      	movs	r2, #7
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	4019      	ands	r1, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6898      	ldr	r0, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	fa00 f203 	lsl.w	r2, r0, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b10      	cmp	r3, #16
 8002798:	d003      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800279e:	2b11      	cmp	r3, #17
 80027a0:	d132      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_ADC_ConfigChannel+0x1e4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d125      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d126      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d11a      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_ADC_ConfigChannel+0x1e8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <HAL_ADC_ConfigChannel+0x1ec>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	0c9a      	lsrs	r2, r3, #18
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027e8:	e002      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f9      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x1b2>
 80027f6:	e007      	b.n	8002808 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012400 	.word	0x40012400
 8002820:	20000000 	.word	0x20000000
 8002824:	431bde83 	.word	0x431bde83

08002828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d040      	beq.n	80028c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002856:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <ADC_Enable+0xac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <ADC_Enable+0xb0>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	0c9b      	lsrs	r3, r3, #18
 8002862:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002864:	e002      	b.n	800286c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002872:	f7ff fc8d 	bl	8002190 <HAL_GetTick>
 8002876:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002878:	e01f      	b.n	80028ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800287a:	f7ff fc89 	bl	8002190 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d918      	bls.n	80028ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d011      	beq.n	80028ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e007      	b.n	80028ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d1d8      	bne.n	800287a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	431bde83 	.word	0x431bde83

080028dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d12e      	bne.n	8002954 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002906:	f7ff fc43 	bl	8002190 <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800290c:	e01b      	b.n	8002946 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800290e:	f7ff fc3f 	bl	8002190 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d914      	bls.n	8002946 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10d      	bne.n	8002946 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d0dc      	beq.n	800290e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002974:	2b00      	cmp	r3, #0
 8002976:	d127      	bne.n	80029c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800298e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002992:	d115      	bne.n	80029c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f003 fd21 	bl	8006408 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029c6:	e004      	b.n	80029d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fe13 	bl	8002614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff fe02 	bl	8002626 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e097      	b.n	8002b7a <HAL_ADCEx_Calibration_Start+0x14e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff42 	bl	80028dc <ADC_ConversionStop_Disable>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fee3 	bl	8002828 <ADC_Enable>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 8081 	bne.w	8002b70 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a76:	f023 0302 	bic.w	r3, r3, #2
 8002a7a:	f043 0202 	orr.w	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_ADCEx_Calibration_Start+0x158>)
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	2002      	movs	r0, #2
 8002a88:	f001 fcca 	bl	8004420 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a92:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a94:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a96:	e002      	b.n	8002a9e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ab4:	f7ff fb6c 	bl	8002190 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aba:	e01b      	b.n	8002af4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002abc:	f7ff fb68 	bl	8002190 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b0a      	cmp	r3, #10
 8002ac8:	d914      	bls.n	8002af4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00d      	beq.n	8002af4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f023 0312 	bic.w	r3, r3, #18
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e042      	b.n	8002b7a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1dc      	bne.n	8002abc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0204 	orr.w	r2, r2, #4
 8002b10:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b12:	f7ff fb3d 	bl	8002190 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b18:	e01b      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b1a:	f7ff fb39 	bl	8002190 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d914      	bls.n	8002b52 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f023 0312 	bic.w	r3, r3, #18
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e013      	b.n	8002b7a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1dc      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	f023 0303 	bic.w	r3, r3, #3
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <__NVIC_EnableIRQ+0x34>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff90 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff2d 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff42 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff35 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e059      	b.n	8002e6e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_DMA_Init+0xd4>)
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d80f      	bhi.n	8002de6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_DMA_Init+0xd8>)
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <HAL_DMA_Init+0xdc>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	009a      	lsls	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_DMA_Init+0xe0>)
 8002de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002de4:	e00e      	b.n	8002e04 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_DMA_Init+0xe4>)
 8002dee:	4413      	add	r3, r2
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_DMA_Init+0xdc>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <HAL_DMA_Init+0xe8>)
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40020407 	.word	0x40020407
 8002e7c:	bffdfff8 	.word	0xbffdfff8
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	40020000 	.word	0x40020000
 8002e88:	bffdfbf8 	.word	0xbffdfbf8
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x20>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e04b      	b.n	8002f48 <HAL_DMA_Start_IT+0xb8>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d13a      	bne.n	8002f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fbb1 	bl	8003650 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 020e 	orr.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00f      	b.n	8002f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 020a 	orr.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e005      	b.n	8002f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e020      	b.n	8002fbc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 020e 	bic.w	r2, r2, #14
 8002f88:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e0d6      	b.n	800319a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020e 	bic.w	r2, r2, #14
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_DMA_Abort_IT+0x1dc>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d958      	bls.n	80030ca <HAL_DMA_Abort_IT+0x102>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <HAL_DMA_Abort_IT+0x1e0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04f      	beq.n	80030c2 <HAL_DMA_Abort_IT+0xfa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_DMA_Abort_IT+0x1e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d048      	beq.n	80030be <HAL_DMA_Abort_IT+0xf6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <HAL_DMA_Abort_IT+0x1e8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xf0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_DMA_Abort_IT+0x1ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d038      	beq.n	80030b2 <HAL_DMA_Abort_IT+0xea>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_DMA_Abort_IT+0x1f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d030      	beq.n	80030ac <HAL_DMA_Abort_IT+0xe4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5b      	ldr	r2, [pc, #364]	; (80031bc <HAL_DMA_Abort_IT+0x1f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d028      	beq.n	80030a6 <HAL_DMA_Abort_IT+0xde>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_DMA_Abort_IT+0x1dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d020      	beq.n	80030a0 <HAL_DMA_Abort_IT+0xd8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a57      	ldr	r2, [pc, #348]	; (80031c0 <HAL_DMA_Abort_IT+0x1f8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d019      	beq.n	800309c <HAL_DMA_Abort_IT+0xd4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <HAL_DMA_Abort_IT+0x1fc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d012      	beq.n	8003098 <HAL_DMA_Abort_IT+0xd0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_DMA_Abort_IT+0x200>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00a      	beq.n	8003092 <HAL_DMA_Abort_IT+0xca>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_DMA_Abort_IT+0x204>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d102      	bne.n	800308c <HAL_DMA_Abort_IT+0xc4>
 8003086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308a:	e01b      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	e018      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 8003092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003096:	e015      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 8003098:	2310      	movs	r3, #16
 800309a:	e013      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 800309c:	2301      	movs	r3, #1
 800309e:	e011      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	e00e      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030aa:	e00b      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b0:	e008      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	e005      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030bc:	e002      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030be:	2310      	movs	r3, #16
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_Abort_IT+0xfc>
 80030c2:	2301      	movs	r3, #1
 80030c4:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_DMA_Abort_IT+0x208>)
 80030c6:	6053      	str	r3, [r2, #4]
 80030c8:	e057      	b.n	800317a <HAL_DMA_Abort_IT+0x1b2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a36      	ldr	r2, [pc, #216]	; (80031a8 <HAL_DMA_Abort_IT+0x1e0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d04f      	beq.n	8003174 <HAL_DMA_Abort_IT+0x1ac>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_DMA_Abort_IT+0x1e4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d048      	beq.n	8003170 <HAL_DMA_Abort_IT+0x1a8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <HAL_DMA_Abort_IT+0x1e8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d040      	beq.n	800316a <HAL_DMA_Abort_IT+0x1a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_DMA_Abort_IT+0x1ec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d038      	beq.n	8003164 <HAL_DMA_Abort_IT+0x19c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_DMA_Abort_IT+0x1f0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d030      	beq.n	800315e <HAL_DMA_Abort_IT+0x196>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <HAL_DMA_Abort_IT+0x1f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d028      	beq.n	8003158 <HAL_DMA_Abort_IT+0x190>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_DMA_Abort_IT+0x1dc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d020      	beq.n	8003152 <HAL_DMA_Abort_IT+0x18a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_DMA_Abort_IT+0x1f8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_DMA_Abort_IT+0x186>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <HAL_DMA_Abort_IT+0x1fc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d012      	beq.n	800314a <HAL_DMA_Abort_IT+0x182>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_Abort_IT+0x200>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00a      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_DMA_Abort_IT+0x204>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d102      	bne.n	800313e <HAL_DMA_Abort_IT+0x176>
 8003138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313c:	e01b      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 800313e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003142:	e018      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003148:	e015      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 800314a:	2310      	movs	r3, #16
 800314c:	e013      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 800314e:	2301      	movs	r3, #1
 8003150:	e011      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003156:	e00e      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800315c:	e00b      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 800315e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003162:	e008      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003168:	e005      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	e002      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003170:	2310      	movs	r3, #16
 8003172:	e000      	b.n	8003176 <HAL_DMA_Abort_IT+0x1ae>
 8003174:	2301      	movs	r3, #1
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_DMA_Abort_IT+0x20c>)
 8003178:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
    } 
  }
  return status;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40020080 	.word	0x40020080
 80031a8:	40020008 	.word	0x40020008
 80031ac:	4002001c 	.word	0x4002001c
 80031b0:	40020030 	.word	0x40020030
 80031b4:	40020044 	.word	0x40020044
 80031b8:	40020058 	.word	0x40020058
 80031bc:	4002006c 	.word	0x4002006c
 80031c0:	40020408 	.word	0x40020408
 80031c4:	4002041c 	.word	0x4002041c
 80031c8:	40020430 	.word	0x40020430
 80031cc:	40020444 	.word	0x40020444
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020000 	.word	0x40020000

080031d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2204      	movs	r2, #4
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80f1 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x20c>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80eb 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_DMA_IRQHandler+0x1d8>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d958      	bls.n	80032ea <HAL_DMA_IRQHandler+0x112>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_DMA_IRQHandler+0x1dc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04f      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x10a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_DMA_IRQHandler+0x1e0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d048      	beq.n	80032de <HAL_DMA_IRQHandler+0x106>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_DMA_IRQHandler+0x1e4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d040      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x100>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a59      	ldr	r2, [pc, #356]	; (80033c0 <HAL_DMA_IRQHandler+0x1e8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d038      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xfa>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a57      	ldr	r2, [pc, #348]	; (80033c4 <HAL_DMA_IRQHandler+0x1ec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d030      	beq.n	80032cc <HAL_DMA_IRQHandler+0xf4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_DMA_IRQHandler+0x1f0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d028      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xee>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4d      	ldr	r2, [pc, #308]	; (80033b0 <HAL_DMA_IRQHandler+0x1d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d020      	beq.n	80032c0 <HAL_DMA_IRQHandler+0xe8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_DMA_IRQHandler+0x1f4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d019      	beq.n	80032bc <HAL_DMA_IRQHandler+0xe4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_DMA_IRQHandler+0x1f8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d012      	beq.n	80032b8 <HAL_DMA_IRQHandler+0xe0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_DMA_IRQHandler+0x1fc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00a      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xda>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_DMA_IRQHandler+0x200>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d102      	bne.n	80032ac <HAL_DMA_IRQHandler+0xd4>
 80032a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032aa:	e01b      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032b0:	e018      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b6:	e015      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032b8:	2340      	movs	r3, #64	; 0x40
 80032ba:	e013      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032bc:	2304      	movs	r3, #4
 80032be:	e011      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032c4:	e00e      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ca:	e00b      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032d0:	e008      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032d6:	e005      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032dc:	e002      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_IRQHandler+0x10c>
 80032e2:	2304      	movs	r3, #4
 80032e4:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <HAL_DMA_IRQHandler+0x204>)
 80032e6:	6053      	str	r3, [r2, #4]
 80032e8:	e057      	b.n	800339a <HAL_DMA_IRQHandler+0x1c2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_DMA_IRQHandler+0x1dc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04f      	beq.n	8003394 <HAL_DMA_IRQHandler+0x1bc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <HAL_DMA_IRQHandler+0x1e0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d048      	beq.n	8003390 <HAL_DMA_IRQHandler+0x1b8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <HAL_DMA_IRQHandler+0x1e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d040      	beq.n	800338a <HAL_DMA_IRQHandler+0x1b2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_DMA_IRQHandler+0x1e8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d038      	beq.n	8003384 <HAL_DMA_IRQHandler+0x1ac>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_DMA_IRQHandler+0x1ec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d030      	beq.n	800337e <HAL_DMA_IRQHandler+0x1a6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_DMA_IRQHandler+0x1f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d028      	beq.n	8003378 <HAL_DMA_IRQHandler+0x1a0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <HAL_DMA_IRQHandler+0x1d8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d020      	beq.n	8003372 <HAL_DMA_IRQHandler+0x19a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <HAL_DMA_IRQHandler+0x1f4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_DMA_IRQHandler+0x196>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <HAL_DMA_IRQHandler+0x1f8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d012      	beq.n	800336a <HAL_DMA_IRQHandler+0x192>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_DMA_IRQHandler+0x1fc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x18c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_DMA_IRQHandler+0x200>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d102      	bne.n	800335e <HAL_DMA_IRQHandler+0x186>
 8003358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800335c:	e01b      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 800335e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003362:	e018      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003368:	e015      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	e013      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 800336e:	2304      	movs	r3, #4
 8003370:	e011      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003376:	e00e      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003378:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800337c:	e00b      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 800337e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003382:	e008      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003388:	e005      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 800338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338e:	e002      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	e000      	b.n	8003396 <HAL_DMA_IRQHandler+0x1be>
 8003394:	2304      	movs	r3, #4
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_DMA_IRQHandler+0x208>)
 8003398:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8136 	beq.w	8003610 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033ac:	e130      	b.n	8003610 <HAL_DMA_IRQHandler+0x438>
 80033ae:	bf00      	nop
 80033b0:	40020080 	.word	0x40020080
 80033b4:	40020008 	.word	0x40020008
 80033b8:	4002001c 	.word	0x4002001c
 80033bc:	40020030 	.word	0x40020030
 80033c0:	40020044 	.word	0x40020044
 80033c4:	40020058 	.word	0x40020058
 80033c8:	4002006c 	.word	0x4002006c
 80033cc:	40020408 	.word	0x40020408
 80033d0:	4002041c 	.word	0x4002041c
 80033d4:	40020430 	.word	0x40020430
 80033d8:	40020444 	.word	0x40020444
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2202      	movs	r2, #2
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80dd 	beq.w	80035b0 <HAL_DMA_IRQHandler+0x3d8>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80d7 	beq.w	80035b0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 020a 	bic.w	r2, r2, #10
 800341e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b7b      	ldr	r3, [pc, #492]	; (800361c <HAL_DMA_IRQHandler+0x444>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d958      	bls.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a79      	ldr	r2, [pc, #484]	; (8003620 <HAL_DMA_IRQHandler+0x448>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04f      	beq.n	80034de <HAL_DMA_IRQHandler+0x306>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a78      	ldr	r2, [pc, #480]	; (8003624 <HAL_DMA_IRQHandler+0x44c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d048      	beq.n	80034da <HAL_DMA_IRQHandler+0x302>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a76      	ldr	r2, [pc, #472]	; (8003628 <HAL_DMA_IRQHandler+0x450>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x2fc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_DMA_IRQHandler+0x454>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d038      	beq.n	80034ce <HAL_DMA_IRQHandler+0x2f6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a73      	ldr	r2, [pc, #460]	; (8003630 <HAL_DMA_IRQHandler+0x458>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d030      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x2f0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_DMA_IRQHandler+0x45c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d028      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ea>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_DMA_IRQHandler+0x444>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d020      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2e4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_DMA_IRQHandler+0x460>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d019      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2e0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6c      	ldr	r2, [pc, #432]	; (800363c <HAL_DMA_IRQHandler+0x464>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <HAL_DMA_IRQHandler+0x468>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00a      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2d6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a69      	ldr	r2, [pc, #420]	; (8003644 <HAL_DMA_IRQHandler+0x46c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x2d0>
 80034a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a6:	e01b      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ac:	e018      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	e015      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034b4:	2320      	movs	r3, #32
 80034b6:	e013      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e011      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c0:	e00e      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034c6:	e00b      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034cc:	e008      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d2:	e005      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d8:	e002      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034da:	2320      	movs	r3, #32
 80034dc:	e000      	b.n	80034e0 <HAL_DMA_IRQHandler+0x308>
 80034de:	2302      	movs	r3, #2
 80034e0:	4a59      	ldr	r2, [pc, #356]	; (8003648 <HAL_DMA_IRQHandler+0x470>)
 80034e2:	6053      	str	r3, [r2, #4]
 80034e4:	e057      	b.n	8003596 <HAL_DMA_IRQHandler+0x3be>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4d      	ldr	r2, [pc, #308]	; (8003620 <HAL_DMA_IRQHandler+0x448>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04f      	beq.n	8003590 <HAL_DMA_IRQHandler+0x3b8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4b      	ldr	r2, [pc, #300]	; (8003624 <HAL_DMA_IRQHandler+0x44c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d048      	beq.n	800358c <HAL_DMA_IRQHandler+0x3b4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4a      	ldr	r2, [pc, #296]	; (8003628 <HAL_DMA_IRQHandler+0x450>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_DMA_IRQHandler+0x3ae>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a48      	ldr	r2, [pc, #288]	; (800362c <HAL_DMA_IRQHandler+0x454>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d038      	beq.n	8003580 <HAL_DMA_IRQHandler+0x3a8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a47      	ldr	r2, [pc, #284]	; (8003630 <HAL_DMA_IRQHandler+0x458>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d030      	beq.n	800357a <HAL_DMA_IRQHandler+0x3a2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a45      	ldr	r2, [pc, #276]	; (8003634 <HAL_DMA_IRQHandler+0x45c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d028      	beq.n	8003574 <HAL_DMA_IRQHandler+0x39c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <HAL_DMA_IRQHandler+0x444>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d020      	beq.n	800356e <HAL_DMA_IRQHandler+0x396>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a41      	ldr	r2, [pc, #260]	; (8003638 <HAL_DMA_IRQHandler+0x460>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_DMA_IRQHandler+0x392>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_DMA_IRQHandler+0x464>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d012      	beq.n	8003566 <HAL_DMA_IRQHandler+0x38e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3e      	ldr	r2, [pc, #248]	; (8003640 <HAL_DMA_IRQHandler+0x468>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00a      	beq.n	8003560 <HAL_DMA_IRQHandler+0x388>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <HAL_DMA_IRQHandler+0x46c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d102      	bne.n	800355a <HAL_DMA_IRQHandler+0x382>
 8003554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003558:	e01b      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 800355a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355e:	e018      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003564:	e015      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003566:	2320      	movs	r3, #32
 8003568:	e013      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 800356a:	2302      	movs	r3, #2
 800356c:	e011      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 800356e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003572:	e00e      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003574:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003578:	e00b      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 800357a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357e:	e008      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003584:	e005      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358a:	e002      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 800358c:	2320      	movs	r3, #32
 800358e:	e000      	b.n	8003592 <HAL_DMA_IRQHandler+0x3ba>
 8003590:	2302      	movs	r3, #2
 8003592:	4a2e      	ldr	r2, [pc, #184]	; (800364c <HAL_DMA_IRQHandler+0x474>)
 8003594:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d034      	beq.n	8003610 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035ae:	e02f      	b.n	8003610 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2208      	movs	r2, #8
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d028      	beq.n	8003612 <HAL_DMA_IRQHandler+0x43a>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 020e 	bic.w	r2, r2, #14
 80035d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    }
  }
  return;
 8003610:	bf00      	nop
 8003612:	bf00      	nop
}
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40020080 	.word	0x40020080
 8003620:	40020008 	.word	0x40020008
 8003624:	4002001c 	.word	0x4002001c
 8003628:	40020030 	.word	0x40020030
 800362c:	40020044 	.word	0x40020044
 8003630:	40020058 	.word	0x40020058
 8003634:	4002006c 	.word	0x4002006c
 8003638:	40020408 	.word	0x40020408
 800363c:	4002041c 	.word	0x4002041c
 8003640:	40020430 	.word	0x40020430
 8003644:	40020444 	.word	0x40020444
 8003648:	40020400 	.word	0x40020400
 800364c:	40020000 	.word	0x40020000

08003650 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b10      	cmp	r3, #16
 800367c:	d108      	bne.n	8003690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800368e:	e007      	b.n	80036a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036be:	e179      	b.n	80039b4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036c0:	2201      	movs	r2, #1
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	429a      	cmp	r2, r3
 80036da:	f040 8168 	bne.w	80039ae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a96      	ldr	r2, [pc, #600]	; (800393c <HAL_GPIO_Init+0x290>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d05e      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
 80036e8:	4a94      	ldr	r2, [pc, #592]	; (800393c <HAL_GPIO_Init+0x290>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d875      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 80036ee:	4a94      	ldr	r2, [pc, #592]	; (8003940 <HAL_GPIO_Init+0x294>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d058      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
 80036f4:	4a92      	ldr	r2, [pc, #584]	; (8003940 <HAL_GPIO_Init+0x294>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d86f      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 80036fa:	4a92      	ldr	r2, [pc, #584]	; (8003944 <HAL_GPIO_Init+0x298>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d052      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
 8003700:	4a90      	ldr	r2, [pc, #576]	; (8003944 <HAL_GPIO_Init+0x298>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d869      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 8003706:	4a90      	ldr	r2, [pc, #576]	; (8003948 <HAL_GPIO_Init+0x29c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d04c      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
 800370c:	4a8e      	ldr	r2, [pc, #568]	; (8003948 <HAL_GPIO_Init+0x29c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d863      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 8003712:	4a8e      	ldr	r2, [pc, #568]	; (800394c <HAL_GPIO_Init+0x2a0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d046      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
 8003718:	4a8c      	ldr	r2, [pc, #560]	; (800394c <HAL_GPIO_Init+0x2a0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d85d      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 800371e:	2b12      	cmp	r3, #18
 8003720:	d82a      	bhi.n	8003778 <HAL_GPIO_Init+0xcc>
 8003722:	2b12      	cmp	r3, #18
 8003724:	d859      	bhi.n	80037da <HAL_GPIO_Init+0x12e>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_GPIO_Init+0x80>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	080037a7 	.word	0x080037a7
 8003730:	08003781 	.word	0x08003781
 8003734:	08003793 	.word	0x08003793
 8003738:	080037d5 	.word	0x080037d5
 800373c:	080037db 	.word	0x080037db
 8003740:	080037db 	.word	0x080037db
 8003744:	080037db 	.word	0x080037db
 8003748:	080037db 	.word	0x080037db
 800374c:	080037db 	.word	0x080037db
 8003750:	080037db 	.word	0x080037db
 8003754:	080037db 	.word	0x080037db
 8003758:	080037db 	.word	0x080037db
 800375c:	080037db 	.word	0x080037db
 8003760:	080037db 	.word	0x080037db
 8003764:	080037db 	.word	0x080037db
 8003768:	080037db 	.word	0x080037db
 800376c:	080037db 	.word	0x080037db
 8003770:	08003789 	.word	0x08003789
 8003774:	0800379d 	.word	0x0800379d
 8003778:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_GPIO_Init+0x2a4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800377e:	e02c      	b.n	80037da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	623b      	str	r3, [r7, #32]
          break;
 8003786:	e029      	b.n	80037dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	3304      	adds	r3, #4
 800378e:	623b      	str	r3, [r7, #32]
          break;
 8003790:	e024      	b.n	80037dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	3308      	adds	r3, #8
 8003798:	623b      	str	r3, [r7, #32]
          break;
 800379a:	e01f      	b.n	80037dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	330c      	adds	r3, #12
 80037a2:	623b      	str	r3, [r7, #32]
          break;
 80037a4:	e01a      	b.n	80037dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037ae:	2304      	movs	r3, #4
 80037b0:	623b      	str	r3, [r7, #32]
          break;
 80037b2:	e013      	b.n	80037dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037bc:	2308      	movs	r3, #8
 80037be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	611a      	str	r2, [r3, #16]
          break;
 80037c6:	e009      	b.n	80037dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c8:	2308      	movs	r3, #8
 80037ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	615a      	str	r2, [r3, #20]
          break;
 80037d2:	e003      	b.n	80037dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037d4:	2300      	movs	r3, #0
 80037d6:	623b      	str	r3, [r7, #32]
          break;
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x130>
          break;
 80037da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2bff      	cmp	r3, #255	; 0xff
 80037e0:	d801      	bhi.n	80037e6 <HAL_GPIO_Init+0x13a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	e001      	b.n	80037ea <HAL_GPIO_Init+0x13e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2bff      	cmp	r3, #255	; 0xff
 80037f0:	d802      	bhi.n	80037f8 <HAL_GPIO_Init+0x14c>
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	e002      	b.n	80037fe <HAL_GPIO_Init+0x152>
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	3b08      	subs	r3, #8
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	210f      	movs	r1, #15
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	401a      	ands	r2, r3
 8003810:	6a39      	ldr	r1, [r7, #32]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80c1 	beq.w	80039ae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800382c:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_GPIO_Init+0x2a8>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_GPIO_Init+0x2a8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6193      	str	r3, [r2, #24]
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_GPIO_Init+0x2a8>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003844:	4a44      	ldr	r2, [pc, #272]	; (8003958 <HAL_GPIO_Init+0x2ac>)
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3c      	ldr	r2, [pc, #240]	; (800395c <HAL_GPIO_Init+0x2b0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01f      	beq.n	80038b0 <HAL_GPIO_Init+0x204>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <HAL_GPIO_Init+0x2b4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d019      	beq.n	80038ac <HAL_GPIO_Init+0x200>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3a      	ldr	r2, [pc, #232]	; (8003964 <HAL_GPIO_Init+0x2b8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d013      	beq.n	80038a8 <HAL_GPIO_Init+0x1fc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a39      	ldr	r2, [pc, #228]	; (8003968 <HAL_GPIO_Init+0x2bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00d      	beq.n	80038a4 <HAL_GPIO_Init+0x1f8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <HAL_GPIO_Init+0x2c0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <HAL_GPIO_Init+0x1f4>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <HAL_GPIO_Init+0x2c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_GPIO_Init+0x1f0>
 8003898:	2305      	movs	r3, #5
 800389a:	e00a      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 800389c:	2306      	movs	r3, #6
 800389e:	e008      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a4:	2303      	movs	r3, #3
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_Init+0x206>
 80038b0:	2300      	movs	r3, #0
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038c2:	4925      	ldr	r1, [pc, #148]	; (8003958 <HAL_GPIO_Init+0x2ac>)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	4924      	ldr	r1, [pc, #144]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4920      	ldr	r1, [pc, #128]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003904:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	491a      	ldr	r1, [pc, #104]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	43db      	mvns	r3, r3
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 800391c:	4013      	ands	r3, r2
 800391e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d025      	beq.n	8003978 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4910      	ldr	r1, [pc, #64]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e025      	b.n	8003986 <HAL_GPIO_Init+0x2da>
 800393a:	bf00      	nop
 800393c:	10320000 	.word	0x10320000
 8003940:	10310000 	.word	0x10310000
 8003944:	10220000 	.word	0x10220000
 8003948:	10210000 	.word	0x10210000
 800394c:	10120000 	.word	0x10120000
 8003950:	10110000 	.word	0x10110000
 8003954:	40021000 	.word	0x40021000
 8003958:	40010000 	.word	0x40010000
 800395c:	40010800 	.word	0x40010800
 8003960:	40010c00 	.word	0x40010c00
 8003964:	40011000 	.word	0x40011000
 8003968:	40011400 	.word	0x40011400
 800396c:	40011800 	.word	0x40011800
 8003970:	40011c00 	.word	0x40011c00
 8003974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_GPIO_Init+0x324>)
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	43db      	mvns	r3, r3
 8003980:	4913      	ldr	r1, [pc, #76]	; (80039d0 <HAL_GPIO_Init+0x324>)
 8003982:	4013      	ands	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_GPIO_Init+0x324>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_GPIO_Init+0x324>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
 800399e:	e006      	b.n	80039ae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_GPIO_Init+0x324>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	4909      	ldr	r1, [pc, #36]	; (80039d0 <HAL_GPIO_Init+0x324>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	3301      	adds	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f47f ae7e 	bne.w	80036c0 <HAL_GPIO_Init+0x14>
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	372c      	adds	r7, #44	; 0x2c
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40010400 	.word	0x40010400

080039d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	807b      	strh	r3, [r7, #2]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a12:	787b      	ldrb	r3, [r7, #1]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a18:	887a      	ldrh	r2, [r7, #2]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a1e:	e003      	b.n	8003a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	041a      	lsls	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	041a      	lsls	r2, r3, #16
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	400b      	ands	r3, r1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 ff36 	bl	80068f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e272      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00c      	beq.n	8003ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d112      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ada:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d168      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e24c      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x76>
 8003afc:	4b80      	ldr	r3, [pc, #512]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7f      	ldr	r2, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e02e      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0xbc>
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xd4>
 8003b50:	4b6b      	ldr	r3, [pc, #428]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a67      	ldr	r2, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fb0e 	bl	8002190 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fb0a 	bl	8002190 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e200      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe4>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fafa 	bl	8002190 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe faf6 	bl	8002190 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1ec      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x10c>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d063      	beq.n	8003c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d11c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x18c>
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x176>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e1c0      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4939      	ldr	r1, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	e03a      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe faaf 	bl	8002190 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fe faab 	bl	8002190 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1a1      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4927      	ldr	r1, [pc, #156]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	e015      	b.n	8003c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe fa8e 	bl	8002190 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe fa8a 	bl	8002190 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e180      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03a      	beq.n	8003d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fa6e 	bl	8002190 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fe fa6a 	bl	8002190 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e160      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f000 face 	bl	8004278 <RCC_Delay>
 8003cdc:	e01c      	b.n	8003d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fa54 	bl	8002190 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cea:	e00f      	b.n	8003d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe fa50 	bl	8002190 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d908      	bls.n	8003d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e146      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	42420000 	.word	0x42420000
 8003d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e9      	bne.n	8003cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a6 	beq.w	8003e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10d      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a87      	ldr	r2, [pc, #540]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <HAL_RCC_OscConfig+0x4c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x4c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7e      	ldr	r2, [pc, #504]	; (8003f5c <HAL_RCC_OscConfig+0x4c8>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fa11 	bl	8002190 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7fe fa0d 	bl	8002190 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e103      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x4c8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x312>
 8003d98:	4b6f      	ldr	r3, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6213      	str	r3, [r2, #32]
 8003da4:	e02d      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x334>
 8003dae:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4a69      	ldr	r2, [pc, #420]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	4b67      	ldr	r3, [pc, #412]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a66      	ldr	r2, [pc, #408]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x356>
 8003dd0:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a60      	ldr	r2, [pc, #384]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6213      	str	r3, [r2, #32]
 8003ddc:	4b5e      	ldr	r3, [pc, #376]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a5d      	ldr	r2, [pc, #372]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x36e>
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a57      	ldr	r2, [pc, #348]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0a:	f7fe f9c1 	bl	8002190 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe f9bd 	bl	8002190 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0b1      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCC_OscConfig+0x37e>
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe f9ab 	bl	8002190 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe f9a7 	bl	8002190 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e09b      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	4b40      	ldr	r3, [pc, #256]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ee      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a3b      	ldr	r2, [pc, #236]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8087 	beq.w	8003f8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d061      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d146      	bne.n	8003f1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <HAL_RCC_OscConfig+0x4cc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fe f97b 	bl	8002190 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe f977 	bl	8002190 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e06d      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	4921      	ldr	r1, [pc, #132]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a19      	ldr	r1, [r3, #32]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f94b 	bl	8002190 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fe f947 	bl	8002190 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e03d      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x46a>
 8003f1c:	e035      	b.n	8003f8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCC_OscConfig+0x4cc>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe f934 	bl	8002190 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe f930 	bl	8002190 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e026      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x498>
 8003f4a:	e01e      	b.n	8003f8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e019      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_OscConfig+0x500>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d106      	bne.n	8003f86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0d0      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d910      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0207 	bic.w	r2, r3, #7
 8003fc2:	4965      	ldr	r1, [pc, #404]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b8      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff4:	4b59      	ldr	r3, [pc, #356]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ffe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004016:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004018:	4b50      	ldr	r3, [pc, #320]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	494d      	ldr	r1, [pc, #308]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d040      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b47      	ldr	r3, [pc, #284]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d115      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e07f      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e073      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e06b      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4936      	ldr	r1, [pc, #216]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004088:	f7fe f882 	bl	8002190 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe f87e 	bl	8002190 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e053      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d210      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4922      	ldr	r1, [pc, #136]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e032      	b.n	800414e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4916      	ldr	r1, [pc, #88]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	490e      	ldr	r1, [pc, #56]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004126:	f000 f821 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800412a:	4602      	mov	r2, r0
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	490a      	ldr	r1, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	5ccb      	ldrb	r3, [r1, r3]
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_ClockConfig+0x1cc>)
 8004140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1d0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd ffe0 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40022000 	.word	0x40022000
 800415c:	40021000 	.word	0x40021000
 8004160:	08008a0c 	.word	0x08008a0c
 8004164:	20000000 	.word	0x20000000
 8004168:	20000004 	.word	0x20000004

0800416c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_RCC_GetSysClockFreq+0x94>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d002      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x30>
 8004196:	2b08      	cmp	r3, #8
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x36>
 800419a:	e027      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCC_GetSysClockFreq+0x98>)
 800419e:	613b      	str	r3, [r7, #16]
      break;
 80041a0:	e027      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	0c9b      	lsrs	r3, r3, #18
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <HAL_RCC_GetSysClockFreq+0x94>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	0c5b      	lsrs	r3, r3, #17
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	4a11      	ldr	r2, [pc, #68]	; (800420c <HAL_RCC_GetSysClockFreq+0xa0>)
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ce:	fb03 f202 	mul.w	r2, r3, r2
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e004      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	613b      	str	r3, [r7, #16]
      break;
 80041ea:	e002      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ee:	613b      	str	r3, [r7, #16]
      break;
 80041f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f2:	693b      	ldr	r3, [r7, #16]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000
 8004204:	007a1200 	.word	0x007a1200
 8004208:	08008a24 	.word	0x08008a24
 800420c:	08008a34 	.word	0x08008a34
 8004210:	003d0900 	.word	0x003d0900

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b02      	ldr	r3, [pc, #8]	; (8004224 <HAL_RCC_GetHCLKFreq+0x10>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	20000000 	.word	0x20000000

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800422c:	f7ff fff2 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	08008a1c 	.word	0x08008a1c

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004254:	f7ff ffde 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	0adb      	lsrs	r3, r3, #11
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	08008a1c 	.word	0x08008a1c

08004278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCC_Delay+0x34>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <RCC_Delay+0x38>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004294:	bf00      	nop
  }
  while (Delay --);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	60fa      	str	r2, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f9      	bne.n	8004294 <RCC_Delay+0x1c>
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000000 	.word	0x20000000
 80042b0:	10624dd3 	.word	0x10624dd3

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d07d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	61d3      	str	r3, [r2, #28]
 80042ec:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b46      	ldr	r3, [pc, #280]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d118      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a42      	ldr	r2, [pc, #264]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004314:	f7fd ff3c 	bl	8002190 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	e008      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fd ff38 	bl	8002190 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e06d      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	429a      	cmp	r2, r3
 8004356:	d027      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004362:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fd ff07 	bl	8002190 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fd ff03 	bl	8002190 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e036      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ee      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4917      	ldr	r1, [pc, #92]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	490b      	ldr	r1, [pc, #44]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	42420440 	.word	0x42420440

08004420 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	2b0f      	cmp	r3, #15
 8004442:	f200 80af 	bhi.w	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004523 	.word	0x08004523
 8004450:	08004589 	.word	0x08004589
 8004454:	080045a5 	.word	0x080045a5
 8004458:	08004513 	.word	0x08004513
 800445c:	080045a5 	.word	0x080045a5
 8004460:	080045a5 	.word	0x080045a5
 8004464:	080045a5 	.word	0x080045a5
 8004468:	0800451b 	.word	0x0800451b
 800446c:	080045a5 	.word	0x080045a5
 8004470:	080045a5 	.word	0x080045a5
 8004474:	080045a5 	.word	0x080045a5
 8004478:	080045a5 	.word	0x080045a5
 800447c:	080045a5 	.word	0x080045a5
 8004480:	080045a5 	.word	0x080045a5
 8004484:	080045a5 	.word	0x080045a5
 8004488:	0800448d 	.word	0x0800448d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800448c:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004492:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8084 	beq.w	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0c9b      	lsrs	r3, r3, #18
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	4a44      	ldr	r2, [pc, #272]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044b8:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0c5b      	lsrs	r3, r3, #17
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	4a3f      	ldr	r2, [pc, #252]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fa:	d102      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004500:	e052      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4a31      	ldr	r2, [pc, #196]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	61bb      	str	r3, [r7, #24]
      break;
 8004510:	e04a      	b.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004512:	f7ff fe2b 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004516:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004518:	e049      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800451a:	f7ff fe27 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800451e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004520:	e045      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004532:	d108      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e01f      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d109      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004552:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800455e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e00f      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004570:	d11c      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800457e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004582:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004584:	e012      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004588:	f7ff fe62 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	0b9b      	lsrs	r3, r3, #14
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	3301      	adds	r3, #1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	61bb      	str	r3, [r7, #24]
      break;
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80045ac:	bf00      	nop
    }
  }
  return (frequency);
 80045ae:	69bb      	ldr	r3, [r7, #24]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08008a38 	.word	0x08008a38
 80045c0:	08008a48 	.word	0x08008a48
 80045c4:	007a1200 	.word	0x007a1200
 80045c8:	003d0900 	.word	0x003d0900
 80045cc:	aaaaaaab 	.word	0xaaaaaaab

080045d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e076      	b.n	80046d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f2:	d009      	beq.n	8004608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	61da      	str	r2, [r3, #28]
 80045fa:	e005      	b.n	8004608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc ff90 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	ea42 0103 	orr.w	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	0c1a      	lsrs	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f002 0204 	and.w	r2, r2, #4
 80046ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e041      	b.n	800476e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd fac4 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fc4e 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e044      	b.n	800481a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIM_Base_Start_IT+0xac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIM_Base_Start_IT+0xb0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIM_Base_Start_IT+0xb4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_Base_Start_IT+0xb8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIM_Base_Start_IT+0xbc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d010      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e007      	b.n	8004818 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00

08004838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e041      	b.n	80048ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd f9e2 	bl	8001c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 fb9e 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_TIM_PWM_Start+0x24>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e022      	b.n	8004942 <HAL_TIM_PWM_Start+0x6a>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d109      	bne.n	8004916 <HAL_TIM_PWM_Start+0x3e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	bf14      	ite	ne
 800490e:	2301      	movne	r3, #1
 8004910:	2300      	moveq	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	e015      	b.n	8004942 <HAL_TIM_PWM_Start+0x6a>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d109      	bne.n	8004930 <HAL_TIM_PWM_Start+0x58>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e008      	b.n	8004942 <HAL_TIM_PWM_Start+0x6a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e072      	b.n	8004a30 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0x82>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	e013      	b.n	8004982 <HAL_TIM_PWM_Start+0xaa>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0x92>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	e00b      	b.n	8004982 <HAL_TIM_PWM_Start+0xaa>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Start+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004978:	e003      	b.n	8004982 <HAL_TIM_PWM_Start+0xaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fdd0 	bl	8005530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <HAL_TIM_PWM_Start+0x160>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIM_PWM_Start+0xcc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <HAL_TIM_PWM_Start+0x164>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_PWM_Start+0xd0>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_TIM_PWM_Start+0xd2>
 80049a8:	2300      	movs	r3, #0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIM_PWM_Start+0x160>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIM_PWM_Start+0x122>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_TIM_PWM_Start+0x164>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIM_PWM_Start+0x122>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d00e      	beq.n	80049fa <HAL_TIM_PWM_Start+0x122>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_TIM_PWM_Start+0x168>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIM_PWM_Start+0x122>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_TIM_PWM_Start+0x16c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIM_PWM_Start+0x122>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_TIM_PWM_Start+0x170>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d010      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1c:	e007      	b.n	8004a2e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00

08004a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d122      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa76 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa69 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fa78 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0204 	mvn.w	r2, #4
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa4c 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa3f 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa4e 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa22 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa15 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa24 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9f8 	bl	8004f80 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9eb 	bl	8004f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9fa 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0201 	mvn.w	r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 fd58 	bl	8006680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fd84 	bl	8005704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9be 	bl	8004fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0220 	mvn.w	r2, #32
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fd4f 	bl	80056f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0ae      	b.n	8004dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	f200 809f 	bhi.w	8004dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004dc9 	.word	0x08004dc9
 8004c98:	08004dc9 	.word	0x08004dc9
 8004c9c:	08004dc9 	.word	0x08004dc9
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004dc9 	.word	0x08004dc9
 8004ca8:	08004dc9 	.word	0x08004dc9
 8004cac:	08004dc9 	.word	0x08004dc9
 8004cb0:	08004d47 	.word	0x08004d47
 8004cb4:	08004dc9 	.word	0x08004dc9
 8004cb8:	08004dc9 	.word	0x08004dc9
 8004cbc:	08004dc9 	.word	0x08004dc9
 8004cc0:	08004d87 	.word	0x08004d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9ee 	bl	80050ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0208 	orr.w	r2, r2, #8
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0204 	bic.w	r2, r2, #4
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
      break;
 8004d02:	e064      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa3e 	bl	800518c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      break;
 8004d44:	e043      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fa91 	bl	8005274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0208 	orr.w	r2, r2, #8
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0204 	bic.w	r2, r2, #4
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	61da      	str	r2, [r3, #28]
      break;
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fae5 	bl	800535c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	021a      	lsls	r2, r3, #8
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	61da      	str	r2, [r3, #28]
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIM_ConfigClockSource+0x1c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e0b4      	b.n	8004f66 <HAL_TIM_ConfigClockSource+0x186>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e34:	d03e      	beq.n	8004eb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3a:	f200 8087 	bhi.w	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	f000 8086 	beq.w	8004f52 <HAL_TIM_ConfigClockSource+0x172>
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4a:	d87f      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b70      	cmp	r3, #112	; 0x70
 8004e4e:	d01a      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xa6>
 8004e50:	2b70      	cmp	r3, #112	; 0x70
 8004e52:	d87b      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b60      	cmp	r3, #96	; 0x60
 8004e56:	d050      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x11a>
 8004e58:	2b60      	cmp	r3, #96	; 0x60
 8004e5a:	d877      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b50      	cmp	r3, #80	; 0x50
 8004e5e:	d03c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0xfa>
 8004e60:	2b50      	cmp	r3, #80	; 0x50
 8004e62:	d873      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d058      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x13a>
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d86f      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d064      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d86b      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d060      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d867      	bhi.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05c      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d05a      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	e062      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6899      	ldr	r1, [r3, #8]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f000 fb2c 	bl	80054f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	609a      	str	r2, [r3, #8]
      break;
 8004eb2:	e04f      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6899      	ldr	r1, [r3, #8]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f000 fb15 	bl	80054f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed6:	609a      	str	r2, [r3, #8]
      break;
 8004ed8:	e03c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fa8c 	bl	8005404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2150      	movs	r1, #80	; 0x50
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fae3 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e02c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 faaa 	bl	8005460 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2160      	movs	r1, #96	; 0x60
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fad3 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004f18:	e01c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 fa6c 	bl	8005404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fac3 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004f38:	e00c      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f000 faba 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
	...

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a33      	ldr	r2, [pc, #204]	; (8005098 <TIM_Base_SetConfig+0xe0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a32      	ldr	r2, [pc, #200]	; (800509c <TIM_Base_SetConfig+0xe4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <TIM_Base_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <TIM_Base_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <TIM_Base_SetConfig+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <TIM_Base_SetConfig+0xe0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a21      	ldr	r2, [pc, #132]	; (800509c <TIM_Base_SetConfig+0xe4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x82>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x82>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <TIM_Base_SetConfig+0xe8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x82>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <TIM_Base_SetConfig+0xec>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x82>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <TIM_Base_SetConfig+0xf0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <TIM_Base_SetConfig+0xe0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <TIM_Base_SetConfig+0xe4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00

080050ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f023 0201 	bic.w	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 0302 	bic.w	r3, r3, #2
 80050f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a20      	ldr	r2, [pc, #128]	; (8005184 <TIM_OC1_SetConfig+0xd8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC1_SetConfig+0x64>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <TIM_OC1_SetConfig+0xdc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10c      	bne.n	800512a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0308 	bic.w	r3, r3, #8
 8005116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a15      	ldr	r2, [pc, #84]	; (8005184 <TIM_OC1_SetConfig+0xd8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC1_SetConfig+0x8e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a14      	ldr	r2, [pc, #80]	; (8005188 <TIM_OC1_SetConfig+0xdc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d111      	bne.n	800515e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400

0800518c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f023 0210 	bic.w	r2, r3, #16
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a21      	ldr	r2, [pc, #132]	; (800526c <TIM_OC2_SetConfig+0xe0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC2_SetConfig+0x68>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <TIM_OC2_SetConfig+0xe4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10d      	bne.n	8005210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a16      	ldr	r2, [pc, #88]	; (800526c <TIM_OC2_SetConfig+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC2_SetConfig+0x94>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <TIM_OC2_SetConfig+0xe4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d113      	bne.n	8005248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40013400 	.word	0x40013400

08005274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a21      	ldr	r2, [pc, #132]	; (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x66>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <TIM_OC3_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_OC3_SetConfig+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC3_SetConfig+0x92>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d113      	bne.n	800532e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a11      	ldr	r2, [pc, #68]	; (80053fc <TIM_OC4_SetConfig+0xa0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC4_SetConfig+0x68>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <TIM_OC4_SetConfig+0xa4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d109      	bne.n	80053d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400

08005404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 030a 	bic.w	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	031b      	lsls	r3, r3, #12
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f043 0307 	orr.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	021a      	lsls	r2, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	431a      	orrs	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	2201      	movs	r2, #1
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	43db      	mvns	r3, r3
 8005552:	401a      	ands	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e050      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1b      	ldr	r2, [pc, #108]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a15      	ldr	r2, [pc, #84]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00

08005650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e03d      	b.n	80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e042      	b.n	80057ae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fc fbd3 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2224      	movs	r2, #36	; 0x24
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fdc6 	bl	80062ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b08a      	sub	sp, #40	; 0x28
 80057ba:	af02      	add	r7, sp, #8
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d16d      	bne.n	80058b2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_Transmit+0x2c>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e066      	b.n	80058b4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2221      	movs	r2, #33	; 0x21
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f4:	f7fc fccc 	bl	8002190 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	88fa      	ldrh	r2, [r7, #6]
 80057fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d108      	bne.n	8005822 <HAL_UART_Transmit+0x6c>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e003      	b.n	800582a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800582a:	e02a      	b.n	8005882 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fb15 	bl	8005e66 <UART_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e036      	b.n	80058b4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10b      	bne.n	8005864 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800585a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	3302      	adds	r3, #2
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e007      	b.n	8005874 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1cf      	bne.n	800582c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2200      	movs	r2, #0
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fae5 	bl	8005e66 <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d112      	bne.n	80058fc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_UART_Receive_IT+0x26>
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e00b      	b.n	80058fe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fb25 	bl	8005f42 <UART_Start_Receive_IT>
 80058f8:	4603      	mov	r3, r0
 80058fa:	e000      	b.n	80058fe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b0ba      	sub	sp, #232	; 0xe8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10f      	bne.n	800596e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <HAL_UART_IRQHandler+0x66>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fc01 	bl	800616e <UART_Receive_IT>
      return;
 800596c:	e25b      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800596e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80de 	beq.w	8005b34 <HAL_UART_IRQHandler+0x22c>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005988:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80d1 	beq.w	8005b34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0xae>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_UART_IRQHandler+0xd2>
 80059c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_UART_IRQHandler+0xf6>
 80059e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	f043 0204 	orr.w	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <HAL_UART_IRQHandler+0x126>
 8005a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 81f2 	beq.w	8005e1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_UART_IRQHandler+0x14e>
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fb8c 	bl	800616e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <HAL_UART_IRQHandler+0x17a>
 8005a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04f      	beq.n	8005b22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa96 	bl	8005fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d041      	beq.n	8005b1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1d9      	bne.n	8005a96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_UART_IRQHandler+0x3e0>)
 8005af0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd fa66 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00e      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f993 	bl	8005e3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e00a      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f98f 	bl	8005e3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e006      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f98b 	bl	8005e3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b2e:	e175      	b.n	8005e1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	bf00      	nop
    return;
 8005b32:	e173      	b.n	8005e1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f040 814f 	bne.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8148 	beq.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8141 	beq.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80b6 	beq.w	8005cec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8145 	beq.w	8005e20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	f080 813e 	bcs.w	8005e20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005baa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	f000 8088 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005be4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1d9      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e1      	bne.n	8005c04 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	f023 0310 	bic.w	r3, r3, #16
 8005c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005caa:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fd f944 	bl	8002f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8b6 	bl	8005e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ce4:	e09c      	b.n	8005e20 <HAL_UART_IRQHandler+0x518>
 8005ce6:	bf00      	nop
 8005ce8:	08006079 	.word	0x08006079
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 808e 	beq.w	8005e24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8089 	beq.w	8005e24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d36:	647a      	str	r2, [r7, #68]	; 0x44
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	623b      	str	r3, [r7, #32]
   return(result);
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e3      	bne.n	8005d4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e3      	bne.n	8005d90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f83b 	bl	8005e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dda:	e023      	b.n	8005e24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <HAL_UART_IRQHandler+0x4f4>
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f953 	bl	80060a0 <UART_Transmit_IT>
    return;
 8005dfa:	e014      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <HAL_UART_IRQHandler+0x51e>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f992 	bl	800613e <UART_EndTransmit_IT>
    return;
 8005e1a:	e004      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e1c:	bf00      	nop
 8005e1e:	e002      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e20:	bf00      	nop
 8005e22:	e000      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e24:	bf00      	nop
  }
}
 8005e26:	37e8      	adds	r7, #232	; 0xe8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b090      	sub	sp, #64	; 0x40
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	e050      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d04c      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e86:	f7fc f983 	bl	8002190 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d241      	bcs.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eb6:	637a      	str	r2, [r7, #52]	; 0x34
 8005eb8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eea:	623a      	str	r2, [r7, #32]
 8005eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	69f9      	ldr	r1, [r7, #28]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d09f      	beq.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3740      	adds	r7, #64	; 0x40
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2222      	movs	r2, #34	; 0x22
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0220 	orr.w	r2, r2, #32
 8005fa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b095      	sub	sp, #84	; 0x54
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8005fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	64bb      	str	r3, [r7, #72]	; 0x48
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e5      	bne.n	8005ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	d119      	bne.n	8006060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	60bb      	str	r3, [r7, #8]
   return(result);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	647b      	str	r3, [r7, #68]	; 0x44
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604c:	61ba      	str	r2, [r7, #24]
 800604e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	613b      	str	r3, [r7, #16]
   return(result);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800606e:	bf00      	nop
 8006070:	3754      	adds	r7, #84	; 0x54
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fed3 	bl	8005e3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b21      	cmp	r3, #33	; 0x21
 80060b2:	d13e      	bne.n	8006132 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d114      	bne.n	80060e8 <UART_Transmit_IT+0x48>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]
 80060e6:	e008      	b.n	80060fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6211      	str	r1, [r2, #32]
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	84d1      	strh	r1, [r2, #38]	; 0x26
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800611c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800612c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr

0800613e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff fe64 	bl	8005e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b08c      	sub	sp, #48	; 0x30
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b22      	cmp	r3, #34	; 0x22
 8006180:	f040 80ae 	bne.w	80062e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618c:	d117      	bne.n	80061be <UART_Receive_IT+0x50>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d113      	bne.n	80061be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	1c9a      	adds	r2, r3, #2
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
 80061bc:	e026      	b.n	800620c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d0:	d007      	beq.n	80061e2 <UART_Receive_IT+0x74>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <UART_Receive_IT+0x82>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e008      	b.n	8006202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4619      	mov	r1, r3
 800621a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800621c:	2b00      	cmp	r3, #0
 800621e:	d15d      	bne.n	80062dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0220 	bic.w	r2, r2, #32
 800622e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800623e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695a      	ldr	r2, [r3, #20]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	2b01      	cmp	r3, #1
 8006264:	d135      	bne.n	80062d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	613b      	str	r3, [r7, #16]
   return(result);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	623a      	str	r2, [r7, #32]
 800628e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	61bb      	str	r3, [r7, #24]
   return(result);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d10a      	bne.n	80062c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fdc0 	bl	8005e50 <HAL_UARTEx_RxEventCallback>
 80062d0:	e002      	b.n	80062d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb3e 	bl	8006954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e002      	b.n	80062e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3730      	adds	r7, #48	; 0x30
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006326:	f023 030c 	bic.w	r3, r3, #12
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	430b      	orrs	r3, r1
 8006332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2c      	ldr	r2, [pc, #176]	; (8006400 <UART_SetConfig+0x114>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006354:	f7fd ff7c 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	e002      	b.n	8006362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800635c:	f7fd ff64 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8006360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009a      	lsls	r2, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	4a22      	ldr	r2, [pc, #136]	; (8006404 <UART_SetConfig+0x118>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	0119      	lsls	r1, r3, #4
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009a      	lsls	r2, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	fbb2 f2f3 	udiv	r2, r2, r3
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <UART_SetConfig+0x118>)
 800639a:	fba3 0302 	umull	r0, r3, r3, r2
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	2064      	movs	r0, #100	; 0x64
 80063a2:	fb00 f303 	mul.w	r3, r0, r3
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	3332      	adds	r3, #50	; 0x32
 80063ac:	4a15      	ldr	r2, [pc, #84]	; (8006404 <UART_SetConfig+0x118>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b8:	4419      	add	r1, r3
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009a      	lsls	r2, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <UART_SetConfig+0x118>)
 80063d2:	fba3 0302 	umull	r0, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	2064      	movs	r0, #100	; 0x64
 80063da:	fb00 f303 	mul.w	r3, r0, r3
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	3332      	adds	r3, #50	; 0x32
 80063e4:	4a07      	ldr	r2, [pc, #28]	; (8006404 <UART_SetConfig+0x118>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	440a      	add	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40013800 	.word	0x40013800
 8006404:	51eb851f 	.word	0x51eb851f

08006408 <HAL_ADC_ConvCpltCallback>:
int encoder_count = 300;
float pid_error = 0;
const double k = 0.1;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <HAL_ADC_ConvCpltCallback+0x20>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d102      	bne.n	8006420 <HAL_ADC_ConvCpltCallback+0x18>
        HAL_ADC_Stop_DMA(&hadc1);
 800641a:	4804      	ldr	r0, [pc, #16]	; (800642c <HAL_ADC_ConvCpltCallback+0x24>)
 800641c:	f7fc f8ae 	bl	800257c <HAL_ADC_Stop_DMA>
    }
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40012400 	.word	0x40012400
 800642c:	20000294 	.word	0x20000294

08006430 <display>:

void display() {
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af02      	add	r7, sp, #8
    static int lcd_count = 0;
    lcd_count += 1;
 8006436:	4b80      	ldr	r3, [pc, #512]	; (8006638 <display+0x208>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a7e      	ldr	r2, [pc, #504]	; (8006638 <display+0x208>)
 800643e:	6013      	str	r3, [r2, #0]
    int size = 12, x = size / 2, y = size / 2, y_increment = size + size / 4;
 8006440:	230c      	movs	r3, #12
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	0fda      	lsrs	r2, r3, #31
 8006448:	4413      	add	r3, r2
 800644a:	105b      	asrs	r3, r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	0fda      	lsrs	r2, r3, #31
 8006452:	4413      	add	r3, r2
 8006454:	105b      	asrs	r3, r3, #1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	da00      	bge.n	8006460 <display+0x30>
 800645e:	3303      	adds	r3, #3
 8006460:	109b      	asrs	r3, r3, #2
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	603b      	str	r3, [r7, #0]
    sprintf(string_display, "fps:%0.1f", (float) lcd_count * 10.0 / (float) time_counter);
 800646a:	4b73      	ldr	r3, [pc, #460]	; (8006638 <display+0x208>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fa fbba 	bl	8000be8 <__aeabi_i2f>
 8006474:	4603      	mov	r3, r0
 8006476:	4618      	mov	r0, r3
 8006478:	f7fa f842 	bl	8000500 <__aeabi_f2d>
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	4b6e      	ldr	r3, [pc, #440]	; (800663c <display+0x20c>)
 8006482:	f7fa f895 	bl	80005b0 <__aeabi_dmul>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4614      	mov	r4, r2
 800648c:	461d      	mov	r5, r3
 800648e:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <display+0x210>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fa fba8 	bl	8000be8 <__aeabi_i2f>
 8006498:	4603      	mov	r3, r0
 800649a:	4618      	mov	r0, r3
 800649c:	f7fa f830 	bl	8000500 <__aeabi_f2d>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa f9ac 	bl	8000804 <__aeabi_ddiv>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4964      	ldr	r1, [pc, #400]	; (8006644 <display+0x214>)
 80064b2:	4865      	ldr	r0, [pc, #404]	; (8006648 <display+0x218>)
 80064b4:	f001 fc00 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	b298      	uxth	r0, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	b299      	uxth	r1, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f245 4258 	movw	r2, #21592	; 0x5458
 80064c8:	9201      	str	r2, [sp, #4]
 80064ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ce:	9200      	str	r2, [sp, #0]
 80064d0:	4a5d      	ldr	r2, [pc, #372]	; (8006648 <display+0x218>)
 80064d2:	f000 feaf 	bl	8007234 <LCD_String>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4413      	add	r3, r2
 80064dc:	607b      	str	r3, [r7, #4]

    sprintf(string_display, "pid_error: %0.1f", pid_error);
 80064de:	4b5b      	ldr	r3, [pc, #364]	; (800664c <display+0x21c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fa f80c 	bl	8000500 <__aeabi_f2d>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4958      	ldr	r1, [pc, #352]	; (8006650 <display+0x220>)
 80064ee:	4856      	ldr	r0, [pc, #344]	; (8006648 <display+0x218>)
 80064f0:	f001 fbe2 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	b298      	uxth	r0, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	b299      	uxth	r1, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f245 4258 	movw	r2, #21592	; 0x5458
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800650a:	9200      	str	r2, [sp, #0]
 800650c:	4a4e      	ldr	r2, [pc, #312]	; (8006648 <display+0x218>)
 800650e:	f000 fe91 	bl	8007234 <LCD_String>
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4413      	add	r3, r2
 8006518:	607b      	str	r3, [r7, #4]
    sprintf(string_display, "temper: %0.1f", simulation_temperature);
 800651a:	4b4e      	ldr	r3, [pc, #312]	; (8006654 <display+0x224>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7f9 ffee 	bl	8000500 <__aeabi_f2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	494b      	ldr	r1, [pc, #300]	; (8006658 <display+0x228>)
 800652a:	4847      	ldr	r0, [pc, #284]	; (8006648 <display+0x218>)
 800652c:	f001 fbc4 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	b298      	uxth	r0, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	b299      	uxth	r1, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f245 4258 	movw	r2, #21592	; 0x5458
 8006540:	9201      	str	r2, [sp, #4]
 8006542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006546:	9200      	str	r2, [sp, #0]
 8006548:	4a3f      	ldr	r2, [pc, #252]	; (8006648 <display+0x218>)
 800654a:	f000 fe73 	bl	8007234 <LCD_String>
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	4413      	add	r3, r2
 8006554:	607b      	str	r3, [r7, #4]
    sprintf(string_display, "goal:%04d, val:%04d", goal_temperature, (uint16_t) temperature);
 8006556:	4b41      	ldr	r3, [pc, #260]	; (800665c <display+0x22c>)
 8006558:	681c      	ldr	r4, [r3, #0]
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <display+0x230>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fa fd5c 	bl	800101c <__aeabi_f2uiz>
 8006564:	4603      	mov	r3, r0
 8006566:	b29b      	uxth	r3, r3
 8006568:	4622      	mov	r2, r4
 800656a:	493e      	ldr	r1, [pc, #248]	; (8006664 <display+0x234>)
 800656c:	4836      	ldr	r0, [pc, #216]	; (8006648 <display+0x218>)
 800656e:	f001 fba3 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	b298      	uxth	r0, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	b299      	uxth	r1, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f245 4258 	movw	r2, #21592	; 0x5458
 8006582:	9201      	str	r2, [sp, #4]
 8006584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006588:	9200      	str	r2, [sp, #0]
 800658a:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <display+0x218>)
 800658c:	f000 fe52 	bl	8007234 <LCD_String>
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	4413      	add	r3, r2
 8006596:	607b      	str	r3, [r7, #4]
    sprintf(string_display, "encoder: %04d", encoder_count);
 8006598:	4b33      	ldr	r3, [pc, #204]	; (8006668 <display+0x238>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	4933      	ldr	r1, [pc, #204]	; (800666c <display+0x23c>)
 80065a0:	4829      	ldr	r0, [pc, #164]	; (8006648 <display+0x218>)
 80065a2:	f001 fb89 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	b298      	uxth	r0, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	b299      	uxth	r1, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f245 4258 	movw	r2, #21592	; 0x5458
 80065b6:	9201      	str	r2, [sp, #4]
 80065b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065bc:	9200      	str	r2, [sp, #0]
 80065be:	4a22      	ldr	r2, [pc, #136]	; (8006648 <display+0x218>)
 80065c0:	f000 fe38 	bl	8007234 <LCD_String>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	4413      	add	r3, r2
 80065ca:	607b      	str	r3, [r7, #4]
    sprintf(string_display, "heat_level: %04d", heat_level);
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <display+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	4928      	ldr	r1, [pc, #160]	; (8006674 <display+0x244>)
 80065d4:	481c      	ldr	r0, [pc, #112]	; (8006648 <display+0x218>)
 80065d6:	f001 fb6f 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	b298      	uxth	r0, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	b299      	uxth	r1, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f245 4258 	movw	r2, #21592	; 0x5458
 80065ea:	9201      	str	r2, [sp, #4]
 80065ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065f0:	9200      	str	r2, [sp, #0]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <display+0x218>)
 80065f4:	f000 fe1e 	bl	8007234 <LCD_String>
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	607b      	str	r3, [r7, #4]
    sprintf(string_display, "data: %6s", string_recv);
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <display+0x248>)
 8006602:	491e      	ldr	r1, [pc, #120]	; (800667c <display+0x24c>)
 8006604:	4810      	ldr	r0, [pc, #64]	; (8006648 <display+0x218>)
 8006606:	f001 fb57 	bl	8007cb8 <siprintf>
    LCD_String(x, y, string_display, size, WHITE, GRAYBLUE), y += y_increment;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	b298      	uxth	r0, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	b299      	uxth	r1, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f245 4258 	movw	r2, #21592	; 0x5458
 800661a:	9201      	str	r2, [sp, #4]
 800661c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006620:	9200      	str	r2, [sp, #0]
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <display+0x218>)
 8006624:	f000 fe06 	bl	8007234 <LCD_String>
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4413      	add	r3, r2
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bdb0      	pop	{r4, r5, r7, pc}
 8006638:	20000570 	.word	0x20000570
 800663c:	40240000 	.word	0x40240000
 8006640:	20000560 	.word	0x20000560
 8006644:	0800896c 	.word	0x0800896c
 8006648:	20000580 	.word	0x20000580
 800664c:	2000056c 	.word	0x2000056c
 8006650:	08008978 	.word	0x08008978
 8006654:	20000564 	.word	0x20000564
 8006658:	0800898c 	.word	0x0800898c
 800665c:	2000000c 	.word	0x2000000c
 8006660:	2000066c 	.word	0x2000066c
 8006664:	0800899c 	.word	0x0800899c
 8006668:	20000010 	.word	0x20000010
 800666c:	080089b0 	.word	0x080089b0
 8006670:	2000057c 	.word	0x2000057c
 8006674:	080089c0 	.word	0x080089c0
 8006678:	200006dc 	.word	0x200006dc
 800667c:	080089d4 	.word	0x080089d4

08006680 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006680:	b5b0      	push	{r4, r5, r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a88      	ldr	r2, [pc, #544]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d115      	bne.n	80066be <HAL_TIM_PeriodElapsedCallback+0x3e>
        static int led_count = 0;
        if (led_count >= 5) {
 8006692:	4b88      	ldr	r3, [pc, #544]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b04      	cmp	r3, #4
 8006698:	dd07      	ble.n	80066aa <HAL_TIM_PeriodElapsedCallback+0x2a>
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800669a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800669e:	4886      	ldr	r0, [pc, #536]	; (80068b8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80066a0:	f7fd f9c7 	bl	8003a32 <HAL_GPIO_TogglePin>
            led_count = 0;
 80066a4:	4b83      	ldr	r3, [pc, #524]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]
        }
        led_count += 1;
 80066aa:	4b82      	ldr	r3, [pc, #520]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	4a80      	ldr	r2, [pc, #512]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80066b2:	6013      	str	r3, [r2, #0]
        time_counter += 1;
 80066b4:	4b81      	ldr	r3, [pc, #516]	; (80068bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a80      	ldr	r2, [pc, #512]	; (80068bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066bc:	6013      	str	r3, [r2, #0]
    }

    if (htim->Instance == TIM7) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7f      	ldr	r2, [pc, #508]	; (80068c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f040 80e9 	bne.w	800689c <HAL_TIM_PeriodElapsedCallback+0x21c>
        refresh_adc();
 80066ca:	f000 f9bf 	bl	8006a4c <refresh_adc>
        pid_error = (float) goal_temperature - simulation_temperature;
 80066ce:	4b7d      	ldr	r3, [pc, #500]	; (80068c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fa fa88 	bl	8000be8 <__aeabi_i2f>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b7b      	ldr	r3, [pc, #492]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fa f9cb 	bl	8000a7c <__aeabi_fsub>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	4b78      	ldr	r3, [pc, #480]	; (80068cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80066ec:	601a      	str	r2, [r3, #0]
        if ((goal_temperature - (uint16_t) simulation_temperature) < 20) {
 80066ee:	4b75      	ldr	r3, [pc, #468]	; (80068c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80066f0:	681c      	ldr	r4, [r3, #0]
 80066f2:	4b75      	ldr	r3, [pc, #468]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fa fc90 	bl	800101c <__aeabi_f2uiz>
 80066fc:	4603      	mov	r3, r0
 80066fe:	b29b      	uxth	r3, r3
 8006700:	1ae3      	subs	r3, r4, r3
 8006702:	2b13      	cmp	r3, #19
 8006704:	f300 80a3 	bgt.w	800684e <HAL_TIM_PeriodElapsedCallback+0x1ce>
            duty = arm_pid_f32(&pid, pid_error);
 8006708:	4b70      	ldr	r3, [pc, #448]	; (80068cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a70      	ldr	r2, [pc, #448]	; (80068d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800670e:	617a      	str	r2, [r7, #20]
 8006710:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	4618      	mov	r0, r3
 800671a:	f7fa fab9 	bl	8000c90 <__aeabi_fmul>
 800671e:	4603      	mov	r3, r0
 8006720:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fa faaf 	bl	8000c90 <__aeabi_fmul>
 8006732:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 8006734:	4619      	mov	r1, r3
 8006736:	4620      	mov	r0, r4
 8006738:	f7fa f9a2 	bl	8000a80 <__addsf3>
 800673c:	4603      	mov	r3, r0
 800673e:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f7fa faa0 	bl	8000c90 <__aeabi_fmul>
 8006750:	4603      	mov	r3, r0
 8006752:	4619      	mov	r1, r3
 8006754:	4620      	mov	r0, r4
 8006756:	f7fa f993 	bl	8000a80 <__addsf3>
 800675a:	4603      	mov	r3, r0
 800675c:	461a      	mov	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7fa f98b 	bl	8000a80 <__addsf3>
 800676a:	4603      	mov	r3, r0
 800676c:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a53      	ldr	r2, [pc, #332]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006786:	6013      	str	r3, [r2, #0]
            // set_heat_level((uint16_t) duty);
            if (duty < -5) {
 8006788:	4b52      	ldr	r3, [pc, #328]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4952      	ldr	r1, [pc, #328]	; (80068d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800678e:	4618      	mov	r0, r3
 8006790:	f7fa fc1c 	bl	8000fcc <__aeabi_fcmplt>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01b      	beq.n	80067d2 <HAL_TIM_PeriodElapsedCallback+0x152>
                duty = (float) (-5.0 * (simulation_temperature) / 300.0);
 800679a:	4b4b      	ldr	r3, [pc, #300]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 feae 	bl	8000500 <__aeabi_f2d>
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80067aa:	f7f9 ff01 	bl	80005b0 <__aeabi_dmul>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	a33c      	add	r3, pc, #240	; (adr r3, 80068a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7fa f822 	bl	8000804 <__aeabi_ddiv>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f7fa f904 	bl	80009d4 <__aeabi_d2f>
 80067cc:	4603      	mov	r3, r0
 80067ce:	4a41      	ldr	r2, [pc, #260]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80067d0:	6013      	str	r3, [r2, #0]
            }
            if (duty > 10) {
 80067d2:	4b40      	ldr	r3, [pc, #256]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4942      	ldr	r1, [pc, #264]	; (80068e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fa fc15 	bl	8001008 <__aeabi_fcmpgt>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d020      	beq.n	8006826 <HAL_TIM_PeriodElapsedCallback+0x1a6>
                duty = (float) (10.0 * (500 - simulation_temperature) / 300.0);
 80067e4:	4b38      	ldr	r3, [pc, #224]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4619      	mov	r1, r3
 80067ea:	483e      	ldr	r0, [pc, #248]	; (80068e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80067ec:	f7fa f946 	bl	8000a7c <__aeabi_fsub>
 80067f0:	4603      	mov	r3, r0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7f9 fe84 	bl	8000500 <__aeabi_f2d>
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	4b3a      	ldr	r3, [pc, #232]	; (80068e8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80067fe:	f7f9 fed7 	bl	80005b0 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	a327      	add	r3, pc, #156	; (adr r3, 80068a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f7f9 fff8 	bl	8000804 <__aeabi_ddiv>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	f7fa f8da 	bl	80009d4 <__aeabi_d2f>
 8006820:	4603      	mov	r3, r0
 8006822:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006824:	6013      	str	r3, [r2, #0]
            }
            simulation_temperature += (float) 0.5 * duty;
 8006826:	4b2b      	ldr	r3, [pc, #172]	; (80068d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800682e:	4618      	mov	r0, r3
 8006830:	f7fa fa2e 	bl	8000c90 <__aeabi_fmul>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fa f91e 	bl	8000a80 <__addsf3>
 8006844:	4603      	mov	r3, r0
 8006846:	461a      	mov	r2, r3
 8006848:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e009      	b.n	8006862 <HAL_TIM_PeriodElapsedCallback+0x1e2>
        } else {
            simulation_temperature += 10;
 800684e:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4923      	ldr	r1, [pc, #140]	; (80068e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006854:	4618      	mov	r0, r3
 8006856:	f7fa f913 	bl	8000a80 <__addsf3>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006860:	601a      	str	r2, [r3, #0]
        }

        sprintf(string_send, "%f, %f\n", simulation_temperature, (float) goal_temperature);
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe4a 	bl	8000500 <__aeabi_f2d>
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7fa f9b7 	bl	8000be8 <__aeabi_i2f>
 800687a:	4603      	mov	r3, r0
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 fe3f 	bl	8000500 <__aeabi_f2d>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	e9cd 2300 	strd	r2, r3, [sp]
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	4917      	ldr	r1, [pc, #92]	; (80068ec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006890:	4817      	ldr	r0, [pc, #92]	; (80068f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006892:	f001 fa11 	bl	8007cb8 <siprintf>
        send_bluetooth(string_send);
 8006896:	4816      	ldr	r0, [pc, #88]	; (80068f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006898:	f000 f946 	bl	8006b28 <send_bluetooth>
    }
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bdb0      	pop	{r4, r5, r7, pc}
 80068a4:	f3af 8000 	nop.w
 80068a8:	00000000 	.word	0x00000000
 80068ac:	4072c000 	.word	0x4072c000
 80068b0:	40001000 	.word	0x40001000
 80068b4:	20000574 	.word	0x20000574
 80068b8:	40010c00 	.word	0x40010c00
 80068bc:	20000560 	.word	0x20000560
 80068c0:	40001400 	.word	0x40001400
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	20000564 	.word	0x20000564
 80068cc:	2000056c 	.word	0x2000056c
 80068d0:	20000648 	.word	0x20000648
 80068d4:	20000568 	.word	0x20000568
 80068d8:	c0a00000 	.word	0xc0a00000
 80068dc:	c0140000 	.word	0xc0140000
 80068e0:	41200000 	.word	0x41200000
 80068e4:	43fa0000 	.word	0x43fa0000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	080089e0 	.word	0x080089e0
 80068f0:	200005e4 	.word	0x200005e4

080068f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == A_Pin) {
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d116      	bne.n	8006932 <HAL_GPIO_EXTI_Callback+0x3e>
        if (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == RESET && encoder_count < 1000) {
 8006904:	2104      	movs	r1, #4
 8006906:	4810      	ldr	r0, [pc, #64]	; (8006948 <HAL_GPIO_EXTI_Callback+0x54>)
 8006908:	f7fd f864 	bl	80039d4 <HAL_GPIO_ReadPin>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_GPIO_EXTI_Callback+0x34>
 8006912:	4b0e      	ldr	r3, [pc, #56]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800691a:	da05      	bge.n	8006928 <HAL_GPIO_EXTI_Callback+0x34>
            encoder_count -= 1;
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3b01      	subs	r3, #1
 8006922:	4a0a      	ldr	r2, [pc, #40]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e004      	b.n	8006932 <HAL_GPIO_EXTI_Callback+0x3e>
        } else {
            encoder_count += 1;
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 8006930:	6013      	str	r3, [r2, #0]
        }
    }

    if (GPIO_Pin == SW_Pin) {
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d103      	bne.n	8006940 <HAL_GPIO_EXTI_Callback+0x4c>
        goal_temperature = encoder_count;
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <HAL_GPIO_EXTI_Callback+0x58>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a04      	ldr	r2, [pc, #16]	; (8006950 <HAL_GPIO_EXTI_Callback+0x5c>)
 800693e:	6013      	str	r3, [r2, #0]
    }
    if (GPIO_Pin == key_Pin) {

    }
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40011000 	.word	0x40011000
 800694c:	20000010 	.word	0x20000010
 8006950:	2000000c 	.word	0x2000000c

08006954 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <HAL_UART_RxCpltCallback+0x88>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d136      	bne.n	80069d4 <HAL_UART_RxCpltCallback+0x80>
        static int string_recv_index = 0;
        if (string_recv_index == 0) {
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <HAL_UART_RxCpltCallback+0x8c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_UART_RxCpltCallback+0x36>
            for (int i = 0; i < 100; i++) {
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e007      	b.n	8006984 <HAL_UART_RxCpltCallback+0x30>
                string_recv[i] = 0;
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <HAL_UART_RxCpltCallback+0x90>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 100; i++) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b63      	cmp	r3, #99	; 0x63
 8006988:	ddf4      	ble.n	8006974 <HAL_UART_RxCpltCallback+0x20>
            }
        }
        if (tmp_data == '\n') {
 800698a:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <HAL_UART_RxCpltCallback+0x94>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b0a      	cmp	r3, #10
 8006990:	d112      	bne.n	80069b8 <HAL_UART_RxCpltCallback+0x64>
            string_recv_index = 0;
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_UART_RxCpltCallback+0x8c>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
            if (abs(atoi(string_recv) - 0) > 0.1) {
 8006998:	4812      	ldr	r0, [pc, #72]	; (80069e4 <HAL_UART_RxCpltCallback+0x90>)
 800699a:	f000 fd6b 	bl	8007474 <atoi>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfb8      	it	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dd0f      	ble.n	80069ca <HAL_UART_RxCpltCallback+0x76>
                goal_temperature = atoi(string_recv);
 80069aa:	480e      	ldr	r0, [pc, #56]	; (80069e4 <HAL_UART_RxCpltCallback+0x90>)
 80069ac:	f000 fd62 	bl	8007474 <atoi>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <HAL_UART_RxCpltCallback+0x98>)
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e008      	b.n	80069ca <HAL_UART_RxCpltCallback+0x76>
            }
        } else {
            string_recv[string_recv_index++] = tmp_data;
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_UART_RxCpltCallback+0x8c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	4908      	ldr	r1, [pc, #32]	; (80069e0 <HAL_UART_RxCpltCallback+0x8c>)
 80069c0:	600a      	str	r2, [r1, #0]
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <HAL_UART_RxCpltCallback+0x94>)
 80069c4:	7811      	ldrb	r1, [r2, #0]
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <HAL_UART_RxCpltCallback+0x90>)
 80069c8:	54d1      	strb	r1, [r2, r3]
        }
        HAL_UART_Receive_IT(&huart3, (uint8_t *) &tmp_data, 1);
 80069ca:	2201      	movs	r2, #1
 80069cc:	4906      	ldr	r1, [pc, #24]	; (80069e8 <HAL_UART_RxCpltCallback+0x94>)
 80069ce:	4808      	ldr	r0, [pc, #32]	; (80069f0 <HAL_UART_RxCpltCallback+0x9c>)
 80069d0:	f7fe ff74 	bl	80058bc <HAL_UART_Receive_IT>
    }
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40004800 	.word	0x40004800
 80069e0:	20000578 	.word	0x20000578
 80069e4:	200006dc 	.word	0x200006dc
 80069e8:	200006d8 	.word	0x200006d8
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	20000514 	.word	0x20000514

080069f4 <set_heat_level>:
float temperature = 0, voltage = 0, NTC = 0;
uint16_t adc1_buffer[ADC_ARRAY_SIZE * ADC_NUMS] = {0};
char tmp_data = 0;
char string_recv[100] = {0};

void set_heat_level(int level) {
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
    TIM1->CCR1 = level;
 80069fc:	4a03      	ldr	r2, [pc, #12]	; (8006a0c <set_heat_level+0x18>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	40012c00 	.word	0x40012c00

08006a10 <set_buzzer_level>:

void set_buzzer_level(int level) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
    assert(level <= 256);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	dd05      	ble.n	8006a2c <set_buzzer_level+0x1c>
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <set_buzzer_level+0x2c>)
 8006a22:	4a07      	ldr	r2, [pc, #28]	; (8006a40 <set_buzzer_level+0x30>)
 8006a24:	2113      	movs	r1, #19
 8006a26:	4807      	ldr	r0, [pc, #28]	; (8006a44 <set_buzzer_level+0x34>)
 8006a28:	f000 fd06 	bl	8007438 <__assert_func>
    TIM3->CCR4 = level;
 8006a2c:	4a06      	ldr	r2, [pc, #24]	; (8006a48 <set_buzzer_level+0x38>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	080089e8 	.word	0x080089e8
 8006a40:	08008a4c 	.word	0x08008a4c
 8006a44:	080089f8 	.word	0x080089f8
 8006a48:	40000400 	.word	0x40000400

08006a4c <refresh_adc>:

void refresh_adc() {
 8006a4c:	b5b0      	push	{r4, r5, r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
    float res[ADC_NUMS] = {0};
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < ADC_ARRAY_SIZE * ADC_NUMS; i++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e024      	b.n	8006aac <refresh_adc+0x60>
        res[i % ADC_NUMS] += (float) adc1_buffer[i];
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <refresh_adc+0xc4>)
 8006a66:	fb83 3102 	smull	r3, r1, r3, r2
 8006a6a:	17d3      	asrs	r3, r2, #31
 8006a6c:	1acc      	subs	r4, r1, r3
 8006a6e:	4623      	mov	r3, r4
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4423      	add	r3, r4
 8006a74:	1ad4      	subs	r4, r2, r3
 8006a76:	00a3      	lsls	r3, r4, #2
 8006a78:	3318      	adds	r3, #24
 8006a7a:	443b      	add	r3, r7
 8006a7c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8006a80:	4a24      	ldr	r2, [pc, #144]	; (8006b14 <refresh_adc+0xc8>)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fa f8a9 	bl	8000be0 <__aeabi_ui2f>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4619      	mov	r1, r3
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7f9 fff4 	bl	8000a80 <__addsf3>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	00a3      	lsls	r3, r4, #2
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	443b      	add	r3, r7
 8006aa2:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < ADC_ARRAY_SIZE * ADC_NUMS; i++) {
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b2f      	cmp	r3, #47	; 0x2f
 8006ab0:	ddd7      	ble.n	8006a62 <refresh_adc+0x16>
    }
    for (int i = 0; i < ADC_NUMS; i++) {
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e015      	b.n	8006ae4 <refresh_adc+0x98>
        res[i] = (res[i] / ADC_ARRAY_SIZE);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	3318      	adds	r3, #24
 8006abe:	443b      	add	r3, r7
 8006ac0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8006ac4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fa f995 	bl	8000df8 <__aeabi_fdiv>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	443b      	add	r3, r7
 8006ada:	f843 2c14 	str.w	r2, [r3, #-20]
    for (int i = 0; i < ADC_NUMS; i++) {
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	dde6      	ble.n	8006ab8 <refresh_adc+0x6c>
    }
    voltage = res[0];
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <refresh_adc+0xcc>)
 8006aee:	6013      	str	r3, [r2, #0]
    NTC = res[1];
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <refresh_adc+0xd0>)
 8006af4:	6013      	str	r3, [r2, #0]
    temperature = res[2];
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <refresh_adc+0xd4>)
 8006afa:	6013      	str	r3, [r2, #0]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc1_buffer, ADC_ARRAY_SIZE * ADC_NUMS);
 8006afc:	2230      	movs	r2, #48	; 0x30
 8006afe:	4905      	ldr	r1, [pc, #20]	; (8006b14 <refresh_adc+0xc8>)
 8006b00:	4808      	ldr	r0, [pc, #32]	; (8006b24 <refresh_adc+0xd8>)
 8006b02:	f7fb fc5d 	bl	80023c0 <HAL_ADC_Start_DMA>
}
 8006b06:	bf00      	nop
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	55555556 	.word	0x55555556
 8006b14:	20000678 	.word	0x20000678
 8006b18:	20000670 	.word	0x20000670
 8006b1c:	20000674 	.word	0x20000674
 8006b20:	2000066c 	.word	0x2000066c
 8006b24:	20000294 	.word	0x20000294

08006b28 <send_bluetooth>:

void send_bluetooth(char string[]) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&bluetooth, (uint8_t *) string, strlen(string), 0xFF);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7f9 fb79 	bl	8000228 <strlen>
 8006b36:	4603      	mov	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	23ff      	movs	r3, #255	; 0xff
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	4803      	ldr	r0, [pc, #12]	; (8006b4c <send_bluetooth+0x24>)
 8006b40:	f7fe fe39 	bl	80057b6 <HAL_UART_Transmit>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000514 	.word	0x20000514

08006b50 <spiSendByte>:
void sendByte(u8 Data);                                    // 向液晶屏发送：数据，8位
void sendShort(u16 Data);                                    // 向液晶屏发送：数据，16位
void setCursor(u16 x_start, u16 y_start, u16 x_end, u16 y_end); // 设置显示区域

// SPI发送传送1字节
u8 spiSendByte(u8 data) {
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
//
//    DMA1_Channel5->CMAR = data;									 //重置存储器地址
//
//    DMA1_Channel5->CCR |= 3 << 0;               //开启DMA通道5，使能发送完成中断;

    while ((SPI2->SR & SPI_FLAG_TXE) == RESET) {}
 8006b5a:	bf00      	nop
 8006b5c:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <spiSendByte+0x3c>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f9      	beq.n	8006b5c <spiSendByte+0xc>
    SPI2->DR = data;
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <spiSendByte+0x3c>)
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	60d3      	str	r3, [r2, #12]
    while ((SPI2->SR & SPI_FLAG_RXNE) == RESET) {}
 8006b6e:	bf00      	nop
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <spiSendByte+0x3c>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f9      	beq.n	8006b70 <spiSendByte+0x20>
    return SPI2->DR;
 8006b7c:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <spiSendByte+0x3c>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	b2db      	uxtb	r3, r3
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	40003800 	.word	0x40003800

08006b90 <LCD_Init>:
*功  能：初始化lcd
*参  数：为了简化理解、便于移植，参数(屏幕像素、显示方向)在h文件里进行修改
*返回值：无
*备  注：
*****************************************************************************/
void LCD_Init(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af02      	add	r7, sp, #8
    for (u8 i = 1; i < 255; i++) {
 8006b96:	2301      	movs	r3, #1
 8006b98:	71fb      	strb	r3, [r7, #7]
 8006b9a:	e00e      	b.n	8006bba <LCD_Init+0x2a>
        if (colors[i] != 0) {
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	4aa5      	ldr	r2, [pc, #660]	; (8006e34 <LCD_Init+0x2a4>)
 8006ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <LCD_Init+0x24>
            color_len += 1;
 8006ba8:	4ba3      	ldr	r3, [pc, #652]	; (8006e38 <LCD_Init+0x2a8>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	4ba1      	ldr	r3, [pc, #644]	; (8006e38 <LCD_Init+0x2a8>)
 8006bb2:	701a      	strb	r2, [r3, #0]
    for (u8 i = 1; i < 255; i++) {
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	71fb      	strb	r3, [r7, #7]
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d1ed      	bne.n	8006b9c <LCD_Init+0xc>
        }
    }

    xLCD.InitOK = 0;
 8006bc0:	4b9e      	ldr	r3, [pc, #632]	; (8006e3c <LCD_Init+0x2ac>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
    xLCD.bColor = BLACK;
 8006bc6:	4b9d      	ldr	r3, [pc, #628]	; (8006e3c <LCD_Init+0x2ac>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	609a      	str	r2, [r3, #8]
    // 显示方向像素匹配
    if ((LCD_DIR == 1) || (LCD_DIR == 3)) {
        xLCD.width = LCD_WIDTH;       // 屏宽度像素，超过此值驱动芯片会自动换行，注意：如果屏幕右边有花屏，就加大这个值
        xLCD.height = LCD_HEIGHT;        // 屏高度像素， 注意：如果屏幕下面有花屏，就加大这个值
    } else {
        xLCD.width = LCD_HEIGHT;
 8006bcc:	4b9b      	ldr	r3, [pc, #620]	; (8006e3c <LCD_Init+0x2ac>)
 8006bce:	2280      	movs	r2, #128	; 0x80
 8006bd0:	805a      	strh	r2, [r3, #2]
        xLCD.height = LCD_WIDTH;
 8006bd2:	4b9a      	ldr	r3, [pc, #616]	; (8006e3c <LCD_Init+0x2ac>)
 8006bd4:	22a0      	movs	r2, #160	; 0xa0
 8006bd6:	809a      	strh	r2, [r3, #4]
    }

    // 初始化GPIO
//    gpioInit();
    MX_GPIO_Init();
 8006bd8:	f7fa fb24 	bl	8001224 <MX_GPIO_Init>
    // 初始化SPI外设、协议
//    spiInit();
    MX_SPI2_Init();
 8006bdc:	f7fa fc7e 	bl	80014dc <MX_SPI2_Init>
    __HAL_SPI_ENABLE(&hspi2);
 8006be0:	4b97      	ldr	r3, [pc, #604]	; (8006e40 <LCD_Init+0x2b0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b96      	ldr	r3, [pc, #600]	; (8006e40 <LCD_Init+0x2b0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bee:	601a      	str	r2, [r3, #0]
    LCD_BL_HIGH;
 8006bf0:	4b94      	ldr	r3, [pc, #592]	; (8006e44 <LCD_Init+0x2b4>)
 8006bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf6:	611a      	str	r2, [r3, #16]

    // 屏幕复位
    LCD_RES_LOW;           // LCD_RST=0	  //SPI接口复位
 8006bf8:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <LCD_Init+0x2b4>)
 8006bfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bfe:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);          // delay 20 ms
 8006c00:	2014      	movs	r0, #20
 8006c02:	f7fb facf 	bl	80021a4 <HAL_Delay>
    LCD_RES_HIGH;        // LCD_RST=1
 8006c06:	4b8f      	ldr	r3, [pc, #572]	; (8006e44 <LCD_Init+0x2b4>)
 8006c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c0c:	611a      	str	r2, [r3, #16]
    HAL_Delay(20);
 8006c0e:	2014      	movs	r0, #20
 8006c10:	f7fb fac8 	bl	80021a4 <HAL_Delay>

    sendOrder(0x11);       // 退出睡眠模式
 8006c14:	2011      	movs	r0, #17
 8006c16:	f000 f917 	bl	8006e48 <sendOrder>
    HAL_Delay(120);         // Delay 120ms
 8006c1a:	2078      	movs	r0, #120	; 0x78
 8006c1c:	f7fb fac2 	bl	80021a4 <HAL_Delay>
    //------------------------------------ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB1);
 8006c20:	20b1      	movs	r0, #177	; 0xb1
 8006c22:	f000 f911 	bl	8006e48 <sendOrder>
    sendByte(0x05);
 8006c26:	2005      	movs	r0, #5
 8006c28:	f000 f92a 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c2c:	203c      	movs	r0, #60	; 0x3c
 8006c2e:	f000 f927 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c32:	203c      	movs	r0, #60	; 0x3c
 8006c34:	f000 f924 	bl	8006e80 <sendByte>

    sendOrder(0xB2);
 8006c38:	20b2      	movs	r0, #178	; 0xb2
 8006c3a:	f000 f905 	bl	8006e48 <sendOrder>
    sendByte(0x05);
 8006c3e:	2005      	movs	r0, #5
 8006c40:	f000 f91e 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c44:	203c      	movs	r0, #60	; 0x3c
 8006c46:	f000 f91b 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c4a:	203c      	movs	r0, #60	; 0x3c
 8006c4c:	f000 f918 	bl	8006e80 <sendByte>

    sendOrder(0xB3);
 8006c50:	20b3      	movs	r0, #179	; 0xb3
 8006c52:	f000 f8f9 	bl	8006e48 <sendOrder>
    sendByte(0x05);
 8006c56:	2005      	movs	r0, #5
 8006c58:	f000 f912 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c5c:	203c      	movs	r0, #60	; 0x3c
 8006c5e:	f000 f90f 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c62:	203c      	movs	r0, #60	; 0x3c
 8006c64:	f000 f90c 	bl	8006e80 <sendByte>
    sendByte(0x05);
 8006c68:	2005      	movs	r0, #5
 8006c6a:	f000 f909 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c6e:	203c      	movs	r0, #60	; 0x3c
 8006c70:	f000 f906 	bl	8006e80 <sendByte>
    sendByte(0x3C);
 8006c74:	203c      	movs	r0, #60	; 0x3c
 8006c76:	f000 f903 	bl	8006e80 <sendByte>
    //------------------------------------End ST7735S Frame Rate-----------------------------------------//
    sendOrder(0xB4); // Dot inversion
 8006c7a:	20b4      	movs	r0, #180	; 0xb4
 8006c7c:	f000 f8e4 	bl	8006e48 <sendOrder>
    sendByte(0x03);
 8006c80:	2003      	movs	r0, #3
 8006c82:	f000 f8fd 	bl	8006e80 <sendByte>

    sendOrder(0xC0); // ST7735R Power Sequence
 8006c86:	20c0      	movs	r0, #192	; 0xc0
 8006c88:	f000 f8de 	bl	8006e48 <sendOrder>
    sendByte(0x28);
 8006c8c:	2028      	movs	r0, #40	; 0x28
 8006c8e:	f000 f8f7 	bl	8006e80 <sendByte>
    sendByte(0x08);
 8006c92:	2008      	movs	r0, #8
 8006c94:	f000 f8f4 	bl	8006e80 <sendByte>
    sendByte(0x04);
 8006c98:	2004      	movs	r0, #4
 8006c9a:	f000 f8f1 	bl	8006e80 <sendByte>

    sendOrder(0xC1);
 8006c9e:	20c1      	movs	r0, #193	; 0xc1
 8006ca0:	f000 f8d2 	bl	8006e48 <sendOrder>
    sendByte(0XC0);
 8006ca4:	20c0      	movs	r0, #192	; 0xc0
 8006ca6:	f000 f8eb 	bl	8006e80 <sendByte>

    sendOrder(0xC2);
 8006caa:	20c2      	movs	r0, #194	; 0xc2
 8006cac:	f000 f8cc 	bl	8006e48 <sendOrder>
    sendByte(0x0D);
 8006cb0:	200d      	movs	r0, #13
 8006cb2:	f000 f8e5 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f000 f8e2 	bl	8006e80 <sendByte>
    sendOrder(0xC3);
 8006cbc:	20c3      	movs	r0, #195	; 0xc3
 8006cbe:	f000 f8c3 	bl	8006e48 <sendOrder>

    sendByte(0x8D);
 8006cc2:	208d      	movs	r0, #141	; 0x8d
 8006cc4:	f000 f8dc 	bl	8006e80 <sendByte>
    sendByte(0x2A);
 8006cc8:	202a      	movs	r0, #42	; 0x2a
 8006cca:	f000 f8d9 	bl	8006e80 <sendByte>

    sendOrder(0xC4);
 8006cce:	20c4      	movs	r0, #196	; 0xc4
 8006cd0:	f000 f8ba 	bl	8006e48 <sendOrder>
    sendByte(0x8D);
 8006cd4:	208d      	movs	r0, #141	; 0x8d
 8006cd6:	f000 f8d3 	bl	8006e80 <sendByte>
    sendByte(0xEE);
 8006cda:	20ee      	movs	r0, #238	; 0xee
 8006cdc:	f000 f8d0 	bl	8006e80 <sendByte>
    //---------------------------------End ST7735S Power Sequence-------------------------------------//
    sendOrder(0xC5); //VCOM
 8006ce0:	20c5      	movs	r0, #197	; 0xc5
 8006ce2:	f000 f8b1 	bl	8006e48 <sendOrder>
    sendByte(0x1A);
 8006ce6:	201a      	movs	r0, #26
 8006ce8:	f000 f8ca 	bl	8006e80 <sendByte>
    sendOrder(0x36); //MX, MY, RGB mode
 8006cec:	2036      	movs	r0, #54	; 0x36
 8006cee:	f000 f8ab 	bl	8006e48 <sendOrder>
    if (LCD_DIR == 1) sendByte(0xC0);  // 重要：显示方向控制，C0/00/A0/60,  C8/08/A8/68
    if (LCD_DIR == 2) sendByte(0x00);
    if (LCD_DIR == 3) sendByte(0xA0);
    if (LCD_DIR == 4) sendByte(0x60);
 8006cf2:	2060      	movs	r0, #96	; 0x60
 8006cf4:	f000 f8c4 	bl	8006e80 <sendByte>
    //------------------------------------ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0xE0);
 8006cf8:	20e0      	movs	r0, #224	; 0xe0
 8006cfa:	f000 f8a5 	bl	8006e48 <sendOrder>
    sendByte(0x04);
 8006cfe:	2004      	movs	r0, #4
 8006d00:	f000 f8be 	bl	8006e80 <sendByte>
    sendByte(0x22);
 8006d04:	2022      	movs	r0, #34	; 0x22
 8006d06:	f000 f8bb 	bl	8006e80 <sendByte>
    sendByte(0x07);
 8006d0a:	2007      	movs	r0, #7
 8006d0c:	f000 f8b8 	bl	8006e80 <sendByte>
    sendByte(0x0A);
 8006d10:	200a      	movs	r0, #10
 8006d12:	f000 f8b5 	bl	8006e80 <sendByte>
    sendByte(0x2E);
 8006d16:	202e      	movs	r0, #46	; 0x2e
 8006d18:	f000 f8b2 	bl	8006e80 <sendByte>
    sendByte(0x30);
 8006d1c:	2030      	movs	r0, #48	; 0x30
 8006d1e:	f000 f8af 	bl	8006e80 <sendByte>
    sendByte(0x25);
 8006d22:	2025      	movs	r0, #37	; 0x25
 8006d24:	f000 f8ac 	bl	8006e80 <sendByte>
    sendByte(0x2A);
 8006d28:	202a      	movs	r0, #42	; 0x2a
 8006d2a:	f000 f8a9 	bl	8006e80 <sendByte>
    sendByte(0x28);
 8006d2e:	2028      	movs	r0, #40	; 0x28
 8006d30:	f000 f8a6 	bl	8006e80 <sendByte>
    sendByte(0x26);
 8006d34:	2026      	movs	r0, #38	; 0x26
 8006d36:	f000 f8a3 	bl	8006e80 <sendByte>
    sendByte(0x2E);
 8006d3a:	202e      	movs	r0, #46	; 0x2e
 8006d3c:	f000 f8a0 	bl	8006e80 <sendByte>
    sendByte(0x3A);
 8006d40:	203a      	movs	r0, #58	; 0x3a
 8006d42:	f000 f89d 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 f89a 	bl	8006e80 <sendByte>
    sendByte(0x01);
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	f000 f897 	bl	8006e80 <sendByte>
    sendByte(0x03);
 8006d52:	2003      	movs	r0, #3
 8006d54:	f000 f894 	bl	8006e80 <sendByte>
    sendByte(0x13);
 8006d58:	2013      	movs	r0, #19
 8006d5a:	f000 f891 	bl	8006e80 <sendByte>

    sendOrder(0xE1);
 8006d5e:	20e1      	movs	r0, #225	; 0xe1
 8006d60:	f000 f872 	bl	8006e48 <sendOrder>
    sendByte(0x04);
 8006d64:	2004      	movs	r0, #4
 8006d66:	f000 f88b 	bl	8006e80 <sendByte>
    sendByte(0x16);
 8006d6a:	2016      	movs	r0, #22
 8006d6c:	f000 f888 	bl	8006e80 <sendByte>
    sendByte(0x06);
 8006d70:	2006      	movs	r0, #6
 8006d72:	f000 f885 	bl	8006e80 <sendByte>
    sendByte(0x0D);
 8006d76:	200d      	movs	r0, #13
 8006d78:	f000 f882 	bl	8006e80 <sendByte>
    sendByte(0x2D);
 8006d7c:	202d      	movs	r0, #45	; 0x2d
 8006d7e:	f000 f87f 	bl	8006e80 <sendByte>
    sendByte(0x26);
 8006d82:	2026      	movs	r0, #38	; 0x26
 8006d84:	f000 f87c 	bl	8006e80 <sendByte>
    sendByte(0x23);
 8006d88:	2023      	movs	r0, #35	; 0x23
 8006d8a:	f000 f879 	bl	8006e80 <sendByte>
    sendByte(0x27);
 8006d8e:	2027      	movs	r0, #39	; 0x27
 8006d90:	f000 f876 	bl	8006e80 <sendByte>
    sendByte(0x27);
 8006d94:	2027      	movs	r0, #39	; 0x27
 8006d96:	f000 f873 	bl	8006e80 <sendByte>
    sendByte(0x25);
 8006d9a:	2025      	movs	r0, #37	; 0x25
 8006d9c:	f000 f870 	bl	8006e80 <sendByte>
    sendByte(0x2D);
 8006da0:	202d      	movs	r0, #45	; 0x2d
 8006da2:	f000 f86d 	bl	8006e80 <sendByte>
    sendByte(0x3B);
 8006da6:	203b      	movs	r0, #59	; 0x3b
 8006da8:	f000 f86a 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006dac:	2000      	movs	r0, #0
 8006dae:	f000 f867 	bl	8006e80 <sendByte>
    sendByte(0x01);
 8006db2:	2001      	movs	r0, #1
 8006db4:	f000 f864 	bl	8006e80 <sendByte>
    sendByte(0x04);
 8006db8:	2004      	movs	r0, #4
 8006dba:	f000 f861 	bl	8006e80 <sendByte>
    sendByte(0x13);
 8006dbe:	2013      	movs	r0, #19
 8006dc0:	f000 f85e 	bl	8006e80 <sendByte>

    // 后期复制增加的，不明白
    sendOrder(0x2a);
 8006dc4:	202a      	movs	r0, #42	; 0x2a
 8006dc6:	f000 f83f 	bl	8006e48 <sendOrder>
    sendByte(0x00);
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f000 f858 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	f000 f855 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f000 f852 	bl	8006e80 <sendByte>
    sendByte(0x7f);
 8006ddc:	207f      	movs	r0, #127	; 0x7f
 8006dde:	f000 f84f 	bl	8006e80 <sendByte>
    // 后期复制增加的，不明白
    sendOrder(0x2b);
 8006de2:	202b      	movs	r0, #43	; 0x2b
 8006de4:	f000 f830 	bl	8006e48 <sendOrder>
    sendByte(0x00);
 8006de8:	2000      	movs	r0, #0
 8006dea:	f000 f849 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006dee:	2000      	movs	r0, #0
 8006df0:	f000 f846 	bl	8006e80 <sendByte>
    sendByte(0x00);
 8006df4:	2000      	movs	r0, #0
 8006df6:	f000 f843 	bl	8006e80 <sendByte>
    sendByte(0x9f);
 8006dfa:	209f      	movs	r0, #159	; 0x9f
 8006dfc:	f000 f840 	bl	8006e80 <sendByte>
    //------------------------------------End ST7735S Gamma Sequence-----------------------------------------//
    sendOrder(0x3A); // 65k mode
 8006e00:	203a      	movs	r0, #58	; 0x3a
 8006e02:	f000 f821 	bl	8006e48 <sendOrder>
    sendByte(0x05);
 8006e06:	2005      	movs	r0, #5
 8006e08:	f000 f83a 	bl	8006e80 <sendByte>

    sendOrder(0x29); // Display on
 8006e0c:	2029      	movs	r0, #41	; 0x29
 8006e0e:	f000 f81b 	bl	8006e48 <sendOrder>

    LCD_Fill(1, 1, xLCD.width, xLCD.height, BLACK);
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <LCD_Init+0x2ac>)
 8006e14:	885a      	ldrh	r2, [r3, #2]
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <LCD_Init+0x2ac>)
 8006e18:	889b      	ldrh	r3, [r3, #4]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	9100      	str	r1, [sp, #0]
 8006e1e:	2101      	movs	r1, #1
 8006e20:	2001      	movs	r0, #1
 8006e22:	f000 f91d 	bl	8007060 <LCD_Fill>
    xLCD.InitOK = 1;
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <LCD_Init+0x2ac>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000014 	.word	0x20000014
 8006e38:	20000212 	.word	0x20000212
 8006e3c:	20005740 	.word	0x20005740
 8006e40:	20000308 	.word	0x20000308
 8006e44:	40011400 	.word	0x40011400

08006e48 <sendOrder>:

// 向LCD发送寄存器地址(指令)
void sendOrder(u16 order) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <sendOrder+0x34>)
 8006e54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006e58:	611a      	str	r2, [r3, #16]
    LCD_RS_LOW;            // RS高: 数据值， RS低: 寄存器地址值
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <sendOrder+0x34>)
 8006e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e60:	611a      	str	r2, [r3, #16]
    spiSendByte(order);    // 发送 寄存器地址值
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fe72 	bl	8006b50 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8006e6c:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <sendOrder+0x34>)
 8006e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e72:	611a      	str	r2, [r3, #16]
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40011400 	.word	0x40011400

08006e80 <sendByte>:

// 向LCD发送数值
void sendByte(u8 data) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <sendByte+0x34>)
 8006e8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006e90:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据值， RS低: 寄存器地址值
 8006e92:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <sendByte+0x34>)
 8006e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e98:	611a      	str	r2, [r3, #16]
    spiSendByte(data);     // 发送1字节
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fe57 	bl	8006b50 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8006ea2:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <sendByte+0x34>)
 8006ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ea8:	611a      	str	r2, [r3, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40011400 	.word	0x40011400

08006eb8 <sendShort>:

// 向LCD发送2个字节
void sendShort(u16 data) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	80fb      	strh	r3, [r7, #6]
    LCD_CS_LOW;            // SPI设备片选拉低，开始通信
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <sendShort+0x44>)
 8006ec4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006ec8:	611a      	str	r2, [r3, #16]
    LCD_RS_HIGH;           // RS高: 数据， RS低: 指令
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <sendShort+0x44>)
 8006ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed0:	611a      	str	r2, [r3, #16]
    spiSendByte(data >> 8);  // 发送1字节
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fe38 	bl	8006b50 <spiSendByte>
    spiSendByte(data);     // 发送1字节
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fe33 	bl	8006b50 <spiSendByte>
    LCD_CS_HIGH;           // SPI设备片选拉高，结束通信
 8006eea:	4b04      	ldr	r3, [pc, #16]	; (8006efc <sendShort+0x44>)
 8006eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ef0:	611a      	str	r2, [r3, #16]
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40011400 	.word	0x40011400

08006f00 <LCD_Display>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void LCD_Display(u8 sw) {
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
    if (sw == 0)
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d104      	bne.n	8006f1a <LCD_Display+0x1a>
        LCD_BL_LOW;
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <LCD_Display+0x2c>)
 8006f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f16:	611a      	str	r2, [r3, #16]
    else
        LCD_BL_HIGH;
}
 8006f18:	e003      	b.n	8006f22 <LCD_Display+0x22>
        LCD_BL_HIGH;
 8006f1a:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <LCD_Display+0x2c>)
 8006f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f20:	611a      	str	r2, [r3, #16]
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr
 8006f2c:	40011400 	.word	0x40011400

08006f30 <setCursor>:
 * 返回值：无
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
******************************************************************/
void setCursor(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd) {
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4623      	mov	r3, r4
 8006f40:	80fb      	strh	r3, [r7, #6]
 8006f42:	4603      	mov	r3, r0
 8006f44:	80bb      	strh	r3, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	807b      	strh	r3, [r7, #2]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	803b      	strh	r3, [r7, #0]
    sendOrder(0x2A);
 8006f4e:	202a      	movs	r0, #42	; 0x2a
 8006f50:	f7ff ff7a 	bl	8006e48 <sendOrder>
    sendByte(xStart >> 8);   // 起始位置x高位，因为1.8寸屏是128*160, 不大于255, 直接写0省事
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff8f 	bl	8006e80 <sendByte>
    sendByte(xStart); // 起始位置x低位，值传递时自动舍弃了高8位，也省得运算了
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff ff8a 	bl	8006e80 <sendByte>
    sendByte(xEnd >> 8);   // 起始位置y高位
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff83 	bl	8006e80 <sendByte>
    sendByte(xEnd);   // 起始位置x位位
 8006f7a:	887b      	ldrh	r3, [r7, #2]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff ff7e 	bl	8006e80 <sendByte>

    sendOrder(0x2B);
 8006f84:	202b      	movs	r0, #43	; 0x2b
 8006f86:	f7ff ff5f 	bl	8006e48 <sendOrder>
    sendByte(yStart >> 8);
 8006f8a:	88bb      	ldrh	r3, [r7, #4]
 8006f8c:	0a1b      	lsrs	r3, r3, #8
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff ff74 	bl	8006e80 <sendByte>
    sendByte(yStart);
 8006f98:	88bb      	ldrh	r3, [r7, #4]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff6f 	bl	8006e80 <sendByte>
    sendByte(yEnd >> 8);
 8006fa2:	883b      	ldrh	r3, [r7, #0]
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff ff68 	bl	8006e80 <sendByte>
    sendByte(yEnd);
 8006fb0:	883b      	ldrh	r3, [r7, #0]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff63 	bl	8006e80 <sendByte>

    sendOrder(0x2c);  // 发送写数据命令
 8006fba:	202c      	movs	r0, #44	; 0x2c
 8006fbc:	f7ff ff44 	bl	8006e48 <sendOrder>
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <drawPoint>:
函数名：在rawPoint
功  能：画一个点
参  数：无
返回值：无
*************************************************/
void drawPoint(u16 x, u16 y, u16 color) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	80fb      	strh	r3, [r7, #6]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	80bb      	strh	r3, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	807b      	strh	r3, [r7, #2]
    uint8_t index = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < color_len; i++) {
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73bb      	strb	r3, [r7, #14]
 8006fe2:	e00c      	b.n	8006ffe <drawPoint+0x36>
        if (colors[i] == color) {
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <drawPoint+0x8c>)
 8006fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fec:	887a      	ldrh	r2, [r7, #2]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d102      	bne.n	8006ff8 <drawPoint+0x30>
            index = i;
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	73fb      	strb	r3, [r7, #15]
            break;
 8006ff6:	e007      	b.n	8007008 <drawPoint+0x40>
    for (uint8_t i = 0; i < color_len; i++) {
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	73bb      	strb	r3, [r7, #14]
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <drawPoint+0x90>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	7bba      	ldrb	r2, [r7, #14]
 8007004:	429a      	cmp	r2, r3
 8007006:	d3ed      	bcc.n	8006fe4 <drawPoint+0x1c>
        }
    }

    if (map[x][y] != index) {
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	88b9      	ldrh	r1, [r7, #4]
 800700c:	4813      	ldr	r0, [pc, #76]	; (800705c <drawPoint+0x94>)
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	015b      	lsls	r3, r3, #5
 8007016:	4403      	add	r3, r0
 8007018:	440b      	add	r3, r1
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	7bfa      	ldrb	r2, [r7, #15]
 800701e:	429a      	cmp	r2, r3
 8007020:	d014      	beq.n	800704c <drawPoint+0x84>
        map[x][y] = index;
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	88b9      	ldrh	r1, [r7, #4]
 8007026:	480d      	ldr	r0, [pc, #52]	; (800705c <drawPoint+0x94>)
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	015b      	lsls	r3, r3, #5
 8007030:	4403      	add	r3, r0
 8007032:	440b      	add	r3, r1
 8007034:	7bfa      	ldrb	r2, [r7, #15]
 8007036:	701a      	strb	r2, [r3, #0]
        setCursor(x, y, x, y);      //设置光标位置
 8007038:	88bb      	ldrh	r3, [r7, #4]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	88b9      	ldrh	r1, [r7, #4]
 800703e:	88f8      	ldrh	r0, [r7, #6]
 8007040:	f7ff ff76 	bl	8006f30 <setCursor>
        sendShort(color);
 8007044:	887b      	ldrh	r3, [r7, #2]
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff ff36 	bl	8006eb8 <sendShort>
    }
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000014 	.word	0x20000014
 8007058:	20000212 	.word	0x20000212
 800705c:	20000740 	.word	0x20000740

08007060 <LCD_Fill>:
 *          u32 Color           填充的颜色
 *
 * 备  注： 魔女开发板团队编写   淘宝 https://demoboard.taobao.com
 * 分  享： 不断更新于Q群文件夹：262901124  最后修改_2020年09月01日
 *****************************************************************/
void LCD_Fill(u16 xStart, u16 yStart, u16 xEnd, u16 yEnd, u16 color) {
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	80fb      	strh	r3, [r7, #6]
 8007072:	4603      	mov	r3, r0
 8007074:	80bb      	strh	r3, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	807b      	strh	r3, [r7, #2]
 800707a:	4613      	mov	r3, r2
 800707c:	803b      	strh	r3, [r7, #0]
//    spiInit();                                      // 防止SPI参数被其它设备修改了
    u32 pixel = (xEnd - xStart + 1) * (yEnd - yStart + 1);    // 填充的像素数量
 800707e:	887a      	ldrh	r2, [r7, #2]
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	3301      	adds	r3, #1
 8007086:	8839      	ldrh	r1, [r7, #0]
 8007088:	88ba      	ldrh	r2, [r7, #4]
 800708a:	1a8a      	subs	r2, r1, r2
 800708c:	3201      	adds	r2, #1
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	60fb      	str	r3, [r7, #12]

    setCursor(xStart, yStart, xEnd, yEnd);        // 设定填充范围
 8007094:	883b      	ldrh	r3, [r7, #0]
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	88b9      	ldrh	r1, [r7, #4]
 800709a:	88f8      	ldrh	r0, [r7, #6]
 800709c:	f7ff ff48 	bl	8006f30 <setCursor>
    while (pixel-- > 0)                                // 发送颜色值
 80070a0:	e003      	b.n	80070aa <LCD_Fill+0x4a>
        sendShort(color);
 80070a2:	8c3b      	ldrh	r3, [r7, #32]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ff07 	bl	8006eb8 <sendShort>
    while (pixel-- > 0)                                // 发送颜色值
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	60fa      	str	r2, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f6      	bne.n	80070a2 <LCD_Fill+0x42>
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}
	...

080070c0 <drawAscii>:
 *          u8  size    字体大小 12/16/24/32
 *          u32 fColor  字体颜色
 *          u32 bColor  背景颜色
 * 备  注： 参考原子哥和野火大神的代码后修改  资料存放Q群：262901124
 *****************************************************************/
void drawAscii(u16 x, u16 y, u8 num, u8 size, u32 fColor, u32 bColor) {
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	4611      	mov	r1, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	4623      	mov	r3, r4
 80070d0:	80fb      	strh	r3, [r7, #6]
 80070d2:	4603      	mov	r3, r0
 80070d4:	80bb      	strh	r3, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
 80070da:	4613      	mov	r3, r2
 80070dc:	70bb      	strb	r3, [r7, #2]
//    spiInit();                                        // 防止SPI参数被其它设备修改了

    if (xLCD.InitOK == 0) return;
 80070de:	4b50      	ldr	r3, [pc, #320]	; (8007220 <drawAscii+0x160>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8094 	beq.w	8007210 <drawAscii+0x150>

    u8 temp;
    u16 y0 = y;
 80070e8:	88bb      	ldrh	r3, [r7, #4]
 80070ea:	817b      	strh	r3, [r7, #10]

    u8 csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);           // 得到字体一个字符对应点阵集所占的字节数
 80070ec:	78bb      	ldrb	r3, [r7, #2]
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	78bb      	ldrb	r3, [r7, #2]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	4413      	add	r3, r2
 8007108:	b2db      	uxtb	r3, r3
 800710a:	78ba      	ldrb	r2, [r7, #2]
 800710c:	0852      	lsrs	r2, r2, #1
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	727b      	strb	r3, [r7, #9]
    num = num - ' ';                                       // 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	3b20      	subs	r3, #32
 800711a:	70fb      	strb	r3, [r7, #3]
    for (u8 t = 0; t < csize; t++) {
 800711c:	2300      	movs	r3, #0
 800711e:	73bb      	strb	r3, [r7, #14]
 8007120:	e071      	b.n	8007206 <drawAscii+0x146>
        if (size == 12) temp = asc2_1206[num][t];   // 调用1206字体
 8007122:	78bb      	ldrb	r3, [r7, #2]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d10b      	bne.n	8007140 <drawAscii+0x80>
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	7bb9      	ldrb	r1, [r7, #14]
 800712c:	483d      	ldr	r0, [pc, #244]	; (8007224 <drawAscii+0x164>)
 800712e:	4613      	mov	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4403      	add	r3, r0
 8007138:	440b      	add	r3, r1
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e025      	b.n	800718c <drawAscii+0xcc>
        else if (size == 16) temp = asc2_1608[num][t];   // 调用1608字体
 8007140:	78bb      	ldrb	r3, [r7, #2]
 8007142:	2b10      	cmp	r3, #16
 8007144:	d108      	bne.n	8007158 <drawAscii+0x98>
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	4937      	ldr	r1, [pc, #220]	; (8007228 <drawAscii+0x168>)
 800714c:	0112      	lsls	r2, r2, #4
 800714e:	440a      	add	r2, r1
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	73fb      	strb	r3, [r7, #15]
 8007156:	e019      	b.n	800718c <drawAscii+0xcc>
        else if (size == 24) temp = asc2_2412[num][t];   // 调用2412字体
 8007158:	78bb      	ldrb	r3, [r7, #2]
 800715a:	2b18      	cmp	r3, #24
 800715c:	d10b      	bne.n	8007176 <drawAscii+0xb6>
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	7bb9      	ldrb	r1, [r7, #14]
 8007162:	4832      	ldr	r0, [pc, #200]	; (800722c <drawAscii+0x16c>)
 8007164:	4613      	mov	r3, r2
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4403      	add	r3, r0
 800716e:	440b      	add	r3, r1
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	73fb      	strb	r3, [r7, #15]
 8007174:	e00a      	b.n	800718c <drawAscii+0xcc>
        else if (size == 32) temp = asc2_3216[num][t];   // 调用3216字体
 8007176:	78bb      	ldrb	r3, [r7, #2]
 8007178:	2b20      	cmp	r3, #32
 800717a:	d14b      	bne.n	8007214 <drawAscii+0x154>
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	492b      	ldr	r1, [pc, #172]	; (8007230 <drawAscii+0x170>)
 8007182:	0192      	lsls	r2, r2, #6
 8007184:	440a      	add	r2, r1
 8007186:	4413      	add	r3, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	73fb      	strb	r3, [r7, #15]
        else return;                                   // 没有的字库

        for (u8 t1 = 0; t1 < 8; t1++) {
 800718c:	2300      	movs	r3, #0
 800718e:	737b      	strb	r3, [r7, #13]
 8007190:	e031      	b.n	80071f6 <drawAscii+0x136>
            if (temp & 0x80) {
 8007192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	da07      	bge.n	80071aa <drawAscii+0xea>
                drawPoint(x, y, fColor);  // 字体 画点
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	b29a      	uxth	r2, r3
 800719e:	88b9      	ldrh	r1, [r7, #4]
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff ff10 	bl	8006fc8 <drawPoint>
 80071a8:	e006      	b.n	80071b8 <drawAscii+0xf8>
            } else {
                drawPoint(x, y, bColor);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	88b9      	ldrh	r1, [r7, #4]
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff ff08 	bl	8006fc8 <drawPoint>
            } // 背景 画点
            temp <<= 1;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
            y++;
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	3301      	adds	r3, #1
 80071c2:	80bb      	strh	r3, [r7, #4]
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 80071c4:	4b16      	ldr	r3, [pc, #88]	; (8007220 <drawAscii+0x160>)
 80071c6:	889b      	ldrh	r3, [r3, #4]
 80071c8:	88ba      	ldrh	r2, [r7, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d224      	bcs.n	8007218 <drawAscii+0x158>
            if ((y - y0) == size) {
 80071ce:	88ba      	ldrh	r2, [r7, #4]
 80071d0:	897b      	ldrh	r3, [r7, #10]
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	78bb      	ldrb	r3, [r7, #2]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d10a      	bne.n	80071f0 <drawAscii+0x130>
                y = y0;
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	80bb      	strh	r3, [r7, #4]
                x++;
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	3301      	adds	r3, #1
 80071e2:	80fb      	strh	r3, [r7, #6]
                if (x >= xLCD.width) return;              // 超出屏幕宽度(宽)
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <drawAscii+0x160>)
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d307      	bcc.n	80071fe <drawAscii+0x13e>
 80071ee:	e014      	b.n	800721a <drawAscii+0x15a>
        for (u8 t1 = 0; t1 < 8; t1++) {
 80071f0:	7b7b      	ldrb	r3, [r7, #13]
 80071f2:	3301      	adds	r3, #1
 80071f4:	737b      	strb	r3, [r7, #13]
 80071f6:	7b7b      	ldrb	r3, [r7, #13]
 80071f8:	2b07      	cmp	r3, #7
 80071fa:	d9ca      	bls.n	8007192 <drawAscii+0xd2>
 80071fc:	e000      	b.n	8007200 <drawAscii+0x140>
                break;
 80071fe:	bf00      	nop
    for (u8 t = 0; t < csize; t++) {
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	3301      	adds	r3, #1
 8007204:	73bb      	strb	r3, [r7, #14]
 8007206:	7bba      	ldrb	r2, [r7, #14]
 8007208:	7a7b      	ldrb	r3, [r7, #9]
 800720a:	429a      	cmp	r2, r3
 800720c:	d389      	bcc.n	8007122 <drawAscii+0x62>
 800720e:	e004      	b.n	800721a <drawAscii+0x15a>
    if (xLCD.InitOK == 0) return;
 8007210:	bf00      	nop
 8007212:	e002      	b.n	800721a <drawAscii+0x15a>
        else return;                                   // 没有的字库
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <drawAscii+0x15a>
            if (y >= xLCD.height) return;               // 超出屏幕高度(底)
 8007218:	bf00      	nop
            }
        }
    }
}
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}
 8007220:	20005740 	.word	0x20005740
 8007224:	08008a60 	.word	0x08008a60
 8007228:	08008ed4 	.word	0x08008ed4
 800722c:	080094c4 	.word	0x080094c4
 8007230:	0800a220 	.word	0x0800a220

08007234 <LCD_String>:
 *
 * 参  数：
 * 返回值：　
 * 备  注： 魔女开发板团队  资料存放Q群：262901124        最后修改_2020年05月1８日
 ******************************************************************************/
void LCD_String(u16 x, u16 y, char *pFont, u8 size, u32 fColor, u32 bColor) {
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b089      	sub	sp, #36	; 0x24
 8007238:	af02      	add	r7, sp, #8
 800723a:	60ba      	str	r2, [r7, #8]
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	81fb      	strh	r3, [r7, #14]
 8007242:	460b      	mov	r3, r1
 8007244:	81bb      	strh	r3, [r7, #12]
 8007246:	4613      	mov	r3, r2
 8007248:	71fb      	strb	r3, [r7, #7]
    if (xLCD.InitOK == 0)
 800724a:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <LCD_String+0xcc>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d04f      	beq.n	80072f2 <LCD_String+0xbe>
        return;

    u16 xStart = x;
 8007252:	89fb      	ldrh	r3, [r7, #14]
 8007254:	82fb      	strh	r3, [r7, #22]

    // 字体大小控制
    if (size != 12 && size != 16 && size != 24 && size != 32)
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b0c      	cmp	r3, #12
 800725a:	d045      	beq.n	80072e8 <LCD_String+0xb4>
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b10      	cmp	r3, #16
 8007260:	d042      	beq.n	80072e8 <LCD_String+0xb4>
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b18      	cmp	r3, #24
 8007266:	d03f      	beq.n	80072e8 <LCD_String+0xb4>
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b20      	cmp	r3, #32
 800726c:	d03c      	beq.n	80072e8 <LCD_String+0xb4>
        size = 24;
 800726e:	2318      	movs	r3, #24
 8007270:	71fb      	strb	r3, [r7, #7]

    while (*pFont != 0) {
 8007272:	e039      	b.n	80072e8 <LCD_String+0xb4>
        // 位置控制
        if (x > (xLCD.width - size))       // 如果这一行不够位置，就下一行
 8007274:	89fa      	ldrh	r2, [r7, #14]
 8007276:	4b22      	ldr	r3, [pc, #136]	; (8007300 <LCD_String+0xcc>)
 8007278:	885b      	ldrh	r3, [r3, #2]
 800727a:	4619      	mov	r1, r3
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	1acb      	subs	r3, r1, r3
 8007280:	429a      	cmp	r2, r3
 8007282:	dd06      	ble.n	8007292 <LCD_String+0x5e>
        {
            x = xStart;
 8007284:	8afb      	ldrh	r3, [r7, #22]
 8007286:	81fb      	strh	r3, [r7, #14]
            y = y + size;
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	b29a      	uxth	r2, r3
 800728c:	89bb      	ldrh	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	81bb      	strh	r3, [r7, #12]
        }
        if (y > (xLCD.height - size))    // 如果到了屏幕底部，就返回，不再输出
 8007292:	89ba      	ldrh	r2, [r7, #12]
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <LCD_String+0xcc>)
 8007296:	889b      	ldrh	r3, [r3, #4]
 8007298:	4619      	mov	r1, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	1acb      	subs	r3, r1, r3
 800729e:	429a      	cmp	r2, r3
 80072a0:	dc29      	bgt.n	80072f6 <LCD_String+0xc2>
            return;

        // 判断文字是ASCII还是汉字
        if (*pFont < 127)              // ASCII字符
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b7e      	cmp	r3, #126	; 0x7e
 80072a8:	d816      	bhi.n	80072d8 <LCD_String+0xa4>
        {
            drawAscii(x, y, *pFont, size, fColor, bColor);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	79fc      	ldrb	r4, [r7, #7]
 80072b0:	89b9      	ldrh	r1, [r7, #12]
 80072b2:	89f8      	ldrh	r0, [r7, #14]
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4623      	mov	r3, r4
 80072be:	f7ff feff 	bl	80070c0 <drawAscii>
            pFont++;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	3301      	adds	r3, #1
 80072c6:	60bb      	str	r3, [r7, #8]
            x += size / 2;
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	89fb      	ldrh	r3, [r7, #14]
 80072d2:	4413      	add	r3, r2
 80072d4:	81fb      	strh	r3, [r7, #14]
 80072d6:	e007      	b.n	80072e8 <LCD_String+0xb4>
        } else                          // 汉字显示
        {
            // 重要: 如果用的不是魔女开发板的字库, 就要修改或注释下面这一行, 这样就不影响ASCII英文字符的输出
            // drawGBK(x, y, (u8 *) pFont, size, fColor, bColor);
            pFont = pFont + 2;          // 下一个要显示的数据在内存中的位置
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3302      	adds	r3, #2
 80072dc:	60bb      	str	r3, [r7, #8]
            x = x + size;                 // 下一个要显示的数据在屏幕上的X位置
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	89fb      	ldrh	r3, [r7, #14]
 80072e4:	4413      	add	r3, r2
 80072e6:	81fb      	strh	r3, [r7, #14]
    while (*pFont != 0) {
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1c1      	bne.n	8007274 <LCD_String+0x40>
 80072f0:	e002      	b.n	80072f8 <LCD_String+0xc4>
        return;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <LCD_String+0xc4>
            return;
 80072f6:	bf00      	nop
        }
    }
}
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd90      	pop	{r4, r7, pc}
 80072fe:	bf00      	nop
 8007300:	20005740 	.word	0x20005740

08007304 <init>:

const float32_t PID_PARAM_KP = (float32_t) 10;
const float32_t PID_PARAM_KI = (float32_t) 1;
const float32_t PID_PARAM_KD = (float32_t) 1;

void init() {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af02      	add	r7, sp, #8
    pid.Kp = PID_PARAM_KP;
 800730a:	4a34      	ldr	r2, [pc, #208]	; (80073dc <init+0xd8>)
 800730c:	4b34      	ldr	r3, [pc, #208]	; (80073e0 <init+0xdc>)
 800730e:	619a      	str	r2, [r3, #24]
    pid.Ki = PID_PARAM_KI;
 8007310:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007314:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <init+0xdc>)
 8007316:	61da      	str	r2, [r3, #28]
    pid.Kd = PID_PARAM_KD;
 8007318:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800731c:	4b30      	ldr	r3, [pc, #192]	; (80073e0 <init+0xdc>)
 800731e:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&pid, 1);
 8007320:	2101      	movs	r1, #1
 8007322:	482f      	ldr	r0, [pc, #188]	; (80073e0 <init+0xdc>)
 8007324:	f7fa fe9d 	bl	8002062 <arm_pid_init_f32>

    HAL_Init();
 8007328:	f7fa feda 	bl	80020e0 <HAL_Init>
    SystemClock_Config();
 800732c:	f7fa f874 	bl	8001418 <SystemClock_Config>
    MX_GPIO_Init();
 8007330:	f7f9 ff78 	bl	8001224 <MX_GPIO_Init>

    while (HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin) == SET) {};
 8007334:	bf00      	nop
 8007336:	2101      	movs	r1, #1
 8007338:	482a      	ldr	r0, [pc, #168]	; (80073e4 <init+0xe0>)
 800733a:	f7fc fb4b 	bl	80039d4 <HAL_GPIO_ReadPin>
 800733e:	4603      	mov	r3, r0
 8007340:	2b01      	cmp	r3, #1
 8007342:	d0f8      	beq.n	8007336 <init+0x32>

    MX_USART1_UART_Init();
 8007344:	f7fa fd7c 	bl	8001e40 <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 8007348:	f7fa fda4 	bl	8001e94 <MX_USART3_UART_Init>
    HAL_UART_Receive_IT(&huart3, (uint8_t *) &tmp_data, 1);
 800734c:	2201      	movs	r2, #1
 800734e:	4926      	ldr	r1, [pc, #152]	; (80073e8 <init+0xe4>)
 8007350:	4826      	ldr	r0, [pc, #152]	; (80073ec <init+0xe8>)
 8007352:	f7fe fab3 	bl	80058bc <HAL_UART_Receive_IT>

    MX_SPI2_Init();
 8007356:	f7fa f8c1 	bl	80014dc <MX_SPI2_Init>
    HAL_SPI_MspInit(&hspi2);
 800735a:	4825      	ldr	r0, [pc, #148]	; (80073f0 <init+0xec>)
 800735c:	f7fa f8f4 	bl	8001548 <HAL_SPI_MspInit>
    __HAL_SPI_ENABLE(&hspi2);
 8007360:	4b23      	ldr	r3, [pc, #140]	; (80073f0 <init+0xec>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <init+0xec>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736e:	601a      	str	r2, [r3, #0]

    LCD_Init();
 8007370:	f7ff fc0e 	bl	8006b90 <LCD_Init>
    LCD_Display(true);
 8007374:	2001      	movs	r0, #1
 8007376:	f7ff fdc3 	bl	8006f00 <LCD_Display>
    LCD_Fill(0, 0, LCD_WIDTH, LCD_HEIGHT, GRAYBLUE);
 800737a:	f245 4358 	movw	r3, #21592	; 0x5458
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2380      	movs	r3, #128	; 0x80
 8007382:	22a0      	movs	r2, #160	; 0xa0
 8007384:	2100      	movs	r1, #0
 8007386:	2000      	movs	r0, #0
 8007388:	f7ff fe6a 	bl	8007060 <LCD_Fill>

    MX_DMA_Init();
 800738c:	f7f9 ff2c 	bl	80011e8 <MX_DMA_Init>
    MX_ADC1_Init();
 8007390:	f7f9 fe64 	bl	800105c <MX_ADC1_Init>
    HAL_ADC_MspInit(&hadc1);
 8007394:	4817      	ldr	r0, [pc, #92]	; (80073f4 <init+0xf0>)
 8007396:	f7f9 febd 	bl	8001114 <HAL_ADC_MspInit>
    HAL_ADCEx_Calibration_Start(&hadc1);
 800739a:	4816      	ldr	r0, [pc, #88]	; (80073f4 <init+0xf0>)
 800739c:	f7fb fb46 	bl	8002a2c <HAL_ADCEx_Calibration_Start>

    MX_TIM1_Init();
 80073a0:	f7fa fa96 	bl	80018d0 <MX_TIM1_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80073a4:	2100      	movs	r1, #0
 80073a6:	4814      	ldr	r0, [pc, #80]	; (80073f8 <init+0xf4>)
 80073a8:	f7fd fa96 	bl	80048d8 <HAL_TIM_PWM_Start>

    MX_TIM3_Init();
 80073ac:	f7fa fb14 	bl	80019d8 <MX_TIM3_Init>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80073b0:	210c      	movs	r1, #12
 80073b2:	4812      	ldr	r0, [pc, #72]	; (80073fc <init+0xf8>)
 80073b4:	f7fd fa90 	bl	80048d8 <HAL_TIM_PWM_Start>

    MX_TIM4_Init();
 80073b8:	f7fa fb7c 	bl	8001ab4 <MX_TIM4_Init>
    MX_TIM6_Init();
 80073bc:	f7fa fbc8 	bl	8001b50 <MX_TIM6_Init>
    MX_TIM7_Init();
 80073c0:	f7fa fbfc 	bl	8001bbc <MX_TIM7_Init>

    HAL_TIM_Base_Start_IT(&htim4);
 80073c4:	480e      	ldr	r0, [pc, #56]	; (8007400 <init+0xfc>)
 80073c6:	f7fd f9d7 	bl	8004778 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80073ca:	480e      	ldr	r0, [pc, #56]	; (8007404 <init+0x100>)
 80073cc:	f7fd f9d4 	bl	8004778 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80073d0:	480d      	ldr	r0, [pc, #52]	; (8007408 <init+0x104>)
 80073d2:	f7fd f9d1 	bl	8004778 <HAL_TIM_Base_Start_IT>
}
 80073d6:	bf00      	nop
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	41200000 	.word	0x41200000
 80073e0:	20000648 	.word	0x20000648
 80073e4:	40011000 	.word	0x40011000
 80073e8:	200006d8 	.word	0x200006d8
 80073ec:	20000514 	.word	0x20000514
 80073f0:	20000308 	.word	0x20000308
 80073f4:	20000294 	.word	0x20000294
 80073f8:	20000364 	.word	0x20000364
 80073fc:	200003ac 	.word	0x200003ac
 8007400:	200003f4 	.word	0x200003f4
 8007404:	2000043c 	.word	0x2000043c
 8007408:	20000484 	.word	0x20000484

0800740c <main>:

int main() {
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
    init();
 8007410:	f7ff ff78 	bl	8007304 <init>
    set_buzzer_level(100);
 8007414:	2064      	movs	r0, #100	; 0x64
 8007416:	f7ff fafb 	bl	8006a10 <set_buzzer_level>
    HAL_Delay(100);
 800741a:	2064      	movs	r0, #100	; 0x64
 800741c:	f7fa fec2 	bl	80021a4 <HAL_Delay>
    set_buzzer_level(0);
 8007420:	2000      	movs	r0, #0
 8007422:	f7ff faf5 	bl	8006a10 <set_buzzer_level>
    set_heat_level(5);
 8007426:	2005      	movs	r0, #5
 8007428:	f7ff fae4 	bl	80069f4 <set_heat_level>
    while (true) {
        display();
 800742c:	f7ff f800 	bl	8006430 <display>
        HAL_Delay(200);
 8007430:	20c8      	movs	r0, #200	; 0xc8
 8007432:	f7fa feb7 	bl	80021a4 <HAL_Delay>
        display();
 8007436:	e7f9      	b.n	800742c <main+0x20>

08007438 <__assert_func>:
 8007438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800743a:	4614      	mov	r4, r2
 800743c:	461a      	mov	r2, r3
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <__assert_func+0x2c>)
 8007440:	4605      	mov	r5, r0
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68d8      	ldr	r0, [r3, #12]
 8007446:	b14c      	cbz	r4, 800745c <__assert_func+0x24>
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <__assert_func+0x30>)
 800744a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800744e:	9100      	str	r1, [sp, #0]
 8007450:	462b      	mov	r3, r5
 8007452:	4906      	ldr	r1, [pc, #24]	; (800746c <__assert_func+0x34>)
 8007454:	f000 f818 	bl	8007488 <fiprintf>
 8007458:	f000 fd94 	bl	8007f84 <abort>
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <__assert_func+0x38>)
 800745e:	461c      	mov	r4, r3
 8007460:	e7f3      	b.n	800744a <__assert_func+0x12>
 8007462:	bf00      	nop
 8007464:	20000214 	.word	0x20000214
 8007468:	0800b9e0 	.word	0x0800b9e0
 800746c:	0800b9ed 	.word	0x0800b9ed
 8007470:	0800ba1b 	.word	0x0800ba1b

08007474 <atoi>:
 8007474:	220a      	movs	r2, #10
 8007476:	2100      	movs	r1, #0
 8007478:	f000 bcba 	b.w	8007df0 <strtol>

0800747c <__errno>:
 800747c:	4b01      	ldr	r3, [pc, #4]	; (8007484 <__errno+0x8>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000214 	.word	0x20000214

08007488 <fiprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b503      	push	{r0, r1, lr}
 800748c:	4601      	mov	r1, r0
 800748e:	ab03      	add	r3, sp, #12
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <fiprintf+0x20>)
 8007492:	f853 2b04 	ldr.w	r2, [r3], #4
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	f000 f937 	bl	800770c <_vfiprintf_r>
 800749e:	b002      	add	sp, #8
 80074a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a4:	b003      	add	sp, #12
 80074a6:	4770      	bx	lr
 80074a8:	20000214 	.word	0x20000214

080074ac <__libc_init_array>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	2600      	movs	r6, #0
 80074b0:	4d0c      	ldr	r5, [pc, #48]	; (80074e4 <__libc_init_array+0x38>)
 80074b2:	4c0d      	ldr	r4, [pc, #52]	; (80074e8 <__libc_init_array+0x3c>)
 80074b4:	1b64      	subs	r4, r4, r5
 80074b6:	10a4      	asrs	r4, r4, #2
 80074b8:	42a6      	cmp	r6, r4
 80074ba:	d109      	bne.n	80074d0 <__libc_init_array+0x24>
 80074bc:	f001 fa4a 	bl	8008954 <_init>
 80074c0:	2600      	movs	r6, #0
 80074c2:	4d0a      	ldr	r5, [pc, #40]	; (80074ec <__libc_init_array+0x40>)
 80074c4:	4c0a      	ldr	r4, [pc, #40]	; (80074f0 <__libc_init_array+0x44>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	d105      	bne.n	80074da <__libc_init_array+0x2e>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d4:	4798      	blx	r3
 80074d6:	3601      	adds	r6, #1
 80074d8:	e7ee      	b.n	80074b8 <__libc_init_array+0xc>
 80074da:	f855 3b04 	ldr.w	r3, [r5], #4
 80074de:	4798      	blx	r3
 80074e0:	3601      	adds	r6, #1
 80074e2:	e7f2      	b.n	80074ca <__libc_init_array+0x1e>
 80074e4:	0800bbb4 	.word	0x0800bbb4
 80074e8:	0800bbb4 	.word	0x0800bbb4
 80074ec:	0800bbb4 	.word	0x0800bbb4
 80074f0:	0800bbb8 	.word	0x0800bbb8

080074f4 <memset>:
 80074f4:	4603      	mov	r3, r0
 80074f6:	4402      	add	r2, r0
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d100      	bne.n	80074fe <memset+0xa>
 80074fc:	4770      	bx	lr
 80074fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007502:	e7f9      	b.n	80074f8 <memset+0x4>

08007504 <_free_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4605      	mov	r5, r0
 8007508:	2900      	cmp	r1, #0
 800750a:	d040      	beq.n	800758e <_free_r+0x8a>
 800750c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007510:	1f0c      	subs	r4, r1, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfb8      	it	lt
 8007516:	18e4      	addlt	r4, r4, r3
 8007518:	f000 ff8e 	bl	8008438 <__malloc_lock>
 800751c:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <_free_r+0x8c>)
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	b933      	cbnz	r3, 8007530 <_free_r+0x2c>
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	6014      	str	r4, [r2, #0]
 8007526:	4628      	mov	r0, r5
 8007528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800752c:	f000 bf8a 	b.w	8008444 <__malloc_unlock>
 8007530:	42a3      	cmp	r3, r4
 8007532:	d908      	bls.n	8007546 <_free_r+0x42>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	bf01      	itttt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	1809      	addeq	r1, r1, r0
 8007542:	6021      	streq	r1, [r4, #0]
 8007544:	e7ed      	b.n	8007522 <_free_r+0x1e>
 8007546:	461a      	mov	r2, r3
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b10b      	cbz	r3, 8007550 <_free_r+0x4c>
 800754c:	42a3      	cmp	r3, r4
 800754e:	d9fa      	bls.n	8007546 <_free_r+0x42>
 8007550:	6811      	ldr	r1, [r2, #0]
 8007552:	1850      	adds	r0, r2, r1
 8007554:	42a0      	cmp	r0, r4
 8007556:	d10b      	bne.n	8007570 <_free_r+0x6c>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	4401      	add	r1, r0
 800755c:	1850      	adds	r0, r2, r1
 800755e:	4283      	cmp	r3, r0
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	d1e0      	bne.n	8007526 <_free_r+0x22>
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4401      	add	r1, r0
 800756a:	6011      	str	r1, [r2, #0]
 800756c:	6053      	str	r3, [r2, #4]
 800756e:	e7da      	b.n	8007526 <_free_r+0x22>
 8007570:	d902      	bls.n	8007578 <_free_r+0x74>
 8007572:	230c      	movs	r3, #12
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	e7d6      	b.n	8007526 <_free_r+0x22>
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	1821      	adds	r1, r4, r0
 800757c:	428b      	cmp	r3, r1
 800757e:	bf01      	itttt	eq
 8007580:	6819      	ldreq	r1, [r3, #0]
 8007582:	685b      	ldreq	r3, [r3, #4]
 8007584:	1809      	addeq	r1, r1, r0
 8007586:	6021      	streq	r1, [r4, #0]
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6054      	str	r4, [r2, #4]
 800758c:	e7cb      	b.n	8007526 <_free_r+0x22>
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	2000574c 	.word	0x2000574c

08007594 <sbrk_aligned>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4e0e      	ldr	r6, [pc, #56]	; (80075d0 <sbrk_aligned+0x3c>)
 8007598:	460c      	mov	r4, r1
 800759a:	6831      	ldr	r1, [r6, #0]
 800759c:	4605      	mov	r5, r0
 800759e:	b911      	cbnz	r1, 80075a6 <sbrk_aligned+0x12>
 80075a0:	f000 fb7a 	bl	8007c98 <_sbrk_r>
 80075a4:	6030      	str	r0, [r6, #0]
 80075a6:	4621      	mov	r1, r4
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 fb75 	bl	8007c98 <_sbrk_r>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d00a      	beq.n	80075c8 <sbrk_aligned+0x34>
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d007      	beq.n	80075cc <sbrk_aligned+0x38>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 fb6a 	bl	8007c98 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d101      	bne.n	80075cc <sbrk_aligned+0x38>
 80075c8:	f04f 34ff 	mov.w	r4, #4294967295
 80075cc:	4620      	mov	r0, r4
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	20005750 	.word	0x20005750

080075d4 <_malloc_r>:
 80075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d8:	1ccd      	adds	r5, r1, #3
 80075da:	f025 0503 	bic.w	r5, r5, #3
 80075de:	3508      	adds	r5, #8
 80075e0:	2d0c      	cmp	r5, #12
 80075e2:	bf38      	it	cc
 80075e4:	250c      	movcc	r5, #12
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	4607      	mov	r7, r0
 80075ea:	db01      	blt.n	80075f0 <_malloc_r+0x1c>
 80075ec:	42a9      	cmp	r1, r5
 80075ee:	d905      	bls.n	80075fc <_malloc_r+0x28>
 80075f0:	230c      	movs	r3, #12
 80075f2:	2600      	movs	r6, #0
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	4630      	mov	r0, r6
 80075f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fc:	4e2e      	ldr	r6, [pc, #184]	; (80076b8 <_malloc_r+0xe4>)
 80075fe:	f000 ff1b 	bl	8008438 <__malloc_lock>
 8007602:	6833      	ldr	r3, [r6, #0]
 8007604:	461c      	mov	r4, r3
 8007606:	bb34      	cbnz	r4, 8007656 <_malloc_r+0x82>
 8007608:	4629      	mov	r1, r5
 800760a:	4638      	mov	r0, r7
 800760c:	f7ff ffc2 	bl	8007594 <sbrk_aligned>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	4604      	mov	r4, r0
 8007614:	d14d      	bne.n	80076b2 <_malloc_r+0xde>
 8007616:	6834      	ldr	r4, [r6, #0]
 8007618:	4626      	mov	r6, r4
 800761a:	2e00      	cmp	r6, #0
 800761c:	d140      	bne.n	80076a0 <_malloc_r+0xcc>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	4631      	mov	r1, r6
 8007622:	4638      	mov	r0, r7
 8007624:	eb04 0803 	add.w	r8, r4, r3
 8007628:	f000 fb36 	bl	8007c98 <_sbrk_r>
 800762c:	4580      	cmp	r8, r0
 800762e:	d13a      	bne.n	80076a6 <_malloc_r+0xd2>
 8007630:	6821      	ldr	r1, [r4, #0]
 8007632:	3503      	adds	r5, #3
 8007634:	1a6d      	subs	r5, r5, r1
 8007636:	f025 0503 	bic.w	r5, r5, #3
 800763a:	3508      	adds	r5, #8
 800763c:	2d0c      	cmp	r5, #12
 800763e:	bf38      	it	cc
 8007640:	250c      	movcc	r5, #12
 8007642:	4638      	mov	r0, r7
 8007644:	4629      	mov	r1, r5
 8007646:	f7ff ffa5 	bl	8007594 <sbrk_aligned>
 800764a:	3001      	adds	r0, #1
 800764c:	d02b      	beq.n	80076a6 <_malloc_r+0xd2>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	442b      	add	r3, r5
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	e00e      	b.n	8007674 <_malloc_r+0xa0>
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	1b52      	subs	r2, r2, r5
 800765a:	d41e      	bmi.n	800769a <_malloc_r+0xc6>
 800765c:	2a0b      	cmp	r2, #11
 800765e:	d916      	bls.n	800768e <_malloc_r+0xba>
 8007660:	1961      	adds	r1, r4, r5
 8007662:	42a3      	cmp	r3, r4
 8007664:	6025      	str	r5, [r4, #0]
 8007666:	bf18      	it	ne
 8007668:	6059      	strne	r1, [r3, #4]
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	bf08      	it	eq
 800766e:	6031      	streq	r1, [r6, #0]
 8007670:	5162      	str	r2, [r4, r5]
 8007672:	604b      	str	r3, [r1, #4]
 8007674:	4638      	mov	r0, r7
 8007676:	f104 060b 	add.w	r6, r4, #11
 800767a:	f000 fee3 	bl	8008444 <__malloc_unlock>
 800767e:	f026 0607 	bic.w	r6, r6, #7
 8007682:	1d23      	adds	r3, r4, #4
 8007684:	1af2      	subs	r2, r6, r3
 8007686:	d0b6      	beq.n	80075f6 <_malloc_r+0x22>
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	50a3      	str	r3, [r4, r2]
 800768c:	e7b3      	b.n	80075f6 <_malloc_r+0x22>
 800768e:	6862      	ldr	r2, [r4, #4]
 8007690:	42a3      	cmp	r3, r4
 8007692:	bf0c      	ite	eq
 8007694:	6032      	streq	r2, [r6, #0]
 8007696:	605a      	strne	r2, [r3, #4]
 8007698:	e7ec      	b.n	8007674 <_malloc_r+0xa0>
 800769a:	4623      	mov	r3, r4
 800769c:	6864      	ldr	r4, [r4, #4]
 800769e:	e7b2      	b.n	8007606 <_malloc_r+0x32>
 80076a0:	4634      	mov	r4, r6
 80076a2:	6876      	ldr	r6, [r6, #4]
 80076a4:	e7b9      	b.n	800761a <_malloc_r+0x46>
 80076a6:	230c      	movs	r3, #12
 80076a8:	4638      	mov	r0, r7
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	f000 feca 	bl	8008444 <__malloc_unlock>
 80076b0:	e7a1      	b.n	80075f6 <_malloc_r+0x22>
 80076b2:	6025      	str	r5, [r4, #0]
 80076b4:	e7de      	b.n	8007674 <_malloc_r+0xa0>
 80076b6:	bf00      	nop
 80076b8:	2000574c 	.word	0x2000574c

080076bc <__sfputc_r>:
 80076bc:	6893      	ldr	r3, [r2, #8]
 80076be:	b410      	push	{r4}
 80076c0:	3b01      	subs	r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	6093      	str	r3, [r2, #8]
 80076c6:	da07      	bge.n	80076d8 <__sfputc_r+0x1c>
 80076c8:	6994      	ldr	r4, [r2, #24]
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	db01      	blt.n	80076d2 <__sfputc_r+0x16>
 80076ce:	290a      	cmp	r1, #10
 80076d0:	d102      	bne.n	80076d8 <__sfputc_r+0x1c>
 80076d2:	bc10      	pop	{r4}
 80076d4:	f000 bb96 	b.w	8007e04 <__swbuf_r>
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	1c58      	adds	r0, r3, #1
 80076dc:	6010      	str	r0, [r2, #0]
 80076de:	7019      	strb	r1, [r3, #0]
 80076e0:	4608      	mov	r0, r1
 80076e2:	bc10      	pop	{r4}
 80076e4:	4770      	bx	lr

080076e6 <__sfputs_r>:
 80076e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e8:	4606      	mov	r6, r0
 80076ea:	460f      	mov	r7, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	18d5      	adds	r5, r2, r3
 80076f0:	42ac      	cmp	r4, r5
 80076f2:	d101      	bne.n	80076f8 <__sfputs_r+0x12>
 80076f4:	2000      	movs	r0, #0
 80076f6:	e007      	b.n	8007708 <__sfputs_r+0x22>
 80076f8:	463a      	mov	r2, r7
 80076fa:	4630      	mov	r0, r6
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	f7ff ffdc 	bl	80076bc <__sfputc_r>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d1f3      	bne.n	80076f0 <__sfputs_r+0xa>
 8007708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800770c <_vfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460d      	mov	r5, r1
 8007712:	4614      	mov	r4, r2
 8007714:	4698      	mov	r8, r3
 8007716:	4606      	mov	r6, r0
 8007718:	b09d      	sub	sp, #116	; 0x74
 800771a:	b118      	cbz	r0, 8007724 <_vfiprintf_r+0x18>
 800771c:	6983      	ldr	r3, [r0, #24]
 800771e:	b90b      	cbnz	r3, 8007724 <_vfiprintf_r+0x18>
 8007720:	f000 fd4e 	bl	80081c0 <__sinit>
 8007724:	4b89      	ldr	r3, [pc, #548]	; (800794c <_vfiprintf_r+0x240>)
 8007726:	429d      	cmp	r5, r3
 8007728:	d11b      	bne.n	8007762 <_vfiprintf_r+0x56>
 800772a:	6875      	ldr	r5, [r6, #4]
 800772c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	d405      	bmi.n	800773e <_vfiprintf_r+0x32>
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	059a      	lsls	r2, r3, #22
 8007736:	d402      	bmi.n	800773e <_vfiprintf_r+0x32>
 8007738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773a:	f000 fddf 	bl	80082fc <__retarget_lock_acquire_recursive>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	071b      	lsls	r3, r3, #28
 8007742:	d501      	bpl.n	8007748 <_vfiprintf_r+0x3c>
 8007744:	692b      	ldr	r3, [r5, #16]
 8007746:	b9eb      	cbnz	r3, 8007784 <_vfiprintf_r+0x78>
 8007748:	4629      	mov	r1, r5
 800774a:	4630      	mov	r0, r6
 800774c:	f000 fbac 	bl	8007ea8 <__swsetup_r>
 8007750:	b1c0      	cbz	r0, 8007784 <_vfiprintf_r+0x78>
 8007752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007754:	07dc      	lsls	r4, r3, #31
 8007756:	d50e      	bpl.n	8007776 <_vfiprintf_r+0x6a>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	b01d      	add	sp, #116	; 0x74
 800775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <_vfiprintf_r+0x244>)
 8007764:	429d      	cmp	r5, r3
 8007766:	d101      	bne.n	800776c <_vfiprintf_r+0x60>
 8007768:	68b5      	ldr	r5, [r6, #8]
 800776a:	e7df      	b.n	800772c <_vfiprintf_r+0x20>
 800776c:	4b79      	ldr	r3, [pc, #484]	; (8007954 <_vfiprintf_r+0x248>)
 800776e:	429d      	cmp	r5, r3
 8007770:	bf08      	it	eq
 8007772:	68f5      	ldreq	r5, [r6, #12]
 8007774:	e7da      	b.n	800772c <_vfiprintf_r+0x20>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	0598      	lsls	r0, r3, #22
 800777a:	d4ed      	bmi.n	8007758 <_vfiprintf_r+0x4c>
 800777c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777e:	f000 fdbe 	bl	80082fe <__retarget_lock_release_recursive>
 8007782:	e7e9      	b.n	8007758 <_vfiprintf_r+0x4c>
 8007784:	2300      	movs	r3, #0
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	2320      	movs	r3, #32
 800778a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800778e:	2330      	movs	r3, #48	; 0x30
 8007790:	f04f 0901 	mov.w	r9, #1
 8007794:	f8cd 800c 	str.w	r8, [sp, #12]
 8007798:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007958 <_vfiprintf_r+0x24c>
 800779c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077a0:	4623      	mov	r3, r4
 80077a2:	469a      	mov	sl, r3
 80077a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a8:	b10a      	cbz	r2, 80077ae <_vfiprintf_r+0xa2>
 80077aa:	2a25      	cmp	r2, #37	; 0x25
 80077ac:	d1f9      	bne.n	80077a2 <_vfiprintf_r+0x96>
 80077ae:	ebba 0b04 	subs.w	fp, sl, r4
 80077b2:	d00b      	beq.n	80077cc <_vfiprintf_r+0xc0>
 80077b4:	465b      	mov	r3, fp
 80077b6:	4622      	mov	r2, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7ff ff93 	bl	80076e6 <__sfputs_r>
 80077c0:	3001      	adds	r0, #1
 80077c2:	f000 80aa 	beq.w	800791a <_vfiprintf_r+0x20e>
 80077c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c8:	445a      	add	r2, fp
 80077ca:	9209      	str	r2, [sp, #36]	; 0x24
 80077cc:	f89a 3000 	ldrb.w	r3, [sl]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80a2 	beq.w	800791a <_vfiprintf_r+0x20e>
 80077d6:	2300      	movs	r3, #0
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e0:	f10a 0a01 	add.w	sl, sl, #1
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ec:	931a      	str	r3, [sp, #104]	; 0x68
 80077ee:	4654      	mov	r4, sl
 80077f0:	2205      	movs	r2, #5
 80077f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f6:	4858      	ldr	r0, [pc, #352]	; (8007958 <_vfiprintf_r+0x24c>)
 80077f8:	f000 fde8 	bl	80083cc <memchr>
 80077fc:	9a04      	ldr	r2, [sp, #16]
 80077fe:	b9d8      	cbnz	r0, 8007838 <_vfiprintf_r+0x12c>
 8007800:	06d1      	lsls	r1, r2, #27
 8007802:	bf44      	itt	mi
 8007804:	2320      	movmi	r3, #32
 8007806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780a:	0713      	lsls	r3, r2, #28
 800780c:	bf44      	itt	mi
 800780e:	232b      	movmi	r3, #43	; 0x2b
 8007810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007814:	f89a 3000 	ldrb.w	r3, [sl]
 8007818:	2b2a      	cmp	r3, #42	; 0x2a
 800781a:	d015      	beq.n	8007848 <_vfiprintf_r+0x13c>
 800781c:	4654      	mov	r4, sl
 800781e:	2000      	movs	r0, #0
 8007820:	f04f 0c0a 	mov.w	ip, #10
 8007824:	9a07      	ldr	r2, [sp, #28]
 8007826:	4621      	mov	r1, r4
 8007828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800782c:	3b30      	subs	r3, #48	; 0x30
 800782e:	2b09      	cmp	r3, #9
 8007830:	d94e      	bls.n	80078d0 <_vfiprintf_r+0x1c4>
 8007832:	b1b0      	cbz	r0, 8007862 <_vfiprintf_r+0x156>
 8007834:	9207      	str	r2, [sp, #28]
 8007836:	e014      	b.n	8007862 <_vfiprintf_r+0x156>
 8007838:	eba0 0308 	sub.w	r3, r0, r8
 800783c:	fa09 f303 	lsl.w	r3, r9, r3
 8007840:	4313      	orrs	r3, r2
 8007842:	46a2      	mov	sl, r4
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	e7d2      	b.n	80077ee <_vfiprintf_r+0xe2>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	1d19      	adds	r1, r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	9103      	str	r1, [sp, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbb      	ittet	lt
 8007854:	425b      	neglt	r3, r3
 8007856:	f042 0202 	orrlt.w	r2, r2, #2
 800785a:	9307      	strge	r3, [sp, #28]
 800785c:	9307      	strlt	r3, [sp, #28]
 800785e:	bfb8      	it	lt
 8007860:	9204      	strlt	r2, [sp, #16]
 8007862:	7823      	ldrb	r3, [r4, #0]
 8007864:	2b2e      	cmp	r3, #46	; 0x2e
 8007866:	d10c      	bne.n	8007882 <_vfiprintf_r+0x176>
 8007868:	7863      	ldrb	r3, [r4, #1]
 800786a:	2b2a      	cmp	r3, #42	; 0x2a
 800786c:	d135      	bne.n	80078da <_vfiprintf_r+0x1ce>
 800786e:	9b03      	ldr	r3, [sp, #12]
 8007870:	3402      	adds	r4, #2
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	9203      	str	r2, [sp, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	bfb8      	it	lt
 800787c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800795c <_vfiprintf_r+0x250>
 8007886:	2203      	movs	r2, #3
 8007888:	4650      	mov	r0, sl
 800788a:	7821      	ldrb	r1, [r4, #0]
 800788c:	f000 fd9e 	bl	80083cc <memchr>
 8007890:	b140      	cbz	r0, 80078a4 <_vfiprintf_r+0x198>
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	eba0 000a 	sub.w	r0, r0, sl
 8007898:	fa03 f000 	lsl.w	r0, r3, r0
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	3401      	adds	r4, #1
 80078a0:	4303      	orrs	r3, r0
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	2206      	movs	r2, #6
 80078aa:	482d      	ldr	r0, [pc, #180]	; (8007960 <_vfiprintf_r+0x254>)
 80078ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b0:	f000 fd8c 	bl	80083cc <memchr>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d03f      	beq.n	8007938 <_vfiprintf_r+0x22c>
 80078b8:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <_vfiprintf_r+0x258>)
 80078ba:	bb1b      	cbnz	r3, 8007904 <_vfiprintf_r+0x1f8>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	3307      	adds	r3, #7
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	3308      	adds	r3, #8
 80078c6:	9303      	str	r3, [sp, #12]
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	443b      	add	r3, r7
 80078cc:	9309      	str	r3, [sp, #36]	; 0x24
 80078ce:	e767      	b.n	80077a0 <_vfiprintf_r+0x94>
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d8:	e7a5      	b.n	8007826 <_vfiprintf_r+0x11a>
 80078da:	2300      	movs	r3, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4619      	mov	r1, r3
 80078e2:	3401      	adds	r4, #1
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	4620      	mov	r0, r4
 80078e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ec:	3a30      	subs	r2, #48	; 0x30
 80078ee:	2a09      	cmp	r2, #9
 80078f0:	d903      	bls.n	80078fa <_vfiprintf_r+0x1ee>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0c5      	beq.n	8007882 <_vfiprintf_r+0x176>
 80078f6:	9105      	str	r1, [sp, #20]
 80078f8:	e7c3      	b.n	8007882 <_vfiprintf_r+0x176>
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007902:	e7f0      	b.n	80078e6 <_vfiprintf_r+0x1da>
 8007904:	ab03      	add	r3, sp, #12
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	462a      	mov	r2, r5
 800790a:	4630      	mov	r0, r6
 800790c:	4b16      	ldr	r3, [pc, #88]	; (8007968 <_vfiprintf_r+0x25c>)
 800790e:	a904      	add	r1, sp, #16
 8007910:	f3af 8000 	nop.w
 8007914:	4607      	mov	r7, r0
 8007916:	1c78      	adds	r0, r7, #1
 8007918:	d1d6      	bne.n	80078c8 <_vfiprintf_r+0x1bc>
 800791a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800791c:	07d9      	lsls	r1, r3, #31
 800791e:	d405      	bmi.n	800792c <_vfiprintf_r+0x220>
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	059a      	lsls	r2, r3, #22
 8007924:	d402      	bmi.n	800792c <_vfiprintf_r+0x220>
 8007926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007928:	f000 fce9 	bl	80082fe <__retarget_lock_release_recursive>
 800792c:	89ab      	ldrh	r3, [r5, #12]
 800792e:	065b      	lsls	r3, r3, #25
 8007930:	f53f af12 	bmi.w	8007758 <_vfiprintf_r+0x4c>
 8007934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007936:	e711      	b.n	800775c <_vfiprintf_r+0x50>
 8007938:	ab03      	add	r3, sp, #12
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	462a      	mov	r2, r5
 800793e:	4630      	mov	r0, r6
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <_vfiprintf_r+0x25c>)
 8007942:	a904      	add	r1, sp, #16
 8007944:	f000 f882 	bl	8007a4c <_printf_i>
 8007948:	e7e4      	b.n	8007914 <_vfiprintf_r+0x208>
 800794a:	bf00      	nop
 800794c:	0800bb74 	.word	0x0800bb74
 8007950:	0800bb94 	.word	0x0800bb94
 8007954:	0800bb54 	.word	0x0800bb54
 8007958:	0800ba20 	.word	0x0800ba20
 800795c:	0800ba26 	.word	0x0800ba26
 8007960:	0800ba2a 	.word	0x0800ba2a
 8007964:	00000000 	.word	0x00000000
 8007968:	080076e7 	.word	0x080076e7

0800796c <_printf_common>:
 800796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007970:	4616      	mov	r6, r2
 8007972:	4699      	mov	r9, r3
 8007974:	688a      	ldr	r2, [r1, #8]
 8007976:	690b      	ldr	r3, [r1, #16]
 8007978:	4607      	mov	r7, r0
 800797a:	4293      	cmp	r3, r2
 800797c:	bfb8      	it	lt
 800797e:	4613      	movlt	r3, r2
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007986:	460c      	mov	r4, r1
 8007988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800798c:	b10a      	cbz	r2, 8007992 <_printf_common+0x26>
 800798e:	3301      	adds	r3, #1
 8007990:	6033      	str	r3, [r6, #0]
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	0699      	lsls	r1, r3, #26
 8007996:	bf42      	ittt	mi
 8007998:	6833      	ldrmi	r3, [r6, #0]
 800799a:	3302      	addmi	r3, #2
 800799c:	6033      	strmi	r3, [r6, #0]
 800799e:	6825      	ldr	r5, [r4, #0]
 80079a0:	f015 0506 	ands.w	r5, r5, #6
 80079a4:	d106      	bne.n	80079b4 <_printf_common+0x48>
 80079a6:	f104 0a19 	add.w	sl, r4, #25
 80079aa:	68e3      	ldr	r3, [r4, #12]
 80079ac:	6832      	ldr	r2, [r6, #0]
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	42ab      	cmp	r3, r5
 80079b2:	dc28      	bgt.n	8007a06 <_printf_common+0x9a>
 80079b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b8:	1e13      	subs	r3, r2, #0
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	bf18      	it	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	0692      	lsls	r2, r2, #26
 80079c2:	d42d      	bmi.n	8007a20 <_printf_common+0xb4>
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d020      	beq.n	8007a14 <_printf_common+0xa8>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	68e5      	ldr	r5, [r4, #12]
 80079d6:	f003 0306 	and.w	r3, r3, #6
 80079da:	2b04      	cmp	r3, #4
 80079dc:	bf18      	it	ne
 80079de:	2500      	movne	r5, #0
 80079e0:	6832      	ldr	r2, [r6, #0]
 80079e2:	f04f 0600 	mov.w	r6, #0
 80079e6:	68a3      	ldr	r3, [r4, #8]
 80079e8:	bf08      	it	eq
 80079ea:	1aad      	subeq	r5, r5, r2
 80079ec:	6922      	ldr	r2, [r4, #16]
 80079ee:	bf08      	it	eq
 80079f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bfc4      	itt	gt
 80079f8:	1a9b      	subgt	r3, r3, r2
 80079fa:	18ed      	addgt	r5, r5, r3
 80079fc:	341a      	adds	r4, #26
 80079fe:	42b5      	cmp	r5, r6
 8007a00:	d11a      	bne.n	8007a38 <_printf_common+0xcc>
 8007a02:	2000      	movs	r0, #0
 8007a04:	e008      	b.n	8007a18 <_printf_common+0xac>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4652      	mov	r2, sl
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	47c0      	blx	r8
 8007a10:	3001      	adds	r0, #1
 8007a12:	d103      	bne.n	8007a1c <_printf_common+0xb0>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	e7c4      	b.n	80079aa <_printf_common+0x3e>
 8007a20:	2030      	movs	r0, #48	; 0x30
 8007a22:	18e1      	adds	r1, r4, r3
 8007a24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a2e:	4422      	add	r2, r4
 8007a30:	3302      	adds	r3, #2
 8007a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a36:	e7c5      	b.n	80079c4 <_printf_common+0x58>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4638      	mov	r0, r7
 8007a40:	47c0      	blx	r8
 8007a42:	3001      	adds	r0, #1
 8007a44:	d0e6      	beq.n	8007a14 <_printf_common+0xa8>
 8007a46:	3601      	adds	r6, #1
 8007a48:	e7d9      	b.n	80079fe <_printf_common+0x92>
	...

08007a4c <_printf_i>:
 8007a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	7e0f      	ldrb	r7, [r1, #24]
 8007a52:	4691      	mov	r9, r2
 8007a54:	2f78      	cmp	r7, #120	; 0x78
 8007a56:	4680      	mov	r8, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	469a      	mov	sl, r3
 8007a5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a62:	d807      	bhi.n	8007a74 <_printf_i+0x28>
 8007a64:	2f62      	cmp	r7, #98	; 0x62
 8007a66:	d80a      	bhi.n	8007a7e <_printf_i+0x32>
 8007a68:	2f00      	cmp	r7, #0
 8007a6a:	f000 80d9 	beq.w	8007c20 <_printf_i+0x1d4>
 8007a6e:	2f58      	cmp	r7, #88	; 0x58
 8007a70:	f000 80a4 	beq.w	8007bbc <_printf_i+0x170>
 8007a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a7c:	e03a      	b.n	8007af4 <_printf_i+0xa8>
 8007a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a82:	2b15      	cmp	r3, #21
 8007a84:	d8f6      	bhi.n	8007a74 <_printf_i+0x28>
 8007a86:	a101      	add	r1, pc, #4	; (adr r1, 8007a8c <_printf_i+0x40>)
 8007a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a8c:	08007ae5 	.word	0x08007ae5
 8007a90:	08007af9 	.word	0x08007af9
 8007a94:	08007a75 	.word	0x08007a75
 8007a98:	08007a75 	.word	0x08007a75
 8007a9c:	08007a75 	.word	0x08007a75
 8007aa0:	08007a75 	.word	0x08007a75
 8007aa4:	08007af9 	.word	0x08007af9
 8007aa8:	08007a75 	.word	0x08007a75
 8007aac:	08007a75 	.word	0x08007a75
 8007ab0:	08007a75 	.word	0x08007a75
 8007ab4:	08007a75 	.word	0x08007a75
 8007ab8:	08007c07 	.word	0x08007c07
 8007abc:	08007b29 	.word	0x08007b29
 8007ac0:	08007be9 	.word	0x08007be9
 8007ac4:	08007a75 	.word	0x08007a75
 8007ac8:	08007a75 	.word	0x08007a75
 8007acc:	08007c29 	.word	0x08007c29
 8007ad0:	08007a75 	.word	0x08007a75
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007a75 	.word	0x08007a75
 8007adc:	08007a75 	.word	0x08007a75
 8007ae0:	08007bf1 	.word	0x08007bf1
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	1d1a      	adds	r2, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	602a      	str	r2, [r5, #0]
 8007aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0a4      	b.n	8007c42 <_printf_i+0x1f6>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	6829      	ldr	r1, [r5, #0]
 8007afc:	0606      	lsls	r6, r0, #24
 8007afe:	f101 0304 	add.w	r3, r1, #4
 8007b02:	d50a      	bpl.n	8007b1a <_printf_i+0xce>
 8007b04:	680e      	ldr	r6, [r1, #0]
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	2e00      	cmp	r6, #0
 8007b0a:	da03      	bge.n	8007b14 <_printf_i+0xc8>
 8007b0c:	232d      	movs	r3, #45	; 0x2d
 8007b0e:	4276      	negs	r6, r6
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	230a      	movs	r3, #10
 8007b16:	485e      	ldr	r0, [pc, #376]	; (8007c90 <_printf_i+0x244>)
 8007b18:	e019      	b.n	8007b4e <_printf_i+0x102>
 8007b1a:	680e      	ldr	r6, [r1, #0]
 8007b1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b20:	602b      	str	r3, [r5, #0]
 8007b22:	bf18      	it	ne
 8007b24:	b236      	sxthne	r6, r6
 8007b26:	e7ef      	b.n	8007b08 <_printf_i+0xbc>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	1d19      	adds	r1, r3, #4
 8007b2e:	6029      	str	r1, [r5, #0]
 8007b30:	0601      	lsls	r1, r0, #24
 8007b32:	d501      	bpl.n	8007b38 <_printf_i+0xec>
 8007b34:	681e      	ldr	r6, [r3, #0]
 8007b36:	e002      	b.n	8007b3e <_printf_i+0xf2>
 8007b38:	0646      	lsls	r6, r0, #25
 8007b3a:	d5fb      	bpl.n	8007b34 <_printf_i+0xe8>
 8007b3c:	881e      	ldrh	r6, [r3, #0]
 8007b3e:	2f6f      	cmp	r7, #111	; 0x6f
 8007b40:	bf0c      	ite	eq
 8007b42:	2308      	moveq	r3, #8
 8007b44:	230a      	movne	r3, #10
 8007b46:	4852      	ldr	r0, [pc, #328]	; (8007c90 <_printf_i+0x244>)
 8007b48:	2100      	movs	r1, #0
 8007b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b4e:	6865      	ldr	r5, [r4, #4]
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	bfa8      	it	ge
 8007b54:	6821      	ldrge	r1, [r4, #0]
 8007b56:	60a5      	str	r5, [r4, #8]
 8007b58:	bfa4      	itt	ge
 8007b5a:	f021 0104 	bicge.w	r1, r1, #4
 8007b5e:	6021      	strge	r1, [r4, #0]
 8007b60:	b90e      	cbnz	r6, 8007b66 <_printf_i+0x11a>
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	d04d      	beq.n	8007c02 <_printf_i+0x1b6>
 8007b66:	4615      	mov	r5, r2
 8007b68:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b6c:	fb03 6711 	mls	r7, r3, r1, r6
 8007b70:	5dc7      	ldrb	r7, [r0, r7]
 8007b72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b76:	4637      	mov	r7, r6
 8007b78:	42bb      	cmp	r3, r7
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	d9f4      	bls.n	8007b68 <_printf_i+0x11c>
 8007b7e:	2b08      	cmp	r3, #8
 8007b80:	d10b      	bne.n	8007b9a <_printf_i+0x14e>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	07de      	lsls	r6, r3, #31
 8007b86:	d508      	bpl.n	8007b9a <_printf_i+0x14e>
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	6861      	ldr	r1, [r4, #4]
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	bfde      	ittt	le
 8007b90:	2330      	movle	r3, #48	; 0x30
 8007b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b9a:	1b52      	subs	r2, r2, r5
 8007b9c:	6122      	str	r2, [r4, #16]
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f8cd a000 	str.w	sl, [sp]
 8007ba8:	aa03      	add	r2, sp, #12
 8007baa:	f7ff fedf 	bl	800796c <_printf_common>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d14c      	bne.n	8007c4c <_printf_i+0x200>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	b004      	add	sp, #16
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbc:	4834      	ldr	r0, [pc, #208]	; (8007c90 <_printf_i+0x244>)
 8007bbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bc2:	6829      	ldr	r1, [r5, #0]
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bca:	6029      	str	r1, [r5, #0]
 8007bcc:	061d      	lsls	r5, r3, #24
 8007bce:	d514      	bpl.n	8007bfa <_printf_i+0x1ae>
 8007bd0:	07df      	lsls	r7, r3, #31
 8007bd2:	bf44      	itt	mi
 8007bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8007bd8:	6023      	strmi	r3, [r4, #0]
 8007bda:	b91e      	cbnz	r6, 8007be4 <_printf_i+0x198>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	f023 0320 	bic.w	r3, r3, #32
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	2310      	movs	r3, #16
 8007be6:	e7af      	b.n	8007b48 <_printf_i+0xfc>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	f043 0320 	orr.w	r3, r3, #32
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	2378      	movs	r3, #120	; 0x78
 8007bf2:	4828      	ldr	r0, [pc, #160]	; (8007c94 <_printf_i+0x248>)
 8007bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bf8:	e7e3      	b.n	8007bc2 <_printf_i+0x176>
 8007bfa:	0659      	lsls	r1, r3, #25
 8007bfc:	bf48      	it	mi
 8007bfe:	b2b6      	uxthmi	r6, r6
 8007c00:	e7e6      	b.n	8007bd0 <_printf_i+0x184>
 8007c02:	4615      	mov	r5, r2
 8007c04:	e7bb      	b.n	8007b7e <_printf_i+0x132>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	6826      	ldr	r6, [r4, #0]
 8007c0a:	1d18      	adds	r0, r3, #4
 8007c0c:	6961      	ldr	r1, [r4, #20]
 8007c0e:	6028      	str	r0, [r5, #0]
 8007c10:	0635      	lsls	r5, r6, #24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	d501      	bpl.n	8007c1a <_printf_i+0x1ce>
 8007c16:	6019      	str	r1, [r3, #0]
 8007c18:	e002      	b.n	8007c20 <_printf_i+0x1d4>
 8007c1a:	0670      	lsls	r0, r6, #25
 8007c1c:	d5fb      	bpl.n	8007c16 <_printf_i+0x1ca>
 8007c1e:	8019      	strh	r1, [r3, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	4615      	mov	r5, r2
 8007c24:	6123      	str	r3, [r4, #16]
 8007c26:	e7ba      	b.n	8007b9e <_printf_i+0x152>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	1d1a      	adds	r2, r3, #4
 8007c2e:	602a      	str	r2, [r5, #0]
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	6862      	ldr	r2, [r4, #4]
 8007c34:	4628      	mov	r0, r5
 8007c36:	f000 fbc9 	bl	80083cc <memchr>
 8007c3a:	b108      	cbz	r0, 8007c40 <_printf_i+0x1f4>
 8007c3c:	1b40      	subs	r0, r0, r5
 8007c3e:	6060      	str	r0, [r4, #4]
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	2300      	movs	r3, #0
 8007c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4a:	e7a8      	b.n	8007b9e <_printf_i+0x152>
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	47d0      	blx	sl
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0ab      	beq.n	8007bb2 <_printf_i+0x166>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	079b      	lsls	r3, r3, #30
 8007c5e:	d413      	bmi.n	8007c88 <_printf_i+0x23c>
 8007c60:	68e0      	ldr	r0, [r4, #12]
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	4298      	cmp	r0, r3
 8007c66:	bfb8      	it	lt
 8007c68:	4618      	movlt	r0, r3
 8007c6a:	e7a4      	b.n	8007bb6 <_printf_i+0x16a>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4649      	mov	r1, r9
 8007c72:	4640      	mov	r0, r8
 8007c74:	47d0      	blx	sl
 8007c76:	3001      	adds	r0, #1
 8007c78:	d09b      	beq.n	8007bb2 <_printf_i+0x166>
 8007c7a:	3501      	adds	r5, #1
 8007c7c:	68e3      	ldr	r3, [r4, #12]
 8007c7e:	9903      	ldr	r1, [sp, #12]
 8007c80:	1a5b      	subs	r3, r3, r1
 8007c82:	42ab      	cmp	r3, r5
 8007c84:	dcf2      	bgt.n	8007c6c <_printf_i+0x220>
 8007c86:	e7eb      	b.n	8007c60 <_printf_i+0x214>
 8007c88:	2500      	movs	r5, #0
 8007c8a:	f104 0619 	add.w	r6, r4, #25
 8007c8e:	e7f5      	b.n	8007c7c <_printf_i+0x230>
 8007c90:	0800ba31 	.word	0x0800ba31
 8007c94:	0800ba42 	.word	0x0800ba42

08007c98 <_sbrk_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4d05      	ldr	r5, [pc, #20]	; (8007cb4 <_sbrk_r+0x1c>)
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7f9 fdd8 	bl	8001858 <_sbrk>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_sbrk_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_sbrk_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20005758 	.word	0x20005758

08007cb8 <siprintf>:
 8007cb8:	b40e      	push	{r1, r2, r3}
 8007cba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cbe:	b500      	push	{lr}
 8007cc0:	b09c      	sub	sp, #112	; 0x70
 8007cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8007cc4:	9002      	str	r0, [sp, #8]
 8007cc6:	9006      	str	r0, [sp, #24]
 8007cc8:	9107      	str	r1, [sp, #28]
 8007cca:	9104      	str	r1, [sp, #16]
 8007ccc:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <siprintf+0x38>)
 8007cce:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <siprintf+0x3c>)
 8007cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd4:	9105      	str	r1, [sp, #20]
 8007cd6:	6800      	ldr	r0, [r0, #0]
 8007cd8:	a902      	add	r1, sp, #8
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	f000 fc42 	bl	8008564 <_svfiprintf_r>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	b01c      	add	sp, #112	; 0x70
 8007ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cec:	b003      	add	sp, #12
 8007cee:	4770      	bx	lr
 8007cf0:	20000214 	.word	0x20000214
 8007cf4:	ffff0208 	.word	0xffff0208

08007cf8 <_strtol_l.constprop.0>:
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfe:	4680      	mov	r8, r0
 8007d00:	d001      	beq.n	8007d06 <_strtol_l.constprop.0+0xe>
 8007d02:	2b24      	cmp	r3, #36	; 0x24
 8007d04:	d906      	bls.n	8007d14 <_strtol_l.constprop.0+0x1c>
 8007d06:	f7ff fbb9 	bl	800747c <__errno>
 8007d0a:	2316      	movs	r3, #22
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	460d      	mov	r5, r1
 8007d16:	4f35      	ldr	r7, [pc, #212]	; (8007dec <_strtol_l.constprop.0+0xf4>)
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1e:	5de6      	ldrb	r6, [r4, r7]
 8007d20:	f016 0608 	ands.w	r6, r6, #8
 8007d24:	d1f8      	bne.n	8007d18 <_strtol_l.constprop.0+0x20>
 8007d26:	2c2d      	cmp	r4, #45	; 0x2d
 8007d28:	d12f      	bne.n	8007d8a <_strtol_l.constprop.0+0x92>
 8007d2a:	2601      	movs	r6, #1
 8007d2c:	782c      	ldrb	r4, [r5, #0]
 8007d2e:	1c85      	adds	r5, r0, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d057      	beq.n	8007de4 <_strtol_l.constprop.0+0xec>
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d109      	bne.n	8007d4c <_strtol_l.constprop.0+0x54>
 8007d38:	2c30      	cmp	r4, #48	; 0x30
 8007d3a:	d107      	bne.n	8007d4c <_strtol_l.constprop.0+0x54>
 8007d3c:	7828      	ldrb	r0, [r5, #0]
 8007d3e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007d42:	2858      	cmp	r0, #88	; 0x58
 8007d44:	d149      	bne.n	8007dda <_strtol_l.constprop.0+0xe2>
 8007d46:	2310      	movs	r3, #16
 8007d48:	786c      	ldrb	r4, [r5, #1]
 8007d4a:	3502      	adds	r5, #2
 8007d4c:	2700      	movs	r7, #0
 8007d4e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007d52:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007d56:	fbbe f9f3 	udiv	r9, lr, r3
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	fb03 ea19 	mls	sl, r3, r9, lr
 8007d60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d64:	f1bc 0f09 	cmp.w	ip, #9
 8007d68:	d814      	bhi.n	8007d94 <_strtol_l.constprop.0+0x9c>
 8007d6a:	4664      	mov	r4, ip
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	dd22      	ble.n	8007db6 <_strtol_l.constprop.0+0xbe>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	db1d      	blt.n	8007db0 <_strtol_l.constprop.0+0xb8>
 8007d74:	4581      	cmp	r9, r0
 8007d76:	d31b      	bcc.n	8007db0 <_strtol_l.constprop.0+0xb8>
 8007d78:	d101      	bne.n	8007d7e <_strtol_l.constprop.0+0x86>
 8007d7a:	45a2      	cmp	sl, r4
 8007d7c:	db18      	blt.n	8007db0 <_strtol_l.constprop.0+0xb8>
 8007d7e:	2701      	movs	r7, #1
 8007d80:	fb00 4003 	mla	r0, r0, r3, r4
 8007d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d88:	e7ea      	b.n	8007d60 <_strtol_l.constprop.0+0x68>
 8007d8a:	2c2b      	cmp	r4, #43	; 0x2b
 8007d8c:	bf04      	itt	eq
 8007d8e:	782c      	ldrbeq	r4, [r5, #0]
 8007d90:	1c85      	addeq	r5, r0, #2
 8007d92:	e7cd      	b.n	8007d30 <_strtol_l.constprop.0+0x38>
 8007d94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d98:	f1bc 0f19 	cmp.w	ip, #25
 8007d9c:	d801      	bhi.n	8007da2 <_strtol_l.constprop.0+0xaa>
 8007d9e:	3c37      	subs	r4, #55	; 0x37
 8007da0:	e7e4      	b.n	8007d6c <_strtol_l.constprop.0+0x74>
 8007da2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007da6:	f1bc 0f19 	cmp.w	ip, #25
 8007daa:	d804      	bhi.n	8007db6 <_strtol_l.constprop.0+0xbe>
 8007dac:	3c57      	subs	r4, #87	; 0x57
 8007dae:	e7dd      	b.n	8007d6c <_strtol_l.constprop.0+0x74>
 8007db0:	f04f 37ff 	mov.w	r7, #4294967295
 8007db4:	e7e6      	b.n	8007d84 <_strtol_l.constprop.0+0x8c>
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	da07      	bge.n	8007dca <_strtol_l.constprop.0+0xd2>
 8007dba:	2322      	movs	r3, #34	; 0x22
 8007dbc:	4670      	mov	r0, lr
 8007dbe:	f8c8 3000 	str.w	r3, [r8]
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d0a4      	beq.n	8007d10 <_strtol_l.constprop.0+0x18>
 8007dc6:	1e69      	subs	r1, r5, #1
 8007dc8:	e005      	b.n	8007dd6 <_strtol_l.constprop.0+0xde>
 8007dca:	b106      	cbz	r6, 8007dce <_strtol_l.constprop.0+0xd6>
 8007dcc:	4240      	negs	r0, r0
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d09e      	beq.n	8007d10 <_strtol_l.constprop.0+0x18>
 8007dd2:	2f00      	cmp	r7, #0
 8007dd4:	d1f7      	bne.n	8007dc6 <_strtol_l.constprop.0+0xce>
 8007dd6:	6011      	str	r1, [r2, #0]
 8007dd8:	e79a      	b.n	8007d10 <_strtol_l.constprop.0+0x18>
 8007dda:	2430      	movs	r4, #48	; 0x30
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1b5      	bne.n	8007d4c <_strtol_l.constprop.0+0x54>
 8007de0:	2308      	movs	r3, #8
 8007de2:	e7b3      	b.n	8007d4c <_strtol_l.constprop.0+0x54>
 8007de4:	2c30      	cmp	r4, #48	; 0x30
 8007de6:	d0a9      	beq.n	8007d3c <_strtol_l.constprop.0+0x44>
 8007de8:	230a      	movs	r3, #10
 8007dea:	e7af      	b.n	8007d4c <_strtol_l.constprop.0+0x54>
 8007dec:	0800ba54 	.word	0x0800ba54

08007df0 <strtol>:
 8007df0:	4613      	mov	r3, r2
 8007df2:	460a      	mov	r2, r1
 8007df4:	4601      	mov	r1, r0
 8007df6:	4802      	ldr	r0, [pc, #8]	; (8007e00 <strtol+0x10>)
 8007df8:	6800      	ldr	r0, [r0, #0]
 8007dfa:	f7ff bf7d 	b.w	8007cf8 <_strtol_l.constprop.0>
 8007dfe:	bf00      	nop
 8007e00:	20000214 	.word	0x20000214

08007e04 <__swbuf_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	460e      	mov	r6, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b118      	cbz	r0, 8007e16 <__swbuf_r+0x12>
 8007e0e:	6983      	ldr	r3, [r0, #24]
 8007e10:	b90b      	cbnz	r3, 8007e16 <__swbuf_r+0x12>
 8007e12:	f000 f9d5 	bl	80081c0 <__sinit>
 8007e16:	4b21      	ldr	r3, [pc, #132]	; (8007e9c <__swbuf_r+0x98>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d12b      	bne.n	8007e74 <__swbuf_r+0x70>
 8007e1c:	686c      	ldr	r4, [r5, #4]
 8007e1e:	69a3      	ldr	r3, [r4, #24]
 8007e20:	60a3      	str	r3, [r4, #8]
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	071a      	lsls	r2, r3, #28
 8007e26:	d52f      	bpl.n	8007e88 <__swbuf_r+0x84>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b36b      	cbz	r3, 8007e88 <__swbuf_r+0x84>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	b2f6      	uxtb	r6, r6
 8007e32:	1ac0      	subs	r0, r0, r3
 8007e34:	6963      	ldr	r3, [r4, #20]
 8007e36:	4637      	mov	r7, r6
 8007e38:	4283      	cmp	r3, r0
 8007e3a:	dc04      	bgt.n	8007e46 <__swbuf_r+0x42>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f92a 	bl	8008098 <_fflush_r>
 8007e44:	bb30      	cbnz	r0, 8007e94 <__swbuf_r+0x90>
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	3001      	adds	r0, #1
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	701e      	strb	r6, [r3, #0]
 8007e56:	6963      	ldr	r3, [r4, #20]
 8007e58:	4283      	cmp	r3, r0
 8007e5a:	d004      	beq.n	8007e66 <__swbuf_r+0x62>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	07db      	lsls	r3, r3, #31
 8007e60:	d506      	bpl.n	8007e70 <__swbuf_r+0x6c>
 8007e62:	2e0a      	cmp	r6, #10
 8007e64:	d104      	bne.n	8007e70 <__swbuf_r+0x6c>
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 f915 	bl	8008098 <_fflush_r>
 8007e6e:	b988      	cbnz	r0, 8007e94 <__swbuf_r+0x90>
 8007e70:	4638      	mov	r0, r7
 8007e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <__swbuf_r+0x9c>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d101      	bne.n	8007e7e <__swbuf_r+0x7a>
 8007e7a:	68ac      	ldr	r4, [r5, #8]
 8007e7c:	e7cf      	b.n	8007e1e <__swbuf_r+0x1a>
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <__swbuf_r+0xa0>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	bf08      	it	eq
 8007e84:	68ec      	ldreq	r4, [r5, #12]
 8007e86:	e7ca      	b.n	8007e1e <__swbuf_r+0x1a>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f80c 	bl	8007ea8 <__swsetup_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d0cb      	beq.n	8007e2c <__swbuf_r+0x28>
 8007e94:	f04f 37ff 	mov.w	r7, #4294967295
 8007e98:	e7ea      	b.n	8007e70 <__swbuf_r+0x6c>
 8007e9a:	bf00      	nop
 8007e9c:	0800bb74 	.word	0x0800bb74
 8007ea0:	0800bb94 	.word	0x0800bb94
 8007ea4:	0800bb54 	.word	0x0800bb54

08007ea8 <__swsetup_r>:
 8007ea8:	4b32      	ldr	r3, [pc, #200]	; (8007f74 <__swsetup_r+0xcc>)
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	681d      	ldr	r5, [r3, #0]
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	b125      	cbz	r5, 8007ebe <__swsetup_r+0x16>
 8007eb4:	69ab      	ldr	r3, [r5, #24]
 8007eb6:	b913      	cbnz	r3, 8007ebe <__swsetup_r+0x16>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f981 	bl	80081c0 <__sinit>
 8007ebe:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <__swsetup_r+0xd0>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d10f      	bne.n	8007ee4 <__swsetup_r+0x3c>
 8007ec4:	686c      	ldr	r4, [r5, #4]
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ecc:	0719      	lsls	r1, r3, #28
 8007ece:	d42c      	bmi.n	8007f2a <__swsetup_r+0x82>
 8007ed0:	06dd      	lsls	r5, r3, #27
 8007ed2:	d411      	bmi.n	8007ef8 <__swsetup_r+0x50>
 8007ed4:	2309      	movs	r3, #9
 8007ed6:	6033      	str	r3, [r6, #0]
 8007ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	e03e      	b.n	8007f62 <__swsetup_r+0xba>
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <__swsetup_r+0xd4>)
 8007ee6:	429c      	cmp	r4, r3
 8007ee8:	d101      	bne.n	8007eee <__swsetup_r+0x46>
 8007eea:	68ac      	ldr	r4, [r5, #8]
 8007eec:	e7eb      	b.n	8007ec6 <__swsetup_r+0x1e>
 8007eee:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <__swsetup_r+0xd8>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	bf08      	it	eq
 8007ef4:	68ec      	ldreq	r4, [r5, #12]
 8007ef6:	e7e6      	b.n	8007ec6 <__swsetup_r+0x1e>
 8007ef8:	0758      	lsls	r0, r3, #29
 8007efa:	d512      	bpl.n	8007f22 <__swsetup_r+0x7a>
 8007efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007efe:	b141      	cbz	r1, 8007f12 <__swsetup_r+0x6a>
 8007f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f04:	4299      	cmp	r1, r3
 8007f06:	d002      	beq.n	8007f0e <__swsetup_r+0x66>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff fafb 	bl	8007504 <_free_r>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6363      	str	r3, [r4, #52]	; 0x34
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0308 	orr.w	r3, r3, #8
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	b94b      	cbnz	r3, 8007f42 <__swsetup_r+0x9a>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f38:	d003      	beq.n	8007f42 <__swsetup_r+0x9a>
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f000 fa05 	bl	800834c <__smakebuf_r>
 8007f42:	89a0      	ldrh	r0, [r4, #12]
 8007f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f48:	f010 0301 	ands.w	r3, r0, #1
 8007f4c:	d00a      	beq.n	8007f64 <__swsetup_r+0xbc>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	6963      	ldr	r3, [r4, #20]
 8007f54:	425b      	negs	r3, r3
 8007f56:	61a3      	str	r3, [r4, #24]
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	b943      	cbnz	r3, 8007f6e <__swsetup_r+0xc6>
 8007f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f60:	d1ba      	bne.n	8007ed8 <__swsetup_r+0x30>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	0781      	lsls	r1, r0, #30
 8007f66:	bf58      	it	pl
 8007f68:	6963      	ldrpl	r3, [r4, #20]
 8007f6a:	60a3      	str	r3, [r4, #8]
 8007f6c:	e7f4      	b.n	8007f58 <__swsetup_r+0xb0>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e7f7      	b.n	8007f62 <__swsetup_r+0xba>
 8007f72:	bf00      	nop
 8007f74:	20000214 	.word	0x20000214
 8007f78:	0800bb74 	.word	0x0800bb74
 8007f7c:	0800bb94 	.word	0x0800bb94
 8007f80:	0800bb54 	.word	0x0800bb54

08007f84 <abort>:
 8007f84:	2006      	movs	r0, #6
 8007f86:	b508      	push	{r3, lr}
 8007f88:	f000 fc14 	bl	80087b4 <raise>
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f7f9 fbf0 	bl	8001772 <_exit>
	...

08007f94 <__sflush_r>:
 8007f94:	898a      	ldrh	r2, [r1, #12]
 8007f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f98:	4605      	mov	r5, r0
 8007f9a:	0710      	lsls	r0, r2, #28
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	d457      	bmi.n	8008050 <__sflush_r+0xbc>
 8007fa0:	684b      	ldr	r3, [r1, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dc04      	bgt.n	8007fb0 <__sflush_r+0x1c>
 8007fa6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc01      	bgt.n	8007fb0 <__sflush_r+0x1c>
 8007fac:	2000      	movs	r0, #0
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	d0fa      	beq.n	8007fac <__sflush_r+0x18>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fbc:	682f      	ldr	r7, [r5, #0]
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	d032      	beq.n	8008028 <__sflush_r+0x94>
 8007fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	075a      	lsls	r2, r3, #29
 8007fc8:	d505      	bpl.n	8007fd6 <__sflush_r+0x42>
 8007fca:	6863      	ldr	r3, [r4, #4]
 8007fcc:	1ac0      	subs	r0, r0, r3
 8007fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fd0:	b10b      	cbz	r3, 8007fd6 <__sflush_r+0x42>
 8007fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fd4:	1ac0      	subs	r0, r0, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fdc:	4628      	mov	r0, r5
 8007fde:	6a21      	ldr	r1, [r4, #32]
 8007fe0:	47b0      	blx	r6
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	d106      	bne.n	8007ff6 <__sflush_r+0x62>
 8007fe8:	6829      	ldr	r1, [r5, #0]
 8007fea:	291d      	cmp	r1, #29
 8007fec:	d82c      	bhi.n	8008048 <__sflush_r+0xb4>
 8007fee:	4a29      	ldr	r2, [pc, #164]	; (8008094 <__sflush_r+0x100>)
 8007ff0:	40ca      	lsrs	r2, r1
 8007ff2:	07d6      	lsls	r6, r2, #31
 8007ff4:	d528      	bpl.n	8008048 <__sflush_r+0xb4>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6062      	str	r2, [r4, #4]
 8007ffa:	6922      	ldr	r2, [r4, #16]
 8007ffc:	04d9      	lsls	r1, r3, #19
 8007ffe:	6022      	str	r2, [r4, #0]
 8008000:	d504      	bpl.n	800800c <__sflush_r+0x78>
 8008002:	1c42      	adds	r2, r0, #1
 8008004:	d101      	bne.n	800800a <__sflush_r+0x76>
 8008006:	682b      	ldr	r3, [r5, #0]
 8008008:	b903      	cbnz	r3, 800800c <__sflush_r+0x78>
 800800a:	6560      	str	r0, [r4, #84]	; 0x54
 800800c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800800e:	602f      	str	r7, [r5, #0]
 8008010:	2900      	cmp	r1, #0
 8008012:	d0cb      	beq.n	8007fac <__sflush_r+0x18>
 8008014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008018:	4299      	cmp	r1, r3
 800801a:	d002      	beq.n	8008022 <__sflush_r+0x8e>
 800801c:	4628      	mov	r0, r5
 800801e:	f7ff fa71 	bl	8007504 <_free_r>
 8008022:	2000      	movs	r0, #0
 8008024:	6360      	str	r0, [r4, #52]	; 0x34
 8008026:	e7c2      	b.n	8007fae <__sflush_r+0x1a>
 8008028:	6a21      	ldr	r1, [r4, #32]
 800802a:	2301      	movs	r3, #1
 800802c:	4628      	mov	r0, r5
 800802e:	47b0      	blx	r6
 8008030:	1c41      	adds	r1, r0, #1
 8008032:	d1c7      	bne.n	8007fc4 <__sflush_r+0x30>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0c4      	beq.n	8007fc4 <__sflush_r+0x30>
 800803a:	2b1d      	cmp	r3, #29
 800803c:	d001      	beq.n	8008042 <__sflush_r+0xae>
 800803e:	2b16      	cmp	r3, #22
 8008040:	d101      	bne.n	8008046 <__sflush_r+0xb2>
 8008042:	602f      	str	r7, [r5, #0]
 8008044:	e7b2      	b.n	8007fac <__sflush_r+0x18>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	e7ae      	b.n	8007fae <__sflush_r+0x1a>
 8008050:	690f      	ldr	r7, [r1, #16]
 8008052:	2f00      	cmp	r7, #0
 8008054:	d0aa      	beq.n	8007fac <__sflush_r+0x18>
 8008056:	0793      	lsls	r3, r2, #30
 8008058:	bf18      	it	ne
 800805a:	2300      	movne	r3, #0
 800805c:	680e      	ldr	r6, [r1, #0]
 800805e:	bf08      	it	eq
 8008060:	694b      	ldreq	r3, [r1, #20]
 8008062:	1bf6      	subs	r6, r6, r7
 8008064:	600f      	str	r7, [r1, #0]
 8008066:	608b      	str	r3, [r1, #8]
 8008068:	2e00      	cmp	r6, #0
 800806a:	dd9f      	ble.n	8007fac <__sflush_r+0x18>
 800806c:	4633      	mov	r3, r6
 800806e:	463a      	mov	r2, r7
 8008070:	4628      	mov	r0, r5
 8008072:	6a21      	ldr	r1, [r4, #32]
 8008074:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008078:	47e0      	blx	ip
 800807a:	2800      	cmp	r0, #0
 800807c:	dc06      	bgt.n	800808c <__sflush_r+0xf8>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	e790      	b.n	8007fae <__sflush_r+0x1a>
 800808c:	4407      	add	r7, r0
 800808e:	1a36      	subs	r6, r6, r0
 8008090:	e7ea      	b.n	8008068 <__sflush_r+0xd4>
 8008092:	bf00      	nop
 8008094:	20400001 	.word	0x20400001

08008098 <_fflush_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b913      	cbnz	r3, 80080a8 <_fflush_r+0x10>
 80080a2:	2500      	movs	r5, #0
 80080a4:	4628      	mov	r0, r5
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	b118      	cbz	r0, 80080b2 <_fflush_r+0x1a>
 80080aa:	6983      	ldr	r3, [r0, #24]
 80080ac:	b90b      	cbnz	r3, 80080b2 <_fflush_r+0x1a>
 80080ae:	f000 f887 	bl	80081c0 <__sinit>
 80080b2:	4b14      	ldr	r3, [pc, #80]	; (8008104 <_fflush_r+0x6c>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	d11b      	bne.n	80080f0 <_fflush_r+0x58>
 80080b8:	686c      	ldr	r4, [r5, #4]
 80080ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ef      	beq.n	80080a2 <_fflush_r+0xa>
 80080c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080c4:	07d0      	lsls	r0, r2, #31
 80080c6:	d404      	bmi.n	80080d2 <_fflush_r+0x3a>
 80080c8:	0599      	lsls	r1, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_fflush_r+0x3a>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f000 f915 	bl	80082fc <__retarget_lock_acquire_recursive>
 80080d2:	4628      	mov	r0, r5
 80080d4:	4621      	mov	r1, r4
 80080d6:	f7ff ff5d 	bl	8007f94 <__sflush_r>
 80080da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080dc:	4605      	mov	r5, r0
 80080de:	07da      	lsls	r2, r3, #31
 80080e0:	d4e0      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	059b      	lsls	r3, r3, #22
 80080e6:	d4dd      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ea:	f000 f908 	bl	80082fe <__retarget_lock_release_recursive>
 80080ee:	e7d9      	b.n	80080a4 <_fflush_r+0xc>
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <_fflush_r+0x70>)
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d101      	bne.n	80080fa <_fflush_r+0x62>
 80080f6:	68ac      	ldr	r4, [r5, #8]
 80080f8:	e7df      	b.n	80080ba <_fflush_r+0x22>
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <_fflush_r+0x74>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	bf08      	it	eq
 8008100:	68ec      	ldreq	r4, [r5, #12]
 8008102:	e7da      	b.n	80080ba <_fflush_r+0x22>
 8008104:	0800bb74 	.word	0x0800bb74
 8008108:	0800bb94 	.word	0x0800bb94
 800810c:	0800bb54 	.word	0x0800bb54

08008110 <std>:
 8008110:	2300      	movs	r3, #0
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	e9c0 3300 	strd	r3, r3, [r0]
 800811a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800811e:	6083      	str	r3, [r0, #8]
 8008120:	8181      	strh	r1, [r0, #12]
 8008122:	6643      	str	r3, [r0, #100]	; 0x64
 8008124:	81c2      	strh	r2, [r0, #14]
 8008126:	6183      	str	r3, [r0, #24]
 8008128:	4619      	mov	r1, r3
 800812a:	2208      	movs	r2, #8
 800812c:	305c      	adds	r0, #92	; 0x5c
 800812e:	f7ff f9e1 	bl	80074f4 <memset>
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x38>)
 8008134:	6224      	str	r4, [r4, #32]
 8008136:	6263      	str	r3, [r4, #36]	; 0x24
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <std+0x3c>)
 800813a:	62a3      	str	r3, [r4, #40]	; 0x28
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <std+0x40>)
 800813e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <std+0x44>)
 8008142:	6323      	str	r3, [r4, #48]	; 0x30
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	080087ed 	.word	0x080087ed
 800814c:	0800880f 	.word	0x0800880f
 8008150:	08008847 	.word	0x08008847
 8008154:	0800886b 	.word	0x0800886b

08008158 <_cleanup_r>:
 8008158:	4901      	ldr	r1, [pc, #4]	; (8008160 <_cleanup_r+0x8>)
 800815a:	f000 b8af 	b.w	80082bc <_fwalk_reent>
 800815e:	bf00      	nop
 8008160:	08008099 	.word	0x08008099

08008164 <__sfmoreglue>:
 8008164:	2268      	movs	r2, #104	; 0x68
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	1e4d      	subs	r5, r1, #1
 800816a:	4355      	muls	r5, r2
 800816c:	460e      	mov	r6, r1
 800816e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008172:	f7ff fa2f 	bl	80075d4 <_malloc_r>
 8008176:	4604      	mov	r4, r0
 8008178:	b140      	cbz	r0, 800818c <__sfmoreglue+0x28>
 800817a:	2100      	movs	r1, #0
 800817c:	e9c0 1600 	strd	r1, r6, [r0]
 8008180:	300c      	adds	r0, #12
 8008182:	60a0      	str	r0, [r4, #8]
 8008184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008188:	f7ff f9b4 	bl	80074f4 <memset>
 800818c:	4620      	mov	r0, r4
 800818e:	bd70      	pop	{r4, r5, r6, pc}

08008190 <__sfp_lock_acquire>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__sfp_lock_acquire+0x8>)
 8008192:	f000 b8b3 	b.w	80082fc <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20005755 	.word	0x20005755

0800819c <__sfp_lock_release>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__sfp_lock_release+0x8>)
 800819e:	f000 b8ae 	b.w	80082fe <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20005755 	.word	0x20005755

080081a8 <__sinit_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	; (80081b0 <__sinit_lock_acquire+0x8>)
 80081aa:	f000 b8a7 	b.w	80082fc <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	20005756 	.word	0x20005756

080081b4 <__sinit_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sinit_lock_release+0x8>)
 80081b6:	f000 b8a2 	b.w	80082fe <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	20005756 	.word	0x20005756

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sinit_lock_acquire>
 80081c8:	69a3      	ldr	r3, [r4, #24]
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sinit_lock_release>
 80081d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081d8:	6523      	str	r3, [r4, #80]	; 0x50
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <__sinit+0x68>)
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <__sinit+0x6c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	bf08      	it	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	4620      	mov	r0, r4
 80081ea:	bf08      	it	eq
 80081ec:	61a3      	streq	r3, [r4, #24]
 80081ee:	f000 f81f 	bl	8008230 <__sfp>
 80081f2:	6060      	str	r0, [r4, #4]
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 f81b 	bl	8008230 <__sfp>
 80081fa:	60a0      	str	r0, [r4, #8]
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 f817 	bl	8008230 <__sfp>
 8008202:	2200      	movs	r2, #0
 8008204:	2104      	movs	r1, #4
 8008206:	60e0      	str	r0, [r4, #12]
 8008208:	6860      	ldr	r0, [r4, #4]
 800820a:	f7ff ff81 	bl	8008110 <std>
 800820e:	2201      	movs	r2, #1
 8008210:	2109      	movs	r1, #9
 8008212:	68a0      	ldr	r0, [r4, #8]
 8008214:	f7ff ff7c 	bl	8008110 <std>
 8008218:	2202      	movs	r2, #2
 800821a:	2112      	movs	r1, #18
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	f7ff ff77 	bl	8008110 <std>
 8008222:	2301      	movs	r3, #1
 8008224:	61a3      	str	r3, [r4, #24]
 8008226:	e7d1      	b.n	80081cc <__sinit+0xc>
 8008228:	0800ba1c 	.word	0x0800ba1c
 800822c:	08008159 	.word	0x08008159

08008230 <__sfp>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	4607      	mov	r7, r0
 8008234:	f7ff ffac 	bl	8008190 <__sfp_lock_acquire>
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <__sfp+0x84>)
 800823a:	681e      	ldr	r6, [r3, #0]
 800823c:	69b3      	ldr	r3, [r6, #24]
 800823e:	b913      	cbnz	r3, 8008246 <__sfp+0x16>
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff ffbd 	bl	80081c0 <__sinit>
 8008246:	3648      	adds	r6, #72	; 0x48
 8008248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	d503      	bpl.n	8008258 <__sfp+0x28>
 8008250:	6833      	ldr	r3, [r6, #0]
 8008252:	b30b      	cbz	r3, 8008298 <__sfp+0x68>
 8008254:	6836      	ldr	r6, [r6, #0]
 8008256:	e7f7      	b.n	8008248 <__sfp+0x18>
 8008258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800825c:	b9d5      	cbnz	r5, 8008294 <__sfp+0x64>
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <__sfp+0x88>)
 8008260:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008264:	60e3      	str	r3, [r4, #12]
 8008266:	6665      	str	r5, [r4, #100]	; 0x64
 8008268:	f000 f847 	bl	80082fa <__retarget_lock_init_recursive>
 800826c:	f7ff ff96 	bl	800819c <__sfp_lock_release>
 8008270:	2208      	movs	r2, #8
 8008272:	4629      	mov	r1, r5
 8008274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800827c:	6025      	str	r5, [r4, #0]
 800827e:	61a5      	str	r5, [r4, #24]
 8008280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008284:	f7ff f936 	bl	80074f4 <memset>
 8008288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800828c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008290:	4620      	mov	r0, r4
 8008292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008294:	3468      	adds	r4, #104	; 0x68
 8008296:	e7d9      	b.n	800824c <__sfp+0x1c>
 8008298:	2104      	movs	r1, #4
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff ff62 	bl	8008164 <__sfmoreglue>
 80082a0:	4604      	mov	r4, r0
 80082a2:	6030      	str	r0, [r6, #0]
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1d5      	bne.n	8008254 <__sfp+0x24>
 80082a8:	f7ff ff78 	bl	800819c <__sfp_lock_release>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	e7ee      	b.n	8008290 <__sfp+0x60>
 80082b2:	bf00      	nop
 80082b4:	0800ba1c 	.word	0x0800ba1c
 80082b8:	ffff0001 	.word	0xffff0001

080082bc <_fwalk_reent>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4606      	mov	r6, r0
 80082c2:	4688      	mov	r8, r1
 80082c4:	2700      	movs	r7, #0
 80082c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ce:	f1b9 0901 	subs.w	r9, r9, #1
 80082d2:	d505      	bpl.n	80082e0 <_fwalk_reent+0x24>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d1f7      	bne.n	80082ca <_fwalk_reent+0xe>
 80082da:	4638      	mov	r0, r7
 80082dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e0:	89ab      	ldrh	r3, [r5, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d907      	bls.n	80082f6 <_fwalk_reent+0x3a>
 80082e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ea:	3301      	adds	r3, #1
 80082ec:	d003      	beq.n	80082f6 <_fwalk_reent+0x3a>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4630      	mov	r0, r6
 80082f2:	47c0      	blx	r8
 80082f4:	4307      	orrs	r7, r0
 80082f6:	3568      	adds	r5, #104	; 0x68
 80082f8:	e7e9      	b.n	80082ce <_fwalk_reent+0x12>

080082fa <__retarget_lock_init_recursive>:
 80082fa:	4770      	bx	lr

080082fc <__retarget_lock_acquire_recursive>:
 80082fc:	4770      	bx	lr

080082fe <__retarget_lock_release_recursive>:
 80082fe:	4770      	bx	lr

08008300 <__swhatbuf_r>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	460e      	mov	r6, r1
 8008304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008308:	4614      	mov	r4, r2
 800830a:	2900      	cmp	r1, #0
 800830c:	461d      	mov	r5, r3
 800830e:	b096      	sub	sp, #88	; 0x58
 8008310:	da08      	bge.n	8008324 <__swhatbuf_r+0x24>
 8008312:	2200      	movs	r2, #0
 8008314:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	061a      	lsls	r2, r3, #24
 800831c:	d410      	bmi.n	8008340 <__swhatbuf_r+0x40>
 800831e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008322:	e00e      	b.n	8008342 <__swhatbuf_r+0x42>
 8008324:	466a      	mov	r2, sp
 8008326:	f000 fac7 	bl	80088b8 <_fstat_r>
 800832a:	2800      	cmp	r0, #0
 800832c:	dbf1      	blt.n	8008312 <__swhatbuf_r+0x12>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008338:	425a      	negs	r2, r3
 800833a:	415a      	adcs	r2, r3
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	e7ee      	b.n	800831e <__swhatbuf_r+0x1e>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2000      	movs	r0, #0
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	b016      	add	sp, #88	; 0x58
 8008348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800834c <__smakebuf_r>:
 800834c:	898b      	ldrh	r3, [r1, #12]
 800834e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008350:	079d      	lsls	r5, r3, #30
 8008352:	4606      	mov	r6, r0
 8008354:	460c      	mov	r4, r1
 8008356:	d507      	bpl.n	8008368 <__smakebuf_r+0x1c>
 8008358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	2301      	movs	r3, #1
 8008362:	6163      	str	r3, [r4, #20]
 8008364:	b002      	add	sp, #8
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	466a      	mov	r2, sp
 800836a:	ab01      	add	r3, sp, #4
 800836c:	f7ff ffc8 	bl	8008300 <__swhatbuf_r>
 8008370:	9900      	ldr	r1, [sp, #0]
 8008372:	4605      	mov	r5, r0
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff f92d 	bl	80075d4 <_malloc_r>
 800837a:	b948      	cbnz	r0, 8008390 <__smakebuf_r+0x44>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d4ef      	bmi.n	8008364 <__smakebuf_r+0x18>
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e7e3      	b.n	8008358 <__smakebuf_r+0xc>
 8008390:	4b0d      	ldr	r3, [pc, #52]	; (80083c8 <__smakebuf_r+0x7c>)
 8008392:	62b3      	str	r3, [r6, #40]	; 0x28
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	6020      	str	r0, [r4, #0]
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	6120      	str	r0, [r4, #16]
 80083a2:	6163      	str	r3, [r4, #20]
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	b15b      	cbz	r3, 80083c0 <__smakebuf_r+0x74>
 80083a8:	4630      	mov	r0, r6
 80083aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ae:	f000 fa95 	bl	80088dc <_isatty_r>
 80083b2:	b128      	cbz	r0, 80083c0 <__smakebuf_r+0x74>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	89a0      	ldrh	r0, [r4, #12]
 80083c2:	4305      	orrs	r5, r0
 80083c4:	81a5      	strh	r5, [r4, #12]
 80083c6:	e7cd      	b.n	8008364 <__smakebuf_r+0x18>
 80083c8:	08008159 	.word	0x08008159

080083cc <memchr>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	b2c9      	uxtb	r1, r1
 80083d2:	4402      	add	r2, r0
 80083d4:	4293      	cmp	r3, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	d101      	bne.n	80083de <memchr+0x12>
 80083da:	2000      	movs	r0, #0
 80083dc:	e003      	b.n	80083e6 <memchr+0x1a>
 80083de:	7804      	ldrb	r4, [r0, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	428c      	cmp	r4, r1
 80083e4:	d1f6      	bne.n	80083d4 <memchr+0x8>
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <memcpy>:
 80083e8:	440a      	add	r2, r1
 80083ea:	4291      	cmp	r1, r2
 80083ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	4770      	bx	lr
 80083f4:	b510      	push	{r4, lr}
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008400:	d1f9      	bne.n	80083f6 <memcpy+0xe>
 8008402:	bd10      	pop	{r4, pc}

08008404 <memmove>:
 8008404:	4288      	cmp	r0, r1
 8008406:	b510      	push	{r4, lr}
 8008408:	eb01 0402 	add.w	r4, r1, r2
 800840c:	d902      	bls.n	8008414 <memmove+0x10>
 800840e:	4284      	cmp	r4, r0
 8008410:	4623      	mov	r3, r4
 8008412:	d807      	bhi.n	8008424 <memmove+0x20>
 8008414:	1e43      	subs	r3, r0, #1
 8008416:	42a1      	cmp	r1, r4
 8008418:	d008      	beq.n	800842c <memmove+0x28>
 800841a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800841e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008422:	e7f8      	b.n	8008416 <memmove+0x12>
 8008424:	4601      	mov	r1, r0
 8008426:	4402      	add	r2, r0
 8008428:	428a      	cmp	r2, r1
 800842a:	d100      	bne.n	800842e <memmove+0x2a>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008436:	e7f7      	b.n	8008428 <memmove+0x24>

08008438 <__malloc_lock>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__malloc_lock+0x8>)
 800843a:	f7ff bf5f 	b.w	80082fc <__retarget_lock_acquire_recursive>
 800843e:	bf00      	nop
 8008440:	20005754 	.word	0x20005754

08008444 <__malloc_unlock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_unlock+0x8>)
 8008446:	f7ff bf5a 	b.w	80082fe <__retarget_lock_release_recursive>
 800844a:	bf00      	nop
 800844c:	20005754 	.word	0x20005754

08008450 <_realloc_r>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	4680      	mov	r8, r0
 8008456:	4614      	mov	r4, r2
 8008458:	460e      	mov	r6, r1
 800845a:	b921      	cbnz	r1, 8008466 <_realloc_r+0x16>
 800845c:	4611      	mov	r1, r2
 800845e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	f7ff b8b7 	b.w	80075d4 <_malloc_r>
 8008466:	b92a      	cbnz	r2, 8008474 <_realloc_r+0x24>
 8008468:	f7ff f84c 	bl	8007504 <_free_r>
 800846c:	4625      	mov	r5, r4
 800846e:	4628      	mov	r0, r5
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	f000 fa54 	bl	8008920 <_malloc_usable_size_r>
 8008478:	4284      	cmp	r4, r0
 800847a:	4607      	mov	r7, r0
 800847c:	d802      	bhi.n	8008484 <_realloc_r+0x34>
 800847e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008482:	d812      	bhi.n	80084aa <_realloc_r+0x5a>
 8008484:	4621      	mov	r1, r4
 8008486:	4640      	mov	r0, r8
 8008488:	f7ff f8a4 	bl	80075d4 <_malloc_r>
 800848c:	4605      	mov	r5, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	d0ed      	beq.n	800846e <_realloc_r+0x1e>
 8008492:	42bc      	cmp	r4, r7
 8008494:	4622      	mov	r2, r4
 8008496:	4631      	mov	r1, r6
 8008498:	bf28      	it	cs
 800849a:	463a      	movcs	r2, r7
 800849c:	f7ff ffa4 	bl	80083e8 <memcpy>
 80084a0:	4631      	mov	r1, r6
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7ff f82e 	bl	8007504 <_free_r>
 80084a8:	e7e1      	b.n	800846e <_realloc_r+0x1e>
 80084aa:	4635      	mov	r5, r6
 80084ac:	e7df      	b.n	800846e <_realloc_r+0x1e>

080084ae <__ssputs_r>:
 80084ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b2:	688e      	ldr	r6, [r1, #8]
 80084b4:	4682      	mov	sl, r0
 80084b6:	429e      	cmp	r6, r3
 80084b8:	460c      	mov	r4, r1
 80084ba:	4690      	mov	r8, r2
 80084bc:	461f      	mov	r7, r3
 80084be:	d838      	bhi.n	8008532 <__ssputs_r+0x84>
 80084c0:	898a      	ldrh	r2, [r1, #12]
 80084c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084c6:	d032      	beq.n	800852e <__ssputs_r+0x80>
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	6909      	ldr	r1, [r1, #16]
 80084cc:	3301      	adds	r3, #1
 80084ce:	eba5 0901 	sub.w	r9, r5, r1
 80084d2:	6965      	ldr	r5, [r4, #20]
 80084d4:	444b      	add	r3, r9
 80084d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084de:	106d      	asrs	r5, r5, #1
 80084e0:	429d      	cmp	r5, r3
 80084e2:	bf38      	it	cc
 80084e4:	461d      	movcc	r5, r3
 80084e6:	0553      	lsls	r3, r2, #21
 80084e8:	d531      	bpl.n	800854e <__ssputs_r+0xa0>
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7ff f872 	bl	80075d4 <_malloc_r>
 80084f0:	4606      	mov	r6, r0
 80084f2:	b950      	cbnz	r0, 800850a <__ssputs_r+0x5c>
 80084f4:	230c      	movs	r3, #12
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	f8ca 3000 	str.w	r3, [sl]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850a:	464a      	mov	r2, r9
 800850c:	6921      	ldr	r1, [r4, #16]
 800850e:	f7ff ff6b 	bl	80083e8 <memcpy>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	6126      	str	r6, [r4, #16]
 8008520:	444e      	add	r6, r9
 8008522:	6026      	str	r6, [r4, #0]
 8008524:	463e      	mov	r6, r7
 8008526:	6165      	str	r5, [r4, #20]
 8008528:	eba5 0509 	sub.w	r5, r5, r9
 800852c:	60a5      	str	r5, [r4, #8]
 800852e:	42be      	cmp	r6, r7
 8008530:	d900      	bls.n	8008534 <__ssputs_r+0x86>
 8008532:	463e      	mov	r6, r7
 8008534:	4632      	mov	r2, r6
 8008536:	4641      	mov	r1, r8
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	f7ff ff63 	bl	8008404 <memmove>
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	2000      	movs	r0, #0
 8008542:	1b9b      	subs	r3, r3, r6
 8008544:	60a3      	str	r3, [r4, #8]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	4433      	add	r3, r6
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	e7db      	b.n	8008506 <__ssputs_r+0x58>
 800854e:	462a      	mov	r2, r5
 8008550:	f7ff ff7e 	bl	8008450 <_realloc_r>
 8008554:	4606      	mov	r6, r0
 8008556:	2800      	cmp	r0, #0
 8008558:	d1e1      	bne.n	800851e <__ssputs_r+0x70>
 800855a:	4650      	mov	r0, sl
 800855c:	6921      	ldr	r1, [r4, #16]
 800855e:	f7fe ffd1 	bl	8007504 <_free_r>
 8008562:	e7c7      	b.n	80084f4 <__ssputs_r+0x46>

08008564 <_svfiprintf_r>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	4698      	mov	r8, r3
 800856a:	898b      	ldrh	r3, [r1, #12]
 800856c:	4607      	mov	r7, r0
 800856e:	061b      	lsls	r3, r3, #24
 8008570:	460d      	mov	r5, r1
 8008572:	4614      	mov	r4, r2
 8008574:	b09d      	sub	sp, #116	; 0x74
 8008576:	d50e      	bpl.n	8008596 <_svfiprintf_r+0x32>
 8008578:	690b      	ldr	r3, [r1, #16]
 800857a:	b963      	cbnz	r3, 8008596 <_svfiprintf_r+0x32>
 800857c:	2140      	movs	r1, #64	; 0x40
 800857e:	f7ff f829 	bl	80075d4 <_malloc_r>
 8008582:	6028      	str	r0, [r5, #0]
 8008584:	6128      	str	r0, [r5, #16]
 8008586:	b920      	cbnz	r0, 8008592 <_svfiprintf_r+0x2e>
 8008588:	230c      	movs	r3, #12
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e0d1      	b.n	8008736 <_svfiprintf_r+0x1d2>
 8008592:	2340      	movs	r3, #64	; 0x40
 8008594:	616b      	str	r3, [r5, #20]
 8008596:	2300      	movs	r3, #0
 8008598:	9309      	str	r3, [sp, #36]	; 0x24
 800859a:	2320      	movs	r3, #32
 800859c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085a0:	2330      	movs	r3, #48	; 0x30
 80085a2:	f04f 0901 	mov.w	r9, #1
 80085a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008750 <_svfiprintf_r+0x1ec>
 80085ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085b2:	4623      	mov	r3, r4
 80085b4:	469a      	mov	sl, r3
 80085b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ba:	b10a      	cbz	r2, 80085c0 <_svfiprintf_r+0x5c>
 80085bc:	2a25      	cmp	r2, #37	; 0x25
 80085be:	d1f9      	bne.n	80085b4 <_svfiprintf_r+0x50>
 80085c0:	ebba 0b04 	subs.w	fp, sl, r4
 80085c4:	d00b      	beq.n	80085de <_svfiprintf_r+0x7a>
 80085c6:	465b      	mov	r3, fp
 80085c8:	4622      	mov	r2, r4
 80085ca:	4629      	mov	r1, r5
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7ff ff6e 	bl	80084ae <__ssputs_r>
 80085d2:	3001      	adds	r0, #1
 80085d4:	f000 80aa 	beq.w	800872c <_svfiprintf_r+0x1c8>
 80085d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085da:	445a      	add	r2, fp
 80085dc:	9209      	str	r2, [sp, #36]	; 0x24
 80085de:	f89a 3000 	ldrb.w	r3, [sl]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80a2 	beq.w	800872c <_svfiprintf_r+0x1c8>
 80085e8:	2300      	movs	r3, #0
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f2:	f10a 0a01 	add.w	sl, sl, #1
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008600:	4654      	mov	r4, sl
 8008602:	2205      	movs	r2, #5
 8008604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008608:	4851      	ldr	r0, [pc, #324]	; (8008750 <_svfiprintf_r+0x1ec>)
 800860a:	f7ff fedf 	bl	80083cc <memchr>
 800860e:	9a04      	ldr	r2, [sp, #16]
 8008610:	b9d8      	cbnz	r0, 800864a <_svfiprintf_r+0xe6>
 8008612:	06d0      	lsls	r0, r2, #27
 8008614:	bf44      	itt	mi
 8008616:	2320      	movmi	r3, #32
 8008618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800861c:	0711      	lsls	r1, r2, #28
 800861e:	bf44      	itt	mi
 8008620:	232b      	movmi	r3, #43	; 0x2b
 8008622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008626:	f89a 3000 	ldrb.w	r3, [sl]
 800862a:	2b2a      	cmp	r3, #42	; 0x2a
 800862c:	d015      	beq.n	800865a <_svfiprintf_r+0xf6>
 800862e:	4654      	mov	r4, sl
 8008630:	2000      	movs	r0, #0
 8008632:	f04f 0c0a 	mov.w	ip, #10
 8008636:	9a07      	ldr	r2, [sp, #28]
 8008638:	4621      	mov	r1, r4
 800863a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863e:	3b30      	subs	r3, #48	; 0x30
 8008640:	2b09      	cmp	r3, #9
 8008642:	d94e      	bls.n	80086e2 <_svfiprintf_r+0x17e>
 8008644:	b1b0      	cbz	r0, 8008674 <_svfiprintf_r+0x110>
 8008646:	9207      	str	r2, [sp, #28]
 8008648:	e014      	b.n	8008674 <_svfiprintf_r+0x110>
 800864a:	eba0 0308 	sub.w	r3, r0, r8
 800864e:	fa09 f303 	lsl.w	r3, r9, r3
 8008652:	4313      	orrs	r3, r2
 8008654:	46a2      	mov	sl, r4
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	e7d2      	b.n	8008600 <_svfiprintf_r+0x9c>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	9103      	str	r1, [sp, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfbb      	ittet	lt
 8008666:	425b      	neglt	r3, r3
 8008668:	f042 0202 	orrlt.w	r2, r2, #2
 800866c:	9307      	strge	r3, [sp, #28]
 800866e:	9307      	strlt	r3, [sp, #28]
 8008670:	bfb8      	it	lt
 8008672:	9204      	strlt	r2, [sp, #16]
 8008674:	7823      	ldrb	r3, [r4, #0]
 8008676:	2b2e      	cmp	r3, #46	; 0x2e
 8008678:	d10c      	bne.n	8008694 <_svfiprintf_r+0x130>
 800867a:	7863      	ldrb	r3, [r4, #1]
 800867c:	2b2a      	cmp	r3, #42	; 0x2a
 800867e:	d135      	bne.n	80086ec <_svfiprintf_r+0x188>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	3402      	adds	r4, #2
 8008684:	1d1a      	adds	r2, r3, #4
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	9203      	str	r2, [sp, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	bfb8      	it	lt
 800868e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008692:	9305      	str	r3, [sp, #20]
 8008694:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008754 <_svfiprintf_r+0x1f0>
 8008698:	2203      	movs	r2, #3
 800869a:	4650      	mov	r0, sl
 800869c:	7821      	ldrb	r1, [r4, #0]
 800869e:	f7ff fe95 	bl	80083cc <memchr>
 80086a2:	b140      	cbz	r0, 80086b6 <_svfiprintf_r+0x152>
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	eba0 000a 	sub.w	r0, r0, sl
 80086aa:	fa03 f000 	lsl.w	r0, r3, r0
 80086ae:	9b04      	ldr	r3, [sp, #16]
 80086b0:	3401      	adds	r4, #1
 80086b2:	4303      	orrs	r3, r0
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ba:	2206      	movs	r2, #6
 80086bc:	4826      	ldr	r0, [pc, #152]	; (8008758 <_svfiprintf_r+0x1f4>)
 80086be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086c2:	f7ff fe83 	bl	80083cc <memchr>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d038      	beq.n	800873c <_svfiprintf_r+0x1d8>
 80086ca:	4b24      	ldr	r3, [pc, #144]	; (800875c <_svfiprintf_r+0x1f8>)
 80086cc:	bb1b      	cbnz	r3, 8008716 <_svfiprintf_r+0x1b2>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	3307      	adds	r3, #7
 80086d2:	f023 0307 	bic.w	r3, r3, #7
 80086d6:	3308      	adds	r3, #8
 80086d8:	9303      	str	r3, [sp, #12]
 80086da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086dc:	4433      	add	r3, r6
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	e767      	b.n	80085b2 <_svfiprintf_r+0x4e>
 80086e2:	460c      	mov	r4, r1
 80086e4:	2001      	movs	r0, #1
 80086e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ea:	e7a5      	b.n	8008638 <_svfiprintf_r+0xd4>
 80086ec:	2300      	movs	r3, #0
 80086ee:	f04f 0c0a 	mov.w	ip, #10
 80086f2:	4619      	mov	r1, r3
 80086f4:	3401      	adds	r4, #1
 80086f6:	9305      	str	r3, [sp, #20]
 80086f8:	4620      	mov	r0, r4
 80086fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086fe:	3a30      	subs	r2, #48	; 0x30
 8008700:	2a09      	cmp	r2, #9
 8008702:	d903      	bls.n	800870c <_svfiprintf_r+0x1a8>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0c5      	beq.n	8008694 <_svfiprintf_r+0x130>
 8008708:	9105      	str	r1, [sp, #20]
 800870a:	e7c3      	b.n	8008694 <_svfiprintf_r+0x130>
 800870c:	4604      	mov	r4, r0
 800870e:	2301      	movs	r3, #1
 8008710:	fb0c 2101 	mla	r1, ip, r1, r2
 8008714:	e7f0      	b.n	80086f8 <_svfiprintf_r+0x194>
 8008716:	ab03      	add	r3, sp, #12
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	462a      	mov	r2, r5
 800871c:	4638      	mov	r0, r7
 800871e:	4b10      	ldr	r3, [pc, #64]	; (8008760 <_svfiprintf_r+0x1fc>)
 8008720:	a904      	add	r1, sp, #16
 8008722:	f3af 8000 	nop.w
 8008726:	1c42      	adds	r2, r0, #1
 8008728:	4606      	mov	r6, r0
 800872a:	d1d6      	bne.n	80086da <_svfiprintf_r+0x176>
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	065b      	lsls	r3, r3, #25
 8008730:	f53f af2c 	bmi.w	800858c <_svfiprintf_r+0x28>
 8008734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008736:	b01d      	add	sp, #116	; 0x74
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	462a      	mov	r2, r5
 8008742:	4638      	mov	r0, r7
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <_svfiprintf_r+0x1fc>)
 8008746:	a904      	add	r1, sp, #16
 8008748:	f7ff f980 	bl	8007a4c <_printf_i>
 800874c:	e7eb      	b.n	8008726 <_svfiprintf_r+0x1c2>
 800874e:	bf00      	nop
 8008750:	0800ba20 	.word	0x0800ba20
 8008754:	0800ba26 	.word	0x0800ba26
 8008758:	0800ba2a 	.word	0x0800ba2a
 800875c:	00000000 	.word	0x00000000
 8008760:	080084af 	.word	0x080084af

08008764 <_raise_r>:
 8008764:	291f      	cmp	r1, #31
 8008766:	b538      	push	{r3, r4, r5, lr}
 8008768:	4604      	mov	r4, r0
 800876a:	460d      	mov	r5, r1
 800876c:	d904      	bls.n	8008778 <_raise_r+0x14>
 800876e:	2316      	movs	r3, #22
 8008770:	6003      	str	r3, [r0, #0]
 8008772:	f04f 30ff 	mov.w	r0, #4294967295
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800877a:	b112      	cbz	r2, 8008782 <_raise_r+0x1e>
 800877c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008780:	b94b      	cbnz	r3, 8008796 <_raise_r+0x32>
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f830 	bl	80087e8 <_getpid_r>
 8008788:	462a      	mov	r2, r5
 800878a:	4601      	mov	r1, r0
 800878c:	4620      	mov	r0, r4
 800878e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008792:	f000 b817 	b.w	80087c4 <_kill_r>
 8008796:	2b01      	cmp	r3, #1
 8008798:	d00a      	beq.n	80087b0 <_raise_r+0x4c>
 800879a:	1c59      	adds	r1, r3, #1
 800879c:	d103      	bne.n	80087a6 <_raise_r+0x42>
 800879e:	2316      	movs	r3, #22
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	2001      	movs	r0, #1
 80087a4:	e7e7      	b.n	8008776 <_raise_r+0x12>
 80087a6:	2400      	movs	r4, #0
 80087a8:	4628      	mov	r0, r5
 80087aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087ae:	4798      	blx	r3
 80087b0:	2000      	movs	r0, #0
 80087b2:	e7e0      	b.n	8008776 <_raise_r+0x12>

080087b4 <raise>:
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <raise+0xc>)
 80087b6:	4601      	mov	r1, r0
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	f7ff bfd3 	b.w	8008764 <_raise_r>
 80087be:	bf00      	nop
 80087c0:	20000214 	.word	0x20000214

080087c4 <_kill_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	2300      	movs	r3, #0
 80087c8:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_kill_r+0x20>)
 80087ca:	4604      	mov	r4, r0
 80087cc:	4608      	mov	r0, r1
 80087ce:	4611      	mov	r1, r2
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	f7f8 ffbe 	bl	8001752 <_kill>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d102      	bne.n	80087e0 <_kill_r+0x1c>
 80087da:	682b      	ldr	r3, [r5, #0]
 80087dc:	b103      	cbz	r3, 80087e0 <_kill_r+0x1c>
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
 80087e2:	bf00      	nop
 80087e4:	20005758 	.word	0x20005758

080087e8 <_getpid_r>:
 80087e8:	f7f8 bfac 	b.w	8001744 <_getpid>

080087ec <__sread>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	460c      	mov	r4, r1
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	f000 f89c 	bl	8008930 <_read_r>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	bfab      	itete	ge
 80087fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008800:	181b      	addge	r3, r3, r0
 8008802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008806:	bfac      	ite	ge
 8008808:	6563      	strge	r3, [r4, #84]	; 0x54
 800880a:	81a3      	strhlt	r3, [r4, #12]
 800880c:	bd10      	pop	{r4, pc}

0800880e <__swrite>:
 800880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	461f      	mov	r7, r3
 8008814:	898b      	ldrh	r3, [r1, #12]
 8008816:	4605      	mov	r5, r0
 8008818:	05db      	lsls	r3, r3, #23
 800881a:	460c      	mov	r4, r1
 800881c:	4616      	mov	r6, r2
 800881e:	d505      	bpl.n	800882c <__swrite+0x1e>
 8008820:	2302      	movs	r3, #2
 8008822:	2200      	movs	r2, #0
 8008824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008828:	f000 f868 	bl	80088fc <_lseek_r>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	4632      	mov	r2, r6
 8008830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	4628      	mov	r0, r5
 8008838:	463b      	mov	r3, r7
 800883a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800883e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008842:	f000 b817 	b.w	8008874 <_write_r>

08008846 <__sseek>:
 8008846:	b510      	push	{r4, lr}
 8008848:	460c      	mov	r4, r1
 800884a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884e:	f000 f855 	bl	80088fc <_lseek_r>
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	bf15      	itete	ne
 8008858:	6560      	strne	r0, [r4, #84]	; 0x54
 800885a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800885e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008862:	81a3      	strheq	r3, [r4, #12]
 8008864:	bf18      	it	ne
 8008866:	81a3      	strhne	r3, [r4, #12]
 8008868:	bd10      	pop	{r4, pc}

0800886a <__sclose>:
 800886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886e:	f000 b813 	b.w	8008898 <_close_r>
	...

08008874 <_write_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	2200      	movs	r2, #0
 800887e:	4d05      	ldr	r5, [pc, #20]	; (8008894 <_write_r+0x20>)
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	f7f8 ff9c 	bl	80017c0 <_write>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_write_r+0x1e>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_write_r+0x1e>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20005758 	.word	0x20005758

08008898 <_close_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	2300      	movs	r3, #0
 800889c:	4d05      	ldr	r5, [pc, #20]	; (80088b4 <_close_r+0x1c>)
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f8 ffa8 	bl	80017f8 <_close>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_close_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_close_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20005758 	.word	0x20005758

080088b8 <_fstat_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	2300      	movs	r3, #0
 80088bc:	4d06      	ldr	r5, [pc, #24]	; (80088d8 <_fstat_r+0x20>)
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	f7f8 ffa2 	bl	800180e <_fstat>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d102      	bne.n	80088d4 <_fstat_r+0x1c>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	b103      	cbz	r3, 80088d4 <_fstat_r+0x1c>
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20005758 	.word	0x20005758

080088dc <_isatty_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	2300      	movs	r3, #0
 80088e0:	4d05      	ldr	r5, [pc, #20]	; (80088f8 <_isatty_r+0x1c>)
 80088e2:	4604      	mov	r4, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	f7f8 ffa0 	bl	800182c <_isatty>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_isatty_r+0x1a>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_isatty_r+0x1a>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20005758 	.word	0x20005758

080088fc <_lseek_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	2200      	movs	r2, #0
 8008906:	4d05      	ldr	r5, [pc, #20]	; (800891c <_lseek_r+0x20>)
 8008908:	602a      	str	r2, [r5, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f7f8 ff98 	bl	8001840 <_lseek>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_lseek_r+0x1e>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_lseek_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20005758 	.word	0x20005758

08008920 <_malloc_usable_size_r>:
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f18      	subs	r0, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfbc      	itt	lt
 800892a:	580b      	ldrlt	r3, [r1, r0]
 800892c:	18c0      	addlt	r0, r0, r3
 800892e:	4770      	bx	lr

08008930 <_read_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	4611      	mov	r1, r2
 8008938:	2200      	movs	r2, #0
 800893a:	4d05      	ldr	r5, [pc, #20]	; (8008950 <_read_r+0x20>)
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7f8 ff21 	bl	8001786 <_read>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_read_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_read_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20005758 	.word	0x20005758

08008954 <_init>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr

08008960 <_fini>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr
